
RC_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08009c70  08009c70  0000ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e04  08009e04  0000b0d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009e04  08009e04  0000ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e0c  08009e0c  0000b0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e0c  08009e0c  0000ae0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e10  08009e10  0000ae10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  08009e14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004db8  200000d8  08009eec  0000b0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e90  08009eec  0000be90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d502  00000000  00000000  0000b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004687  00000000  00000000  0002860a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0002cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b0  00000000  00000000  0002e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac67  00000000  00000000  0002f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4e4  00000000  00000000  0004a1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af8b  00000000  00000000  0006669b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006584  00000000  00000000  0010166c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00107bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c58 	.word	0x08009c58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	08009c58 	.word	0x08009c58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Moter_Init>:
uint8_t R_speed = 80;



void Moter_Init()//초기 세팅
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // 모터 L용 PWM
 8000574:	2100      	movs	r1, #0
 8000576:	4807      	ldr	r0, [pc, #28]	@ (8000594 <Moter_Init+0x24>)
 8000578:	f002 fea4 	bl	80032c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // 모터 R용 PWM
 800057c:	2104      	movs	r1, #4
 800057e:	4805      	ldr	r0, [pc, #20]	@ (8000594 <Moter_Init+0x24>)
 8000580:	f002 fea0 	bl	80032c4 <HAL_TIM_PWM_Start>

	TIM3->CCR1 = 0;
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <Moter_Init+0x28>)
 8000586:	2200      	movs	r2, #0
 8000588:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 0;
 800058a:	4b03      	ldr	r3, [pc, #12]	@ (8000598 <Moter_Init+0x28>)
 800058c:	2200      	movs	r2, #0
 800058e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200001a8 	.word	0x200001a8
 8000598:	40000400 	.word	0x40000400

0800059c <Moter_Advance>:


void Moter_Advance()//전진
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN4_PIN, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	480f      	ldr	r0, [pc, #60]	@ (80005e4 <Moter_Advance+0x48>)
 80005a6:	f002 f855 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN3_PIN, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <Moter_Advance+0x48>)
 80005b2:	f002 f84f 	bl	8002654 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN2_PIN, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <Moter_Advance+0x48>)
 80005be:	f002 f849 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN1_PIN, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <Moter_Advance+0x48>)
 80005ca:	f002 f843 	bl	8002654 <HAL_GPIO_WritePin>

	TIM3->CCR1 = L_speed;
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <Moter_Advance+0x4c>)
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <Moter_Advance+0x50>)
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = R_speed;
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <Moter_Advance+0x54>)
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	4b04      	ldr	r3, [pc, #16]	@ (80005ec <Moter_Advance+0x50>)
 80005dc:	639a      	str	r2, [r3, #56]	@ 0x38


}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020400 	.word	0x40020400
 80005e8:	20000001 	.word	0x20000001
 80005ec:	40000400 	.word	0x40000400
 80005f0:	20000002 	.word	0x20000002

080005f4 <Moter_Junior>:
void Moter_Junior()//후진
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN4_PIN, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2102      	movs	r1, #2
 80005fc:	480f      	ldr	r0, [pc, #60]	@ (800063c <Moter_Junior+0x48>)
 80005fe:	f002 f829 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN3_PIN, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <Moter_Junior+0x48>)
 800060a:	f002 f823 	bl	8002654 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN2_PIN, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <Moter_Junior+0x48>)
 8000616:	f002 f81d 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN1_PIN, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000620:	4806      	ldr	r0, [pc, #24]	@ (800063c <Moter_Junior+0x48>)
 8000622:	f002 f817 	bl	8002654 <HAL_GPIO_WritePin>

	TIM3->CCR1 = L_speed;
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <Moter_Junior+0x4c>)
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <Moter_Junior+0x50>)
 800062c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = R_speed;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <Moter_Junior+0x54>)
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <Moter_Junior+0x50>)
 8000634:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40020400 	.word	0x40020400
 8000640:	20000001 	.word	0x20000001
 8000644:	40000400 	.word	0x40000400
 8000648:	20000002 	.word	0x20000002

0800064c <Moter_Right>:
void Moter_Right()//우회전
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN4_PIN, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	2102      	movs	r1, #2
 8000654:	480f      	ldr	r0, [pc, #60]	@ (8000694 <Moter_Right+0x48>)
 8000656:	f001 fffd 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN3_PIN, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <Moter_Right+0x48>)
 8000662:	f001 fff7 	bl	8002654 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN2_PIN, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <Moter_Right+0x48>)
 800066e:	f001 fff1 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN1_PIN, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000678:	4806      	ldr	r0, [pc, #24]	@ (8000694 <Moter_Right+0x48>)
 800067a:	f001 ffeb 	bl	8002654 <HAL_GPIO_WritePin>

	TIM3->CCR1 = L_speed;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <Moter_Right+0x4c>)
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <Moter_Right+0x50>)
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = R_speed;
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <Moter_Right+0x54>)
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	4b04      	ldr	r3, [pc, #16]	@ (800069c <Moter_Right+0x50>)
 800068c:	639a      	str	r2, [r3, #56]	@ 0x38

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020400 	.word	0x40020400
 8000698:	20000001 	.word	0x20000001
 800069c:	40000400 	.word	0x40000400
 80006a0:	20000002 	.word	0x20000002

080006a4 <Moter_Left>:
void Moter_Left()//좌회전
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN4_PIN, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	480f      	ldr	r0, [pc, #60]	@ (80006ec <Moter_Left+0x48>)
 80006ae:	f001 ffd1 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN3_PIN, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <Moter_Left+0x48>)
 80006ba:	f001 ffcb 	bl	8002654 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN2_PIN, 1);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c4:	4809      	ldr	r0, [pc, #36]	@ (80006ec <Moter_Left+0x48>)
 80006c6:	f001 ffc5 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN1_PIN, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d0:	4806      	ldr	r0, [pc, #24]	@ (80006ec <Moter_Left+0x48>)
 80006d2:	f001 ffbf 	bl	8002654 <HAL_GPIO_WritePin>

	TIM3->CCR1 = L_speed;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <Moter_Left+0x4c>)
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <Moter_Left+0x50>)
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = R_speed;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <Moter_Left+0x54>)
 80006e0:	781a      	ldrb	r2, [r3, #0]
 80006e2:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <Moter_Left+0x50>)
 80006e4:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40020400 	.word	0x40020400
 80006f0:	20000001 	.word	0x20000001
 80006f4:	40000400 	.word	0x40000400
 80006f8:	20000002 	.word	0x20000002

080006fc <Moter_Stop>:


void Moter_Stop()//정지
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN4_PIN, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2102      	movs	r1, #2
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <Moter_Stop+0x38>)
 8000706:	f001 ffa5 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_L_IN3_PIN, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000710:	4808      	ldr	r0, [pc, #32]	@ (8000734 <Moter_Stop+0x38>)
 8000712:	f001 ff9f 	bl	8002654 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN2_PIN, 1);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <Moter_Stop+0x38>)
 800071e:	f001 ff99 	bl	8002654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_R_IN1_PIN, 1);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000728:	4802      	ldr	r0, [pc, #8]	@ (8000734 <Moter_Stop+0x38>)
 800072a:	f001 ff93 	bl	8002654 <HAL_GPIO_WritePin>


}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020400 	.word	0x40020400

08000738 <Moter_Auto_drive>:



//자율주행 모드
void Moter_Auto_drive(uint8_t mid, uint8_t right, uint8_t left)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
 8000742:	460b      	mov	r3, r1
 8000744:	71bb      	strb	r3, [r7, #6]
 8000746:	4613      	mov	r3, r2
 8000748:	717b      	strb	r3, [r7, #5]


	//정면 장애물 감지 → 후진 후 회전
	if (mid <= 20)
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b14      	cmp	r3, #20
 800074e:	d851      	bhi.n	80007f4 <Moter_Auto_drive+0xbc>
	{
		Moter_Junior(); //후진
 8000750:	f7ff ff50 	bl	80005f4 <Moter_Junior>

		//각 속도별 후진 지속시간 조절
		if(speed == 80)//저속
 8000754:	4b54      	ldr	r3, [pc, #336]	@ (80008a8 <Moter_Auto_drive+0x170>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b50      	cmp	r3, #80	@ 0x50
 800075a:	d104      	bne.n	8000766 <Moter_Auto_drive+0x2e>
		{
			vTaskDelay(pdMS_TO_TICKS(300));  // 후진 지속 시간 (300ms)
 800075c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000760:	f006 fc84 	bl	800706c <vTaskDelay>
 8000764:	e006      	b.n	8000774 <Moter_Auto_drive+0x3c>
		}
		else if(speed == 100)//가속
 8000766:	4b50      	ldr	r3, [pc, #320]	@ (80008a8 <Moter_Auto_drive+0x170>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b64      	cmp	r3, #100	@ 0x64
 800076c:	d102      	bne.n	8000774 <Moter_Auto_drive+0x3c>
		{
			vTaskDelay(pdMS_TO_TICKS(100));  // 후진 지속 시간 (100ms)
 800076e:	2064      	movs	r0, #100	@ 0x64
 8000770:	f006 fc7c 	bl	800706c <vTaskDelay>
		}


		//좌우 초음파 거리중 먼곳으로 회전
		if (right > left)
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	429a      	cmp	r2, r3
 800077a:	d90e      	bls.n	800079a <Moter_Auto_drive+0x62>
		{
			//회전용 속도조절
			L_speed = speed - 10;
 800077c:	4b4a      	ldr	r3, [pc, #296]	@ (80008a8 <Moter_Auto_drive+0x170>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3b0a      	subs	r3, #10
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b49      	ldr	r3, [pc, #292]	@ (80008ac <Moter_Auto_drive+0x174>)
 8000786:	701a      	strb	r2, [r3, #0]
			R_speed = speed - 20;
 8000788:	4b47      	ldr	r3, [pc, #284]	@ (80008a8 <Moter_Auto_drive+0x170>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3b14      	subs	r3, #20
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b47      	ldr	r3, [pc, #284]	@ (80008b0 <Moter_Auto_drive+0x178>)
 8000792:	701a      	strb	r2, [r3, #0]

			Moter_Right(); // 우회전
 8000794:	f7ff ff5a 	bl	800064c <Moter_Right>
 8000798:	e00d      	b.n	80007b6 <Moter_Auto_drive+0x7e>
		}
		else
		{
			//회전용 속도조절
			L_speed = speed - 20;
 800079a:	4b43      	ldr	r3, [pc, #268]	@ (80008a8 <Moter_Auto_drive+0x170>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b14      	subs	r3, #20
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b42      	ldr	r3, [pc, #264]	@ (80008ac <Moter_Auto_drive+0x174>)
 80007a4:	701a      	strb	r2, [r3, #0]
			R_speed = speed - 10;
 80007a6:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <Moter_Auto_drive+0x170>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3b0a      	subs	r3, #10
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b40      	ldr	r3, [pc, #256]	@ (80008b0 <Moter_Auto_drive+0x178>)
 80007b0:	701a      	strb	r2, [r3, #0]

			Moter_Left(); // 좌회전
 80007b2:	f7ff ff77 	bl	80006a4 <Moter_Left>
		}

		//각 속도별 회전 지속시간 조절
		if(speed == 80)
 80007b6:	4b3c      	ldr	r3, [pc, #240]	@ (80008a8 <Moter_Auto_drive+0x170>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b50      	cmp	r3, #80	@ 0x50
 80007bc:	d104      	bne.n	80007c8 <Moter_Auto_drive+0x90>
		{
			vTaskDelay(pdMS_TO_TICKS(300));
 80007be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007c2:	f006 fc53 	bl	800706c <vTaskDelay>
 80007c6:	e006      	b.n	80007d6 <Moter_Auto_drive+0x9e>
		}
		else if(speed == 100)
 80007c8:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <Moter_Auto_drive+0x170>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b64      	cmp	r3, #100	@ 0x64
 80007ce:	d102      	bne.n	80007d6 <Moter_Auto_drive+0x9e>
		{
			vTaskDelay(pdMS_TO_TICKS(50));
 80007d0:	2032      	movs	r0, #50	@ 0x32
 80007d2:	f006 fc4b 	bl	800706c <vTaskDelay>
		}


		//스피드 초기화
		L_speed = speed;
 80007d6:	4b34      	ldr	r3, [pc, #208]	@ (80008a8 <Moter_Auto_drive+0x170>)
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	4b34      	ldr	r3, [pc, #208]	@ (80008ac <Moter_Auto_drive+0x174>)
 80007dc:	701a      	strb	r2, [r3, #0]
		R_speed = speed;
 80007de:	4b32      	ldr	r3, [pc, #200]	@ (80008a8 <Moter_Auto_drive+0x170>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	4b33      	ldr	r3, [pc, #204]	@ (80008b0 <Moter_Auto_drive+0x178>)
 80007e4:	701a      	strb	r2, [r3, #0]

		 // 방향 감지 카운트 리셋
		left_count = 0;
 80007e6:	4b33      	ldr	r3, [pc, #204]	@ (80008b4 <Moter_Auto_drive+0x17c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
		right_count = 0;
 80007ec:	4b32      	ldr	r3, [pc, #200]	@ (80008b8 <Moter_Auto_drive+0x180>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]

		// 방향 감지 리셋
		left_count = 0;
		right_count = 0;
	}
}
 80007f2:	e055      	b.n	80008a0 <Moter_Auto_drive+0x168>
	else if (left <= 30)
 80007f4:	797b      	ldrb	r3, [r7, #5]
 80007f6:	2b1e      	cmp	r3, #30
 80007f8:	d823      	bhi.n	8000842 <Moter_Auto_drive+0x10a>
		left_count++;
 80007fa:	4b2e      	ldr	r3, [pc, #184]	@ (80008b4 <Moter_Auto_drive+0x17c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <Moter_Auto_drive+0x17c>)
 8000804:	701a      	strb	r2, [r3, #0]
		if (left_count >= 3)  // 3회 이상 연속 감지 시 회전
 8000806:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <Moter_Auto_drive+0x17c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d948      	bls.n	80008a0 <Moter_Auto_drive+0x168>
			L_speed = speed - 10;
 800080e:	4b26      	ldr	r3, [pc, #152]	@ (80008a8 <Moter_Auto_drive+0x170>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3b0a      	subs	r3, #10
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <Moter_Auto_drive+0x174>)
 8000818:	701a      	strb	r2, [r3, #0]
			R_speed = speed - 20;
 800081a:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <Moter_Auto_drive+0x170>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3b14      	subs	r3, #20
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <Moter_Auto_drive+0x178>)
 8000824:	701a      	strb	r2, [r3, #0]
			Moter_Right(); // 우회전
 8000826:	f7ff ff11 	bl	800064c <Moter_Right>
			L_speed = speed;
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <Moter_Auto_drive+0x170>)
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <Moter_Auto_drive+0x174>)
 8000830:	701a      	strb	r2, [r3, #0]
			R_speed = speed;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <Moter_Auto_drive+0x170>)
 8000834:	781a      	ldrb	r2, [r3, #0]
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <Moter_Auto_drive+0x178>)
 8000838:	701a      	strb	r2, [r3, #0]
			left_count = 0;
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <Moter_Auto_drive+0x17c>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
}
 8000840:	e02e      	b.n	80008a0 <Moter_Auto_drive+0x168>
	else if (right <= 30)
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	2b1e      	cmp	r3, #30
 8000846:	d823      	bhi.n	8000890 <Moter_Auto_drive+0x158>
		right_count++;
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <Moter_Auto_drive+0x180>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <Moter_Auto_drive+0x180>)
 8000852:	701a      	strb	r2, [r3, #0]
		if (right_count >= 3)  // 3회 이상 연속 감지 시 회전
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <Moter_Auto_drive+0x180>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d921      	bls.n	80008a0 <Moter_Auto_drive+0x168>
			L_speed = speed-20;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <Moter_Auto_drive+0x170>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3b14      	subs	r3, #20
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <Moter_Auto_drive+0x174>)
 8000866:	701a      	strb	r2, [r3, #0]
			R_speed = speed-10;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <Moter_Auto_drive+0x170>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	3b0a      	subs	r3, #10
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <Moter_Auto_drive+0x178>)
 8000872:	701a      	strb	r2, [r3, #0]
			Moter_Left(); // 좌회전
 8000874:	f7ff ff16 	bl	80006a4 <Moter_Left>
			L_speed = speed;
 8000878:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <Moter_Auto_drive+0x170>)
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <Moter_Auto_drive+0x174>)
 800087e:	701a      	strb	r2, [r3, #0]
			R_speed = speed;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <Moter_Auto_drive+0x170>)
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <Moter_Auto_drive+0x178>)
 8000886:	701a      	strb	r2, [r3, #0]
			right_count = 0;
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <Moter_Auto_drive+0x180>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
}
 800088e:	e007      	b.n	80008a0 <Moter_Auto_drive+0x168>
		Moter_Advance(); // 전진
 8000890:	f7ff fe84 	bl	800059c <Moter_Advance>
		left_count = 0;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <Moter_Auto_drive+0x17c>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
		right_count = 0;
 800089a:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <Moter_Auto_drive+0x180>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000000 	.word	0x20000000
 80008ac:	20000001 	.word	0x20000001
 80008b0:	20000002 	.word	0x20000002
 80008b4:	200000f4 	.word	0x200000f4
 80008b8:	200000f5 	.word	0x200000f5

080008bc <Buzzer_Timer_Interrupt>:
uint8_t sound_i = 0;



void Buzzer_Timer_Interrupt(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
    if (++sound_i >= sizeof(song) / sizeof(song[0]))
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <Buzzer_Timer_Interrupt+0x28>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <Buzzer_Timer_Interrupt+0x28>)
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <Buzzer_Timer_Interrupt+0x28>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b14      	cmp	r3, #20
 80008d2:	d902      	bls.n	80008da <Buzzer_Timer_Interrupt+0x1e>
    {
        sound_i = 0;  // 배열 끝에 도달하면 초기화
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <Buzzer_Timer_Interrupt+0x28>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
    }
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	200000f6 	.word	0x200000f6

080008e8 <Start_Buzzer>:


void Start_Buzzer(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim11);
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <Start_Buzzer+0x38>)
 80008ee:	f002 fbff 	bl	80030f0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80008f2:	2100      	movs	r1, #0
 80008f4:	480b      	ldr	r0, [pc, #44]	@ (8000924 <Start_Buzzer+0x3c>)
 80008f6:	f002 fce5 	bl	80032c4 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2101      	movs	r1, #1
 80008fe:	480a      	ldr	r0, [pc, #40]	@ (8000928 <Start_Buzzer+0x40>)
 8000900:	f001 fea8 	bl	8002654 <HAL_GPIO_WritePin>
    TIM5->PSC = song[sound_i];  // 음계 설정
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <Start_Buzzer+0x44>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <Start_Buzzer+0x48>)
 800090c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <Start_Buzzer+0x4c>)
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM5->CCR1 = 900;           // 듀티 사이클 설정
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <Start_Buzzer+0x4c>)
 8000916:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800091a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000280 	.word	0x20000280
 8000924:	200001f0 	.word	0x200001f0
 8000928:	40020000 	.word	0x40020000
 800092c:	200000f6 	.word	0x200000f6
 8000930:	20000004 	.word	0x20000004
 8000934:	40000c00 	.word	0x40000c00

08000938 <Stop_Buzzer>:


void Stop_Buzzer(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim11);
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <Stop_Buzzer+0x2c>)
 800093e:	f002 fc39 	bl	80031b4 <HAL_TIM_Base_Stop_IT>
    TIM5->CCR1 = 0;  // PWM 출력 완전히 종료
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <Stop_Buzzer+0x30>)
 8000944:	2200      	movs	r2, #0
 8000946:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000948:	2100      	movs	r1, #0
 800094a:	4808      	ldr	r0, [pc, #32]	@ (800096c <Stop_Buzzer+0x34>)
 800094c:	f002 fd6a 	bl	8003424 <HAL_TIM_PWM_Stop>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2101      	movs	r1, #1
 8000954:	4806      	ldr	r0, [pc, #24]	@ (8000970 <Stop_Buzzer+0x38>)
 8000956:	f001 fe7d 	bl	8002654 <HAL_GPIO_WritePin>
    sound_i = 0;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <Stop_Buzzer+0x3c>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000280 	.word	0x20000280
 8000968:	40000c00 	.word	0x40000c00
 800096c:	200001f0 	.word	0x200001f0
 8000970:	40020000 	.word	0x40020000
 8000974:	200000f6 	.word	0x200000f6

08000978 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	//uart2번 사용했기 때문에 설정
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000980:	1d39      	adds	r1, r7, #4
 8000982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000986:	2201      	movs	r2, #1
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <__io_putchar+0x20>)
 800098a:	f003 ff63 	bl	8004854 <HAL_UART_Transmit>

	return ch;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000310 	.word	0x20000310

0800099c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* creation of myMutex01 */
	myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80009a0:	4812      	ldr	r0, [pc, #72]	@ (80009ec <MX_FREERTOS_Init+0x50>)
 80009a2:	f005 f898 	bl	8005ad6 <osMutexNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a11      	ldr	r2, [pc, #68]	@ (80009f0 <MX_FREERTOS_Init+0x54>)
 80009aa:	6013      	str	r3, [r2, #0]

	/* creation of myMutex02 */
	myMutex02Handle = osMutexNew(&myMutex02_attributes);
 80009ac:	4811      	ldr	r0, [pc, #68]	@ (80009f4 <MX_FREERTOS_Init+0x58>)
 80009ae:	f005 f892 	bl	8005ad6 <osMutexNew>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a10      	ldr	r2, [pc, #64]	@ (80009f8 <MX_FREERTOS_Init+0x5c>)
 80009b6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b8:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <MX_FREERTOS_Init+0x60>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4810      	ldr	r0, [pc, #64]	@ (8000a00 <MX_FREERTOS_Init+0x64>)
 80009be:	f004 ffdd 	bl	800597c <osThreadNew>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a04 <MX_FREERTOS_Init+0x68>)
 80009c6:	6013      	str	r3, [r2, #0]

	/* creation of sensorTask */
	sensorTaskHandle = osThreadNew(StartTask02, NULL, &sensorTask_attributes);
 80009c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <MX_FREERTOS_Init+0x6c>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	480f      	ldr	r0, [pc, #60]	@ (8000a0c <MX_FREERTOS_Init+0x70>)
 80009ce:	f004 ffd5 	bl	800597c <osThreadNew>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <MX_FREERTOS_Init+0x74>)
 80009d6:	6013      	str	r3, [r2, #0]

	/* creation of moter_Task */
	moter_TaskHandle = osThreadNew(StartTask03, NULL, &moter_Task_attributes);
 80009d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <MX_FREERTOS_Init+0x78>)
 80009da:	2100      	movs	r1, #0
 80009dc:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <MX_FREERTOS_Init+0x7c>)
 80009de:	f004 ffcd 	bl	800597c <osThreadNew>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <MX_FREERTOS_Init+0x80>)
 80009e6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	08009d98 	.word	0x08009d98
 80009f0:	20000104 	.word	0x20000104
 80009f4:	08009da8 	.word	0x08009da8
 80009f8:	20000108 	.word	0x20000108
 80009fc:	08009d2c 	.word	0x08009d2c
 8000a00:	08000a21 	.word	0x08000a21
 8000a04:	200000f8 	.word	0x200000f8
 8000a08:	08009d50 	.word	0x08009d50
 8000a0c:	08000a75 	.word	0x08000a75
 8000a10:	200000fc 	.word	0x200000fc
 8000a14:	08009d74 	.word	0x08009d74
 8000a18:	08000aed 	.word	0x08000aed
 8000a1c:	20000100 	.word	0x20000100

08000a20 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
		//깜박이를 켰다면
		if(led_all==1||led_left==1||led_right==1)
 8000a28:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <StartDefaultTask+0x44>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d007      	beq.n	8000a40 <StartDefaultTask+0x20>
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <StartDefaultTask+0x48>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d003      	beq.n	8000a40 <StartDefaultTask+0x20>
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <StartDefaultTask+0x4c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d102      	bne.n	8000a46 <StartDefaultTask+0x26>
		{
			Start_Blinker();
 8000a40:	f000 f90c 	bl	8000c5c <Start_Blinker>
		{
 8000a44:	e001      	b.n	8000a4a <StartDefaultTask+0x2a>
		}
		else
		{
			Stop_Blinker();
 8000a46:	f000 f913 	bl	8000c70 <Stop_Blinker>
		}


		//클락션을 울렸다면
		if(buzzer_Check==1)
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <StartDefaultTask+0x50>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d102      	bne.n	8000a58 <StartDefaultTask+0x38>
		{
			Start_Buzzer();
 8000a52:	f7ff ff49 	bl	80008e8 <Start_Buzzer>
 8000a56:	e001      	b.n	8000a5c <StartDefaultTask+0x3c>
		}
		else
		{
			Stop_Buzzer();
 8000a58:	f7ff ff6e 	bl	8000938 <Stop_Buzzer>
		}



		osDelay(10);
 8000a5c:	200a      	movs	r0, #10
 8000a5e:	f005 f81f 	bl	8005aa0 <osDelay>
		if(led_all==1||led_left==1||led_right==1)
 8000a62:	e7e1      	b.n	8000a28 <StartDefaultTask+0x8>
 8000a64:	20000111 	.word	0x20000111
 8000a68:	2000010f 	.word	0x2000010f
 8000a6c:	20000110 	.word	0x20000110
 8000a70:	2000010e 	.word	0x2000010e

08000a74 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
		//초음파용 rtos



		//자율주행일 때 초음파 데이터 읽어오기
		if(auto_drive_mode == 1)
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <StartTask02+0x5c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d120      	bne.n	8000ac6 <StartTask02+0x52>

			//osMutexAcquire(myMutex01Handle, osWaitForever);


			//왼쪽 초음파
			HCSR04_Read(&sensor3);
 8000a84:	4813      	ldr	r0, [pc, #76]	@ (8000ad4 <StartTask02+0x60>)
 8000a86:	f000 fa27 	bl	8000ed8 <HCSR04_Read>
			printf("left: %d cm\n",sensor3.distance);
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <StartTask02+0x60>)
 8000a8c:	79db      	ldrb	r3, [r3, #7]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <StartTask02+0x64>)
 8000a92:	f008 f9d3 	bl	8008e3c <iprintf>


			//중앙 초음파
			HCSR04_Read(&sensor1);
 8000a96:	4811      	ldr	r0, [pc, #68]	@ (8000adc <StartTask02+0x68>)
 8000a98:	f000 fa1e 	bl	8000ed8 <HCSR04_Read>
			printf("mid: %d cm\n",sensor1.distance);
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <StartTask02+0x68>)
 8000a9e:	79db      	ldrb	r3, [r3, #7]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480f      	ldr	r0, [pc, #60]	@ (8000ae0 <StartTask02+0x6c>)
 8000aa4:	f008 f9ca 	bl	8008e3c <iprintf>

			//오른쪽 초음파
			HCSR04_Read(&sensor2);
 8000aa8:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <StartTask02+0x70>)
 8000aaa:	f000 fa15 	bl	8000ed8 <HCSR04_Read>
			printf("right: %d cm\n",sensor2.distance);
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <StartTask02+0x70>)
 8000ab0:	79db      	ldrb	r3, [r3, #7]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <StartTask02+0x74>)
 8000ab6:	f008 f9c1 	bl	8008e3c <iprintf>


			printf("\n");//가독성 용 띄어쓰기
 8000aba:	200a      	movs	r0, #10
 8000abc:	f008 f9d0 	bl	8008e60 <putchar>
			osDelay(50);
 8000ac0:	2032      	movs	r0, #50	@ 0x32
 8000ac2:	f004 ffed 	bl	8005aa0 <osDelay>
			//osMutexRelease(myMutex01Handle);


		}

		osDelay(50);
 8000ac6:	2032      	movs	r0, #50	@ 0x32
 8000ac8:	f004 ffea 	bl	8005aa0 <osDelay>
		if(auto_drive_mode == 1)
 8000acc:	e7d6      	b.n	8000a7c <StartTask02+0x8>
 8000ace:	bf00      	nop
 8000ad0:	200000f7 	.word	0x200000f7
 8000ad4:	20000058 	.word	0x20000058
 8000ad8:	08009cac 	.word	0x08009cac
 8000adc:	20000030 	.word	0x20000030
 8000ae0:	08009cbc 	.word	0x08009cbc
 8000ae4:	20000044 	.word	0x20000044
 8000ae8:	08009cc8 	.word	0x08009cc8

08000aec <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//모터용 rtos

		//자율주행 모드일 때
		if(auto_drive_mode==1)
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <StartTask03+0x2c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d108      	bne.n	8000b0e <StartTask03+0x22>
		{
			//자율주행 활성화
			Moter_Auto_drive(sensor1.distance, sensor2.distance, sensor3.distance);
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <StartTask03+0x30>)
 8000afe:	79db      	ldrb	r3, [r3, #7]
 8000b00:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <StartTask03+0x34>)
 8000b02:	79d1      	ldrb	r1, [r2, #7]
 8000b04:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <StartTask03+0x38>)
 8000b06:	79d2      	ldrb	r2, [r2, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe15 	bl	8000738 <Moter_Auto_drive>
		}

		osDelay(30);
 8000b0e:	201e      	movs	r0, #30
 8000b10:	f004 ffc6 	bl	8005aa0 <osDelay>
		if(auto_drive_mode==1)
 8000b14:	e7ee      	b.n	8000af4 <StartTask03+0x8>
 8000b16:	bf00      	nop
 8000b18:	200000f7 	.word	0x200000f7
 8000b1c:	20000030 	.word	0x20000030
 8000b20:	20000044 	.word	0x20000044
 8000b24:	20000058 	.word	0x20000058

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a31      	ldr	r2, [pc, #196]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a2a      	ldr	r2, [pc, #168]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_GPIO_Init+0xe4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_12, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f241 0112 	movw	r1, #4114	@ 0x1012
 8000b98:	481d      	ldr	r0, [pc, #116]	@ (8000c10 <MX_GPIO_Init+0xe8>)
 8000b9a:	f001 fd5b 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f24e 0132 	movw	r1, #57394	@ 0xe032
 8000ba4:	481b      	ldr	r0, [pc, #108]	@ (8000c14 <MX_GPIO_Init+0xec>)
 8000ba6:	f001 fd55 	bl	8002654 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000baa:	2312      	movs	r3, #18
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <MX_GPIO_Init+0xe8>)
 8000bc2:	f001 fbc3 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000bc6:	f24e 0332 	movw	r3, #57394	@ 0xe032
 8000bca:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <MX_GPIO_Init+0xec>)
 8000be0:	f001 fbb4 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_GPIO_Init+0xe8>)
 8000bfe:	f001 fba5 	bl	800234c <HAL_GPIO_Init>

}
 8000c02:	bf00      	nop
 8000c04:	3720      	adds	r7, #32
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020400 	.word	0x40020400

08000c18 <LED_All_Timer_Interrupt>:
#include "led_blinker.h"


//쌍깜박이
void LED_All_Timer_Interrupt(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <LED_All_Timer_Interrupt+0x18>)
 8000c20:	f001 fd31 	bl	8002686 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000c24:	2102      	movs	r1, #2
 8000c26:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <LED_All_Timer_Interrupt+0x18>)
 8000c28:	f001 fd2d 	bl	8002686 <HAL_GPIO_TogglePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40020000 	.word	0x40020000

08000c34 <LED_Left_Timer_Interrupt>:

//왼쪽 깜박이
void LED_Left_Timer_Interrupt(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000c38:	2110      	movs	r1, #16
 8000c3a:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <LED_Left_Timer_Interrupt+0x10>)
 8000c3c:	f001 fd23 	bl	8002686 <HAL_GPIO_TogglePin>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40020000 	.word	0x40020000

08000c48 <LED_Right_Timer_Interrupt>:

//오른쪽 깜박이
void LED_Right_Timer_Interrupt(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <LED_Right_Timer_Interrupt+0x10>)
 8000c50:	f001 fd19 	bl	8002686 <HAL_GPIO_TogglePin>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40020000 	.word	0x40020000

08000c5c <Start_Blinker>:


//led 키기
void Start_Blinker(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim11);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <Start_Blinker+0x10>)
 8000c62:	f002 fa45 	bl	80030f0 <HAL_TIM_Base_Start_IT>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000280 	.word	0x20000280

08000c70 <Stop_Blinker>:

//led 끄기
void Stop_Blinker(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2110      	movs	r1, #16
 8000c78:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <Stop_Blinker+0x24>)
 8000c7a:	f001 fceb 	bl	8002654 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2102      	movs	r1, #2
 8000c82:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <Stop_Blinker+0x24>)
 8000c84:	f001 fce6 	bl	8002654 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Stop_IT(&htim11);
 8000c88:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <Stop_Blinker+0x28>)
 8000c8a:	f002 fa93 	bl	80031b4 <HAL_TIM_Base_Stop_IT>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40020000 	.word	0x40020000
 8000c98:	20000280 	.word	0x20000280

08000c9c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]




	HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	490e      	ldr	r1, [pc, #56]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x44>)
 8000ca8:	480e      	ldr	r0, [pc, #56]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x48>)
 8000caa:	f003 fe5e 	bl	800496a <HAL_UART_Receive_IT>

	//블루투스 연결된 uart라면
	if(huart->Instance==USART1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <HAL_UART_RxCpltCallback+0x4c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d10e      	bne.n	8000cd6 <HAL_UART_RxCpltCallback+0x3a>
	{
		if(save_rxData != rxData)
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_UART_RxCpltCallback+0x50>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x44>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d008      	beq.n	8000cd6 <HAL_UART_RxCpltCallback+0x3a>
		{

			uart_bluetooth_call();
 8000cc4:	f000 ff86 	bl	8001bd4 <uart_bluetooth_call>
			uart_call = 1;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x54>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
			save_rxData = rxData;
 8000cce:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x44>)
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_UART_RxCpltCallback+0x50>)
 8000cd4:	701a      	strb	r2, [r3, #0]

		}
	}

}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000010c 	.word	0x2000010c
 8000ce4:	200002c8 	.word	0x200002c8
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	2000010d 	.word	0x2000010d
 8000cf0:	20000112 	.word	0x20000112

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f001 f972 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f846 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f7ff ff12 	bl	8000b28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d04:	f001 f88c 	bl	8001e20 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d08:	f000 fc94 	bl	8001634 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000d0c:	f001 f85e 	bl	8001dcc <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8000d10:	f000 fd10 	bl	8001734 <MX_TIM5_Init>
  MX_TIM11_Init();
 8000d14:	f000 fdaa 	bl	800186c <MX_TIM11_Init>
  MX_TIM2_Init();
 8000d18:	f000 fc06 	bl	8001528 <MX_TIM2_Init>
  MX_TIM10_Init();
 8000d1c:	f000 fd82 	bl	8001824 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	//모터 초기 설정
	Moter_Init();
 8000d20:	f7ff fc26 	bl	8000570 <Moter_Init>

	//보내는 인터럽트 활성화
	HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));
 8000d24:	2201      	movs	r2, #1
 8000d26:	4913      	ldr	r1, [pc, #76]	@ (8000d74 <main+0x80>)
 8000d28:	4813      	ldr	r0, [pc, #76]	@ (8000d78 <main+0x84>)
 8000d2a:	f003 fe1e 	bl	800496a <HAL_UART_Receive_IT>

	//받는 인터럽트 활성화
	HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4910      	ldr	r1, [pc, #64]	@ (8000d74 <main+0x80>)
 8000d32:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <main+0x88>)
 8000d34:	f003 fe19 	bl	800496a <HAL_UART_Receive_IT>



	//부저
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4811      	ldr	r0, [pc, #68]	@ (8000d80 <main+0x8c>)
 8000d3c:	f002 fac2 	bl	80032c4 <HAL_TIM_PWM_Start>
	Stop_Buzzer();
 8000d40:	f7ff fdfa 	bl	8000938 <Stop_Buzzer>

	//딜레이 계산용 11번 타이머 활성화(시스템 딜레이 방지용 타이머)
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000d44:	2100      	movs	r1, #0
 8000d46:	480f      	ldr	r0, [pc, #60]	@ (8000d84 <main+0x90>)
 8000d48:	f002 fabc 	bl	80032c4 <HAL_TIM_PWM_Start>


	//초음파
	//32bit 타이머를 16bit(65535)로 스케일링해서 사용
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);//울트라소닉용
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480e      	ldr	r0, [pc, #56]	@ (8000d88 <main+0x94>)
 8000d50:	f002 fc26 	bl	80035a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);//울트라소닉용
 8000d54:	2104      	movs	r1, #4
 8000d56:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <main+0x94>)
 8000d58:	f002 fc22 	bl	80035a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);//울트라소닉용
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <main+0x94>)
 8000d60:	f002 fc1e 	bl	80035a0 <HAL_TIM_IC_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d64:	f004 fdc0 	bl	80058e8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d68:	f7ff fe18 	bl	800099c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d6c:	f004 fde0 	bl	8005930 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <main+0x7c>
 8000d74:	2000010c 	.word	0x2000010c
 8000d78:	200002c8 	.word	0x200002c8
 8000d7c:	20000310 	.word	0x20000310
 8000d80:	200001f0 	.word	0x200001f0
 8000d84:	20000280 	.word	0x20000280
 8000d88:	20000160 	.word	0x20000160

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	@ 0x50
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2230      	movs	r2, #48	@ 0x30
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f008 f8ab 	bl	8008ef6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	4a26      	ldr	r2, [pc, #152]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e00:	2364      	movs	r3, #100	@ 0x64
 8000e02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fc53 	bl	80026bc <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e1c:	f000 f856 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 feb5 	bl	8002bac <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e48:	f000 f840 	bl	8000ecc <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3750      	adds	r7, #80	@ 0x50
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM11)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d117      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x42>
	{

		//클락션 및 후진
		if(buzzer_Check==1)
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d101      	bne.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x1e>
		{
			Buzzer_Timer_Interrupt();  // 타이머 인터럽트 처리
 8000e76:	f7ff fd21 	bl	80008bc <Buzzer_Timer_Interrupt>
		}


		//쌍 깝박이
		if(led_all==1)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			LED_All_Timer_Interrupt();
 8000e82:	f7ff fec9 	bl	8000c18 <LED_All_Timer_Interrupt>
		}

		//왼쪽 깜박이
		if(led_left==1)
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			LED_Left_Timer_Interrupt();
 8000e8e:	f7ff fed1 	bl	8000c34 <LED_Left_Timer_Interrupt>
		}


		//오른쪽 깜박이
		if(led_right==1)
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d101      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			LED_Right_Timer_Interrupt();
 8000e9a:	f7ff fed5 	bl	8000c48 <LED_Right_Timer_Interrupt>

	}


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d101      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x50>
    HAL_IncTick();
 8000ea8:	f001 f8bc 	bl	8002024 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40014800 	.word	0x40014800
 8000eb8:	2000010e 	.word	0x2000010e
 8000ebc:	20000111 	.word	0x20000111
 8000ec0:	2000010f 	.word	0x2000010f
 8000ec4:	20000110 	.word	0x20000110
 8000ec8:	40014000 	.word	0x40014000

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <Error_Handler+0x8>

08000ed8 <HCSR04_Read>:
#include "cmsis_os2.h"  // FreeRTOS CMSIS API
extern osMutexId_t myMutex02Handle;  // 뮤텍스 핸들 선언

// 초음파 센서에서 트리거 신호를 보내는 함수
void HCSR04_Read(HCSR04_Sensor *sensor)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]




	// 트리거 핀을 LOW로 설정하여 초기화
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, 0);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6898      	ldr	r0, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	899b      	ldrh	r3, [r3, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	f001 fbb2 	bl	8002654 <HAL_GPIO_WritePin>
	osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f004 fdd5 	bl	8005aa0 <osDelay>

	// 트리거 핀을 HIGH로 설정하여 초음파 펄스 송신
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, 1);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6898      	ldr	r0, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	899b      	ldrh	r3, [r3, #12]
 8000efe:	2201      	movs	r2, #1
 8000f00:	4619      	mov	r1, r3
 8000f02:	f001 fba7 	bl	8002654 <HAL_GPIO_WritePin>
	osDelay(10);
 8000f06:	200a      	movs	r0, #10
 8000f08:	f004 fdca 	bl	8005aa0 <osDelay>

	// 다시 LOW로 설정하여 트리거 신호 종료
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, 0);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6898      	ldr	r0, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	899b      	ldrh	r3, [r3, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	f001 fb9c 	bl	8002654 <HAL_GPIO_WritePin>

	// 타이머 인터럽트 활성화 (에코 신호 수신 대기)
	__HAL_TIM_ENABLE_IT(&htim2, sensor->tim_Channel);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HCSR04_Read+0x60>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <HCSR04_Read+0x60>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	60da      	str	r2, [r3, #12]


}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000160 	.word	0x20000160

08000f3c <HAL_TIM_IC_CaptureCallback>:



// 타이머 입력 캡처 인터럽트 콜백 함수
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

	osMutexAcquire(myMutex02Handle, osWaitForever);
 8000f44:	4b8a      	ldr	r3, [pc, #552]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x234>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fe48 	bl	8005be2 <osMutexAcquire>

	HCSR04_Sensor* sensor = NULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]

	// 인터럽트 발생한 채널에 따라 적절한 센서 선택
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7f1b      	ldrb	r3, [r3, #28]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d102      	bne.n	8000f64 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		sensor = &sensor1;
 8000f5e:	4b85      	ldr	r3, [pc, #532]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e00c      	b.n	8000f7e <HAL_TIM_IC_CaptureCallback+0x42>
	}
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7f1b      	ldrb	r3, [r3, #28]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d102      	bne.n	8000f72 <HAL_TIM_IC_CaptureCallback+0x36>
	{
		sensor = &sensor2;
 8000f6c:	4b82      	ldr	r3, [pc, #520]	@ (8001178 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	e005      	b.n	8000f7e <HAL_TIM_IC_CaptureCallback+0x42>
	}
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7f1b      	ldrb	r3, [r3, #28]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d101      	bne.n	8000f7e <HAL_TIM_IC_CaptureCallback+0x42>
	{
		sensor = &sensor3;
 8000f7a:	4b80      	ldr	r3, [pc, #512]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x240>)
 8000f7c:	60fb      	str	r3, [r7, #12]
	}


	// 인터럽트가 발생하여 NULL값이 아니라면
	if (sensor)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 810e 	beq.w	80011a2 <HAL_TIM_IC_CaptureCallback+0x266>
	{
		if (sensor->captureFlag == 0) // 상승 엣지 감지 (에코 신호 시작)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	799b      	ldrb	r3, [r3, #6]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d16b      	bne.n	8001066 <HAL_TIM_IC_CaptureCallback+0x12a>
		{
			sensor->IC_ValueRising = HAL_TIM_ReadCapturedValue(htim, sensor->tim_Channel);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	4619      	mov	r1, r3
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f002 ff33 	bl	8003e00 <HAL_TIM_ReadCapturedValue>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	801a      	strh	r2, [r3, #0]
			sensor->captureFlag = 1; // 캡처 상태 변경
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	719a      	strb	r2, [r3, #6]

			// 다음 인터럽트를 하강 엣지에서 발생하도록 설정
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, sensor->tim_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d108      	bne.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0x86>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6a1a      	ldr	r2, [r3, #32]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 020a 	bic.w	r2, r2, #10
 8000fbe:	621a      	str	r2, [r3, #32]
 8000fc0:	e021      	b.n	8001006 <HAL_TIM_IC_CaptureCallback+0xca>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d108      	bne.n	8000fdc <HAL_TIM_IC_CaptureCallback+0xa0>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000fd8:	6213      	str	r3, [r2, #32]
 8000fda:	e014      	b.n	8001006 <HAL_TIM_IC_CaptureCallback+0xca>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d108      	bne.n	8000ff6 <HAL_TIM_IC_CaptureCallback+0xba>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	e007      	b.n	8001006 <HAL_TIM_IC_CaptureCallback+0xca>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d108      	bne.n	8001020 <HAL_TIM_IC_CaptureCallback+0xe4>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a1a      	ldr	r2, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0202 	orr.w	r2, r2, #2
 800101c:	621a      	str	r2, [r3, #32]
 800101e:	e0c0      	b.n	80011a2 <HAL_TIM_IC_CaptureCallback+0x266>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b04      	cmp	r3, #4
 8001026:	d108      	bne.n	800103a <HAL_TIM_IC_CaptureCallback+0xfe>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	6213      	str	r3, [r2, #32]
 8001038:	e0b3      	b.n	80011a2 <HAL_TIM_IC_CaptureCallback+0x266>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	2b08      	cmp	r3, #8
 8001040:	d108      	bne.n	8001054 <HAL_TIM_IC_CaptureCallback+0x118>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001050:	6213      	str	r3, [r2, #32]
 8001052:	e0a6      	b.n	80011a2 <HAL_TIM_IC_CaptureCallback+0x266>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	e09d      	b.n	80011a2 <HAL_TIM_IC_CaptureCallback+0x266>
		}
		else // 하강 엣지 감지 (에코 신호 종료)
		{
			sensor->IC_ValueFalling = HAL_TIM_ReadCapturedValue(htim, sensor->tim_Channel);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	4619      	mov	r1, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f002 fec7 	bl	8003e00 <HAL_TIM_ReadCapturedValue>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	805a      	strh	r2, [r3, #2]
			sensor->captureFlag = 0; // 캡처 완료
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2200      	movs	r2, #0
 800107e:	719a      	strb	r2, [r3, #6]

			// 타이머 카운터 초기화
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24

			// 타이머 값 차이를 이용해 에코 신호 지속 시간을 계산
			if (sensor->IC_ValueFalling > sensor->IC_ValueRising)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	885a      	ldrh	r2, [r3, #2]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d908      	bls.n	80010a6 <HAL_TIM_IC_CaptureCallback+0x16a>
				sensor->captureTime = sensor->IC_ValueFalling - sensor->IC_ValueRising;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	885a      	ldrh	r2, [r3, #2]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	b29a      	uxth	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	809a      	strh	r2, [r3, #4]
 80010a4:	e009      	b.n	80010ba <HAL_TIM_IC_CaptureCallback+0x17e>
			else
				sensor->captureTime = (0xffff - sensor->IC_ValueRising) + sensor->IC_ValueFalling;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	885a      	ldrh	r2, [r3, #2]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	809a      	strh	r2, [r3, #4]

			// 거리 계산 (음속을 고려하여 58로 나눔)
			sensor->distance = sensor->captureTime / 58;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	889b      	ldrh	r3, [r3, #4]
 80010be:	4a30      	ldr	r2, [pc, #192]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x244>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	095b      	lsrs	r3, r3, #5
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	71da      	strb	r2, [r3, #7]

			// 다시 상승 엣지를 감지하도록 설정
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, sensor->tim_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d108      	bne.n	80010e8 <HAL_TIM_IC_CaptureCallback+0x1ac>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 020a 	bic.w	r2, r2, #10
 80010e4:	621a      	str	r2, [r3, #32]
 80010e6:	e021      	b.n	800112c <HAL_TIM_IC_CaptureCallback+0x1f0>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d108      	bne.n	8001102 <HAL_TIM_IC_CaptureCallback+0x1c6>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80010fe:	6213      	str	r3, [r2, #32]
 8001100:	e014      	b.n	800112c <HAL_TIM_IC_CaptureCallback+0x1f0>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b08      	cmp	r3, #8
 8001108:	d108      	bne.n	800111c <HAL_TIM_IC_CaptureCallback+0x1e0>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001118:	6213      	str	r3, [r2, #32]
 800111a:	e007      	b.n	800112c <HAL_TIM_IC_CaptureCallback+0x1f0>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <HAL_TIM_IC_CaptureCallback+0x206>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a12      	ldr	r2, [r2, #32]
 800113e:	621a      	str	r2, [r3, #32]
 8001140:	e026      	b.n	8001190 <HAL_TIM_IC_CaptureCallback+0x254>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d106      	bne.n	8001158 <HAL_TIM_IC_CaptureCallback+0x21c>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	6213      	str	r3, [r2, #32]
 8001156:	e01b      	b.n	8001190 <HAL_TIM_IC_CaptureCallback+0x254>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	2b08      	cmp	r3, #8
 800115e:	d111      	bne.n	8001184 <HAL_TIM_IC_CaptureCallback+0x248>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	6213      	str	r3, [r2, #32]
 800116c:	e010      	b.n	8001190 <HAL_TIM_IC_CaptureCallback+0x254>
 800116e:	bf00      	nop
 8001170:	20000108 	.word	0x20000108
 8001174:	20000030 	.word	0x20000030
 8001178:	20000044 	.word	0x20000044
 800117c:	20000058 	.word	0x20000058
 8001180:	8d3dcb09 	.word	0x8d3dcb09
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	6213      	str	r3, [r2, #32]

			// 타이머 인터럽트 재활성화 (다음 측정 준비)
			__HAL_TIM_ENABLE_IT(&htim2, sensor->tim_Channel);
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68d9      	ldr	r1, [r3, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x278>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	60da      	str	r2, [r3, #12]
		}
	}


	osMutexRelease(myMutex02Handle);
 80011a2:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fd66 	bl	8005c78 <osMutexRelease>

}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000160 	.word	0x20000160
 80011b8:	20000108 	.word	0x20000108

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_MspInit+0x54>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	4a11      	ldr	r2, [pc, #68]	@ (8001210 <HAL_MspInit+0x54>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <HAL_MspInit+0x54>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <HAL_MspInit+0x54>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <HAL_MspInit+0x54>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_MspInit+0x54>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	210f      	movs	r1, #15
 80011fe:	f06f 0001 	mvn.w	r0, #1
 8001202:	f000 ffe7 	bl	80021d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800

08001214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	@ 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <HAL_InitTick+0xd0>)
 800122a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122c:	4a2d      	ldr	r2, [pc, #180]	@ (80012e4 <HAL_InitTick+0xd0>)
 800122e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001232:	6453      	str	r3, [r2, #68]	@ 0x44
 8001234:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <HAL_InitTick+0xd0>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fece 	bl	8002fec <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001250:	f001 feb8 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 8001254:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001258:	4a23      	ldr	r2, [pc, #140]	@ (80012e8 <HAL_InitTick+0xd4>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	3b01      	subs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001264:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <HAL_InitTick+0xd8>)
 8001266:	4a22      	ldr	r2, [pc, #136]	@ (80012f0 <HAL_InitTick+0xdc>)
 8001268:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800126a:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <HAL_InitTick+0xd8>)
 800126c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001270:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001272:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <HAL_InitTick+0xd8>)
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001278:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <HAL_InitTick+0xd8>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <HAL_InitTick+0xd8>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_InitTick+0xd8>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800128a:	4818      	ldr	r0, [pc, #96]	@ (80012ec <HAL_InitTick+0xd8>)
 800128c:	f001 fee0 	bl	8003050 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129a:	2b00      	cmp	r3, #0
 800129c:	d11b      	bne.n	80012d6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800129e:	4813      	ldr	r0, [pc, #76]	@ (80012ec <HAL_InitTick+0xd8>)
 80012a0:	f001 ff26 	bl	80030f0 <HAL_TIM_Base_Start_IT>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80012aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d111      	bne.n	80012d6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80012b2:	2018      	movs	r0, #24
 80012b4:	f000 ffaa 	bl	800220c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	d808      	bhi.n	80012d0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80012be:	2200      	movs	r2, #0
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	2018      	movs	r0, #24
 80012c4:	f000 ff86 	bl	80021d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_InitTick+0xe0>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e002      	b.n	80012d6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3730      	adds	r7, #48	@ 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	20000114 	.word	0x20000114
 80012f0:	40014000 	.word	0x40014000
 80012f4:	20000070 	.word	0x20000070

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001336:	f002 fa4d 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000114 	.word	0x20000114

08001344 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800134a:	f002 fa43 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000280 	.word	0x20000280

08001358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <TIM2_IRQHandler+0x10>)
 800135e:	f002 fa39 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000160 	.word	0x20000160

0800136c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <TIM3_IRQHandler+0x10>)
 8001372:	f002 fa2f 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001a8 	.word	0x200001a8

08001380 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <USART1_IRQHandler+0x10>)
 8001386:	f003 fb15 	bl	80049b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002c8 	.word	0x200002c8

08001394 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <USART2_IRQHandler+0x10>)
 800139a:	f003 fb0b 	bl	80049b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000310 	.word	0x20000310

080013a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <TIM5_IRQHandler+0x10>)
 80013ae:	f002 fa11 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001f0 	.word	0x200001f0

080013bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e00a      	b.n	80013e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ce:	f3af 8000 	nop.w
 80013d2:	4601      	mov	r1, r0
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dbf0      	blt.n	80013ce <_read+0x12>
  }

  return len;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e009      	b.n	800141c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fab1 	bl	8000978 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf1      	blt.n	8001408 <_write+0x12>
  }
  return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_close>:

int _close(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001456:	605a      	str	r2, [r3, #4]
  return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_isatty>:

int _isatty(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f007 fdba 	bl	8009040 <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20020000 	.word	0x20020000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	2000015c 	.word	0x2000015c
 8001500:	20004e90 	.word	0x20004e90

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <MX_TIM2_Init+0x108>)
 8001554:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001558:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800155a:	4b35      	ldr	r3, [pc, #212]	@ (8001630 <MX_TIM2_Init+0x108>)
 800155c:	2263      	movs	r2, #99	@ 0x63
 800155e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <MX_TIM2_Init+0x108>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001566:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <MX_TIM2_Init+0x108>)
 8001568:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800156c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <MX_TIM2_Init+0x108>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <MX_TIM2_Init+0x108>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800157a:	482d      	ldr	r0, [pc, #180]	@ (8001630 <MX_TIM2_Init+0x108>)
 800157c:	f001 fd68 	bl	8003050 <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001586:	f7ff fca1 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800158e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	4619      	mov	r1, r3
 8001596:	4826      	ldr	r0, [pc, #152]	@ (8001630 <MX_TIM2_Init+0x108>)
 8001598:	f002 fb6a 	bl	8003c70 <HAL_TIM_ConfigClockSource>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015a2:	f7ff fc93 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015a6:	4822      	ldr	r0, [pc, #136]	@ (8001630 <MX_TIM2_Init+0x108>)
 80015a8:	f001 ffa0 	bl	80034ec <HAL_TIM_IC_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015b2:	f7ff fc8b 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	481a      	ldr	r0, [pc, #104]	@ (8001630 <MX_TIM2_Init+0x108>)
 80015c6:	f003 f873 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80015d0:	f7ff fc7c 	bl	8000ecc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015d8:	2301      	movs	r3, #1
 80015da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4811      	ldr	r0, [pc, #68]	@ (8001630 <MX_TIM2_Init+0x108>)
 80015ec:	f002 f9e2 	bl	80039b4 <HAL_TIM_IC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80015f6:	f7ff fc69 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	2204      	movs	r2, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <MX_TIM2_Init+0x108>)
 8001602:	f002 f9d7 	bl	80039b4 <HAL_TIM_IC_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800160c:	f7ff fc5e 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	2208      	movs	r2, #8
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	@ (8001630 <MX_TIM2_Init+0x108>)
 8001618:	f002 f9cc 	bl	80039b4 <HAL_TIM_IC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8001622:	f7ff fc53 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000160 	.word	0x20000160

08001634 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	@ 0x38
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001664:	4b31      	ldr	r3, [pc, #196]	@ (800172c <MX_TIM3_Init+0xf8>)
 8001666:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <MX_TIM3_Init+0xfc>)
 8001668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <MX_TIM3_Init+0xf8>)
 800166c:	2253      	movs	r2, #83	@ 0x53
 800166e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <MX_TIM3_Init+0xf8>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001676:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <MX_TIM3_Init+0xf8>)
 8001678:	2263      	movs	r2, #99	@ 0x63
 800167a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <MX_TIM3_Init+0xf8>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <MX_TIM3_Init+0xf8>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001688:	4828      	ldr	r0, [pc, #160]	@ (800172c <MX_TIM3_Init+0xf8>)
 800168a:	f001 fce1 	bl	8003050 <HAL_TIM_Base_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001694:	f7ff fc1a 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4821      	ldr	r0, [pc, #132]	@ (800172c <MX_TIM3_Init+0xf8>)
 80016a6:	f002 fae3 	bl	8003c70 <HAL_TIM_ConfigClockSource>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80016b0:	f7ff fc0c 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016b4:	481d      	ldr	r0, [pc, #116]	@ (800172c <MX_TIM3_Init+0xf8>)
 80016b6:	f001 fdac 	bl	8003212 <HAL_TIM_PWM_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80016c0:	f7ff fc04 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4619      	mov	r1, r3
 80016d2:	4816      	ldr	r0, [pc, #88]	@ (800172c <MX_TIM3_Init+0xf8>)
 80016d4:	f002 ffec 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80016de:	f7ff fbf5 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	@ 0x60
 80016e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <MX_TIM3_Init+0xf8>)
 80016fa:	f002 f9f7 	bl	8003aec <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001704:	f7ff fbe2 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2204      	movs	r2, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	@ (800172c <MX_TIM3_Init+0xf8>)
 8001710:	f002 f9ec 	bl	8003aec <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800171a:	f7ff fbd7 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <MX_TIM3_Init+0xf8>)
 8001720:	f000 f9d0 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3738      	adds	r7, #56	@ 0x38
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200001a8 	.word	0x200001a8
 8001730:	40000400 	.word	0x40000400

08001734 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	@ 0x38
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001764:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <MX_TIM5_Init+0xe8>)
 8001766:	4a2e      	ldr	r2, [pc, #184]	@ (8001820 <MX_TIM5_Init+0xec>)
 8001768:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2000-1;
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <MX_TIM5_Init+0xe8>)
 800176c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001770:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <MX_TIM5_Init+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001778:	4b28      	ldr	r3, [pc, #160]	@ (800181c <MX_TIM5_Init+0xe8>)
 800177a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800177e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <MX_TIM5_Init+0xe8>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <MX_TIM5_Init+0xe8>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800178c:	4823      	ldr	r0, [pc, #140]	@ (800181c <MX_TIM5_Init+0xe8>)
 800178e:	f001 fc5f 	bl	8003050 <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001798:	f7ff fb98 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a6:	4619      	mov	r1, r3
 80017a8:	481c      	ldr	r0, [pc, #112]	@ (800181c <MX_TIM5_Init+0xe8>)
 80017aa:	f002 fa61 	bl	8003c70 <HAL_TIM_ConfigClockSource>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80017b4:	f7ff fb8a 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017b8:	4818      	ldr	r0, [pc, #96]	@ (800181c <MX_TIM5_Init+0xe8>)
 80017ba:	f001 fd2a 	bl	8003212 <HAL_TIM_PWM_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80017c4:	f7ff fb82 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4619      	mov	r1, r3
 80017d6:	4811      	ldr	r0, [pc, #68]	@ (800181c <MX_TIM5_Init+0xe8>)
 80017d8:	f002 ff6a 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80017e2:	f7ff fb73 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e6:	2360      	movs	r3, #96	@ 0x60
 80017e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80017ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	@ (800181c <MX_TIM5_Init+0xe8>)
 8001800:	f002 f974 	bl	8003aec <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 800180a:	f7ff fb5f 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800180e:	4803      	ldr	r0, [pc, #12]	@ (800181c <MX_TIM5_Init+0xe8>)
 8001810:	f000 f958 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	@ 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200001f0 	.word	0x200001f0
 8001820:	40000c00 	.word	0x40000c00

08001824 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_TIM10_Init+0x40>)
 800182a:	4a0f      	ldr	r2, [pc, #60]	@ (8001868 <MX_TIM10_Init+0x44>)
 800182c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <MX_TIM10_Init+0x40>)
 8001830:	2263      	movs	r2, #99	@ 0x63
 8001832:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <MX_TIM10_Init+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <MX_TIM10_Init+0x40>)
 800183c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001840:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <MX_TIM10_Init+0x40>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_TIM10_Init+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_TIM10_Init+0x40>)
 8001850:	f001 fbfe 	bl	8003050 <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800185a:	f7ff fb37 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000238 	.word	0x20000238
 8001868:	40014400 	.word	0x40014400

0800186c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001884:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <MX_TIM11_Init+0x94>)
 8001886:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <MX_TIM11_Init+0x98>)
 8001888:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <MX_TIM11_Init+0x94>)
 800188c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001890:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MX_TIM11_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <MX_TIM11_Init+0x94>)
 800189a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800189e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <MX_TIM11_Init+0x94>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <MX_TIM11_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80018ac:	4814      	ldr	r0, [pc, #80]	@ (8001900 <MX_TIM11_Init+0x94>)
 80018ae:	f001 fbcf 	bl	8003050 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80018b8:	f7ff fb08 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80018bc:	4810      	ldr	r0, [pc, #64]	@ (8001900 <MX_TIM11_Init+0x94>)
 80018be:	f001 fca8 	bl	8003212 <HAL_TIM_PWM_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80018c8:	f7ff fb00 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	2360      	movs	r3, #96	@ 0x60
 80018ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	4807      	ldr	r0, [pc, #28]	@ (8001900 <MX_TIM11_Init+0x94>)
 80018e4:	f002 f902 	bl	8003aec <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80018ee:	f7ff faed 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80018f2:	4803      	ldr	r0, [pc, #12]	@ (8001900 <MX_TIM11_Init+0x94>)
 80018f4:	f000 f8e6 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000280 	.word	0x20000280
 8001904:	40014800 	.word	0x40014800

08001908 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	@ 0x38
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001928:	d153      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
 800192e:	4b5e      	ldr	r3, [pc, #376]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	4a5d      	ldr	r2, [pc, #372]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6413      	str	r3, [r2, #64]	@ 0x40
 800193a:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	4b57      	ldr	r3, [pc, #348]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a56      	ldr	r2, [pc, #344]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b54      	ldr	r3, [pc, #336]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	4b50      	ldr	r3, [pc, #320]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800197e:	2320      	movs	r3, #32
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800198e:	2301      	movs	r3, #1
 8001990:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001996:	4619      	mov	r1, r3
 8001998:	4844      	ldr	r0, [pc, #272]	@ (8001aac <HAL_TIM_Base_MspInit+0x1a4>)
 800199a:	f000 fcd7 	bl	800234c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800199e:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019b0:	2301      	movs	r3, #1
 80019b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	483d      	ldr	r0, [pc, #244]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x1a8>)
 80019bc:	f000 fcc6 	bl	800234c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2105      	movs	r1, #5
 80019c4:	201c      	movs	r0, #28
 80019c6:	f000 fc05 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ca:	201c      	movs	r0, #28
 80019cc:	f000 fc1e 	bl	800220c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80019d0:	e066      	b.n	8001aa0 <HAL_TIM_Base_MspInit+0x198>
  else if(tim_baseHandle->Instance==TIM3)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a37      	ldr	r2, [pc, #220]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x1ac>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d116      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	4a30      	ldr	r2, [pc, #192]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ec:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2105      	movs	r1, #5
 80019fc:	201d      	movs	r0, #29
 80019fe:	f000 fbe9 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a02:	201d      	movs	r0, #29
 8001a04:	f000 fc02 	bl	800220c <HAL_NVIC_EnableIRQ>
}
 8001a08:	e04a      	b.n	8001aa0 <HAL_TIM_Base_MspInit+0x198>
  else if(tim_baseHandle->Instance==TIM5)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d116      	bne.n	8001a42 <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	4a22      	ldr	r2, [pc, #136]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a24:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2105      	movs	r1, #5
 8001a34:	2032      	movs	r0, #50	@ 0x32
 8001a36:	f000 fbcd 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a3a:	2032      	movs	r0, #50	@ 0x32
 8001a3c:	f000 fbe6 	bl	800220c <HAL_NVIC_EnableIRQ>
}
 8001a40:	e02e      	b.n	8001aa0 <HAL_TIM_Base_MspInit+0x198>
  else if(tim_baseHandle->Instance==TIM10)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1d      	ldr	r2, [pc, #116]	@ (8001abc <HAL_TIM_Base_MspInit+0x1b4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d10e      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x162>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a54:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	e01a      	b.n	8001aa0 <HAL_TIM_Base_MspInit+0x198>
  else if(tim_baseHandle->Instance==TIM11)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x1b8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d115      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a82:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2105      	movs	r1, #5
 8001a94:	201a      	movs	r0, #26
 8001a96:	f000 fb9d 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a9a:	201a      	movs	r0, #26
 8001a9c:	f000 fbb6 	bl	800220c <HAL_NVIC_EnableIRQ>
}
 8001aa0:	bf00      	nop
 8001aa2:	3738      	adds	r7, #56	@ 0x38
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	40000c00 	.word	0x40000c00
 8001abc:	40014400 	.word	0x40014400
 8001ac0:	40014800 	.word	0x40014800

08001ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a36      	ldr	r2, [pc, #216]	@ (8001bbc <HAL_TIM_MspPostInit+0xf8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d11e      	bne.n	8001b24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b35      	ldr	r3, [pc, #212]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a34      	ldr	r2, [pc, #208]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b32      	ldr	r3, [pc, #200]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b02:	23c0      	movs	r3, #192	@ 0xc0
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b12:	2302      	movs	r3, #2
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4829      	ldr	r0, [pc, #164]	@ (8001bc4 <HAL_TIM_MspPostInit+0x100>)
 8001b1e:	f000 fc15 	bl	800234c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001b22:	e047      	b.n	8001bb4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a27      	ldr	r2, [pc, #156]	@ (8001bc8 <HAL_TIM_MspPostInit+0x104>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d11e      	bne.n	8001b6c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4817      	ldr	r0, [pc, #92]	@ (8001bc4 <HAL_TIM_MspPostInit+0x100>)
 8001b66:	f000 fbf1 	bl	800234c <HAL_GPIO_Init>
}
 8001b6a:	e023      	b.n	8001bb4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM11)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a16      	ldr	r2, [pc, #88]	@ (8001bcc <HAL_TIM_MspPostInit+0x108>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d11e      	bne.n	8001bb4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_TIM_MspPostInit+0xfc>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4808      	ldr	r0, [pc, #32]	@ (8001bd0 <HAL_TIM_MspPostInit+0x10c>)
 8001bb0:	f000 fbcc 	bl	800234c <HAL_GPIO_Init>
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	@ 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40000400 	.word	0x40000400
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	40014800 	.word	0x40014800
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <uart_bluetooth_call>:
extern uint8_t speed;
extern uint8_t L_speed;
extern uint8_t R_speed;

void uart_bluetooth_call()
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

	switch(rxData)
 8001bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d8c <uart_bluetooth_call+0x1b8>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	3b41      	subs	r3, #65	@ 0x41
 8001bde:	2b17      	cmp	r3, #23
 8001be0:	f200 80b1 	bhi.w	8001d46 <uart_bluetooth_call+0x172>
 8001be4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bec <uart_bluetooth_call+0x18>)
 8001be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bea:	bf00      	nop
 8001bec:	08001d37 	.word	0x08001d37
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001d07 	.word	0x08001d07
 8001bf8:	08001d47 	.word	0x08001d47
 8001bfc:	08001d47 	.word	0x08001d47
 8001c00:	08001c4d 	.word	0x08001c4d
 8001c04:	08001d47 	.word	0x08001d47
 8001c08:	08001d47 	.word	0x08001d47
 8001c0c:	08001d47 	.word	0x08001d47
 8001c10:	08001d47 	.word	0x08001d47
 8001c14:	08001d47 	.word	0x08001d47
 8001c18:	08001c8f 	.word	0x08001c8f
 8001c1c:	08001d47 	.word	0x08001d47
 8001c20:	08001d47 	.word	0x08001d47
 8001c24:	08001d47 	.word	0x08001d47
 8001c28:	08001d47 	.word	0x08001d47
 8001c2c:	08001d47 	.word	0x08001d47
 8001c30:	08001cb1 	.word	0x08001cb1
 8001c34:	08001cef 	.word	0x08001cef
 8001c38:	08001cf7 	.word	0x08001cf7
 8001c3c:	08001d47 	.word	0x08001d47
 8001c40:	08001d47 	.word	0x08001d47
 8001c44:	08001d47 	.word	0x08001d47
 8001c48:	08001cd3 	.word	0x08001cd3
	{

	case 'F'://전진
		if(auto_drive_mode==0)
 8001c4c:	4b50      	ldr	r3, [pc, #320]	@ (8001d90 <uart_bluetooth_call+0x1bc>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 808f 	bne.w	8001d74 <uart_bluetooth_call+0x1a0>
		{
			Moter_Advance();
 8001c56:	f7fe fca1 	bl	800059c <Moter_Advance>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Advance\r\n", strlen("Advance\r\n"), 0xFFFF);
 8001c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c5e:	2209      	movs	r2, #9
 8001c60:	494c      	ldr	r1, [pc, #304]	@ (8001d94 <uart_bluetooth_call+0x1c0>)
 8001c62:	484d      	ldr	r0, [pc, #308]	@ (8001d98 <uart_bluetooth_call+0x1c4>)
 8001c64:	f002 fdf6 	bl	8004854 <HAL_UART_Transmit>
		}
		break;
 8001c68:	e084      	b.n	8001d74 <uart_bluetooth_call+0x1a0>

	case 'B'://후진
		if(auto_drive_mode==0)
 8001c6a:	4b49      	ldr	r3, [pc, #292]	@ (8001d90 <uart_bluetooth_call+0x1bc>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 8082 	bne.w	8001d78 <uart_bluetooth_call+0x1a4>
		{
			Moter_Junior();
 8001c74:	f7fe fcbe 	bl	80005f4 <Moter_Junior>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Junior\r\n", strlen("Junior\r\n"), 0xFFFF);
 8001c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4947      	ldr	r1, [pc, #284]	@ (8001d9c <uart_bluetooth_call+0x1c8>)
 8001c80:	4845      	ldr	r0, [pc, #276]	@ (8001d98 <uart_bluetooth_call+0x1c4>)
 8001c82:	f002 fde7 	bl	8004854 <HAL_UART_Transmit>

			buzzer_Check = 1;
 8001c86:	4b46      	ldr	r3, [pc, #280]	@ (8001da0 <uart_bluetooth_call+0x1cc>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001c8c:	e074      	b.n	8001d78 <uart_bluetooth_call+0x1a4>

	case 'L'://좌회전
		if(auto_drive_mode==0)
 8001c8e:	4b40      	ldr	r3, [pc, #256]	@ (8001d90 <uart_bluetooth_call+0x1bc>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d172      	bne.n	8001d7c <uart_bluetooth_call+0x1a8>
		{
			Moter_Left();
 8001c96:	f7fe fd05 	bl	80006a4 <Moter_Left>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Left\r\n", strlen("Left\r\n"), 0xFFFF);
 8001c9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c9e:	2206      	movs	r2, #6
 8001ca0:	4940      	ldr	r1, [pc, #256]	@ (8001da4 <uart_bluetooth_call+0x1d0>)
 8001ca2:	483d      	ldr	r0, [pc, #244]	@ (8001d98 <uart_bluetooth_call+0x1c4>)
 8001ca4:	f002 fdd6 	bl	8004854 <HAL_UART_Transmit>

			led_left=1;
 8001ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8001da8 <uart_bluetooth_call+0x1d4>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001cae:	e065      	b.n	8001d7c <uart_bluetooth_call+0x1a8>

	case 'R'://우회전
		if(auto_drive_mode==0)
 8001cb0:	4b37      	ldr	r3, [pc, #220]	@ (8001d90 <uart_bluetooth_call+0x1bc>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d163      	bne.n	8001d80 <uart_bluetooth_call+0x1ac>
		{
			Moter_Right();
 8001cb8:	f7fe fcc8 	bl	800064c <Moter_Right>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Right\r\n", strlen("Right\r\n"), 0xFFFF);
 8001cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	493a      	ldr	r1, [pc, #232]	@ (8001dac <uart_bluetooth_call+0x1d8>)
 8001cc4:	4834      	ldr	r0, [pc, #208]	@ (8001d98 <uart_bluetooth_call+0x1c4>)
 8001cc6:	f002 fdc5 	bl	8004854 <HAL_UART_Transmit>

			led_right=1;
 8001cca:	4b39      	ldr	r3, [pc, #228]	@ (8001db0 <uart_bluetooth_call+0x1dc>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001cd0:	e056      	b.n	8001d80 <uart_bluetooth_call+0x1ac>

	case 'X'://엑스 정지
		if(auto_drive_mode==0)
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <uart_bluetooth_call+0x1bc>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d154      	bne.n	8001d84 <uart_bluetooth_call+0x1b0>
		{
			Moter_Stop();
 8001cda:	f7fe fd0f 	bl	80006fc <Moter_Stop>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Stop\r\n", strlen("Stop\r\n"), 0xFFFF);
 8001cde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ce2:	2206      	movs	r2, #6
 8001ce4:	4933      	ldr	r1, [pc, #204]	@ (8001db4 <uart_bluetooth_call+0x1e0>)
 8001ce6:	482c      	ldr	r0, [pc, #176]	@ (8001d98 <uart_bluetooth_call+0x1c4>)
 8001ce8:	f002 fdb4 	bl	8004854 <HAL_UART_Transmit>
		}
		break;
 8001cec:	e04a      	b.n	8001d84 <uart_bluetooth_call+0x1b0>


	case 'S'://네모 클락션
		buzzer_Check = 1;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <uart_bluetooth_call+0x1cc>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
		break;
 8001cf4:	e047      	b.n	8001d86 <uart_bluetooth_call+0x1b2>

	case 'T'://세모 쌍깜박이
		led_all ^= 1;
 8001cf6:	4b30      	ldr	r3, [pc, #192]	@ (8001db8 <uart_bluetooth_call+0x1e4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <uart_bluetooth_call+0x1e4>)
 8001d02:	701a      	strb	r2, [r3, #0]
		break;
 8001d04:	e03f      	b.n	8001d86 <uart_bluetooth_call+0x1b2>

	case 'C'://동그라미 속도 변속

		if(speed == 80)
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <uart_bluetooth_call+0x1e8>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b50      	cmp	r3, #80	@ 0x50
 8001d0c:	d109      	bne.n	8001d22 <uart_bluetooth_call+0x14e>
		{
			speed = 100;
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <uart_bluetooth_call+0x1e8>)
 8001d10:	2264      	movs	r2, #100	@ 0x64
 8001d12:	701a      	strb	r2, [r3, #0]
			L_speed = 100;
 8001d14:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc0 <uart_bluetooth_call+0x1ec>)
 8001d16:	2264      	movs	r2, #100	@ 0x64
 8001d18:	701a      	strb	r2, [r3, #0]
			R_speed = 100;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <uart_bluetooth_call+0x1f0>)
 8001d1c:	2264      	movs	r2, #100	@ 0x64
 8001d1e:	701a      	strb	r2, [r3, #0]
			speed = 80;
			L_speed = 80;
			R_speed = 80;
		}

		break;
 8001d20:	e031      	b.n	8001d86 <uart_bluetooth_call+0x1b2>
			speed = 80;
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <uart_bluetooth_call+0x1e8>)
 8001d24:	2250      	movs	r2, #80	@ 0x50
 8001d26:	701a      	strb	r2, [r3, #0]
			L_speed = 80;
 8001d28:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <uart_bluetooth_call+0x1ec>)
 8001d2a:	2250      	movs	r2, #80	@ 0x50
 8001d2c:	701a      	strb	r2, [r3, #0]
			R_speed = 80;
 8001d2e:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <uart_bluetooth_call+0x1f0>)
 8001d30:	2250      	movs	r2, #80	@ 0x50
 8001d32:	701a      	strb	r2, [r3, #0]
		break;
 8001d34:	e027      	b.n	8001d86 <uart_bluetooth_call+0x1b2>



	case 'A'://start 자율주행 모드
		auto_drive_mode ^= 1;
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <uart_bluetooth_call+0x1bc>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f083 0301 	eor.w	r3, r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <uart_bluetooth_call+0x1bc>)
 8001d42:	701a      	strb	r2, [r3, #0]
		break;
 8001d44:	e01f      	b.n	8001d86 <uart_bluetooth_call+0x1b2>


	default://버튼에서 손가락을 땠을 때, 또는 오류가 났을 때

		//자율주행 모드가 아니라면
		if(auto_drive_mode==0)
 8001d46:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <uart_bluetooth_call+0x1bc>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d107      	bne.n	8001d5e <uart_bluetooth_call+0x18a>
		{
			//모터 정지
			Moter_Stop();
 8001d4e:	f7fe fcd5 	bl	80006fc <Moter_Stop>

			//좌,우회전 깜박이 끄기
			led_left=0;
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <uart_bluetooth_call+0x1d4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
			led_right=0;
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <uart_bluetooth_call+0x1dc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
		}

		//빈값 반환 확인
		HAL_UART_Transmit(&huart2, (uint8_t*)"data in 0\r\n", strlen("data in 0\r\n"), 0xFFFF);
 8001d5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d62:	220b      	movs	r2, #11
 8001d64:	4918      	ldr	r1, [pc, #96]	@ (8001dc8 <uart_bluetooth_call+0x1f4>)
 8001d66:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <uart_bluetooth_call+0x1c4>)
 8001d68:	f002 fd74 	bl	8004854 <HAL_UART_Transmit>

		//부저 끄기
		buzzer_Check = 0;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <uart_bluetooth_call+0x1cc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]


		break;
 8001d72:	e008      	b.n	8001d86 <uart_bluetooth_call+0x1b2>
		break;
 8001d74:	bf00      	nop
 8001d76:	e006      	b.n	8001d86 <uart_bluetooth_call+0x1b2>
		break;
 8001d78:	bf00      	nop
 8001d7a:	e004      	b.n	8001d86 <uart_bluetooth_call+0x1b2>
		break;
 8001d7c:	bf00      	nop
 8001d7e:	e002      	b.n	8001d86 <uart_bluetooth_call+0x1b2>
		break;
 8001d80:	bf00      	nop
 8001d82:	e000      	b.n	8001d86 <uart_bluetooth_call+0x1b2>
		break;
 8001d84:	bf00      	nop
	}


}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000010c 	.word	0x2000010c
 8001d90:	200000f7 	.word	0x200000f7
 8001d94:	08009cd8 	.word	0x08009cd8
 8001d98:	20000310 	.word	0x20000310
 8001d9c:	08009ce4 	.word	0x08009ce4
 8001da0:	2000010e 	.word	0x2000010e
 8001da4:	08009cf0 	.word	0x08009cf0
 8001da8:	2000010f 	.word	0x2000010f
 8001dac:	08009cf8 	.word	0x08009cf8
 8001db0:	20000110 	.word	0x20000110
 8001db4:	08009d00 	.word	0x08009d00
 8001db8:	20000111 	.word	0x20000111
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000001 	.word	0x20000001
 8001dc4:	20000002 	.word	0x20000002
 8001dc8:	08009d08 	.word	0x08009d08

08001dcc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <MX_USART1_UART_Init+0x50>)
 8001dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001dd8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001df2:	220c      	movs	r2, #12
 8001df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001e04:	f002 fcd6 	bl	80047b4 <HAL_UART_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e0e:	f7ff f85d 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200002c8 	.word	0x200002c8
 8001e1c:	40011000 	.word	0x40011000

08001e20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <MX_USART2_UART_Init+0x50>)
 8001e28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e56:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e58:	f002 fcac 	bl	80047b4 <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e62:	f7ff f833 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000310 	.word	0x20000310
 8001e70:	40004400 	.word	0x40004400

08001e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	@ 0x30
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3a      	ldr	r2, [pc, #232]	@ (8001f7c <HAL_UART_MspInit+0x108>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d135      	bne.n	8001f02 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	4b39      	ldr	r3, [pc, #228]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	4a38      	ldr	r2, [pc, #224]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea6:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	4b32      	ldr	r3, [pc, #200]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a31      	ldr	r2, [pc, #196]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ece:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4826      	ldr	r0, [pc, #152]	@ (8001f84 <HAL_UART_MspInit+0x110>)
 8001eec:	f000 fa2e 	bl	800234c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2105      	movs	r1, #5
 8001ef4:	2025      	movs	r0, #37	@ 0x25
 8001ef6:	f000 f96d 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001efa:	2025      	movs	r0, #37	@ 0x25
 8001efc:	f000 f986 	bl	800220c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f00:	e038      	b.n	8001f74 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a20      	ldr	r2, [pc, #128]	@ (8001f88 <HAL_UART_MspInit+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d133      	bne.n	8001f74 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	4a1a      	ldr	r2, [pc, #104]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1c:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	4a13      	ldr	r2, [pc, #76]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_UART_MspInit+0x10c>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f44:	230c      	movs	r3, #12
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f54:	2307      	movs	r3, #7
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4809      	ldr	r0, [pc, #36]	@ (8001f84 <HAL_UART_MspInit+0x110>)
 8001f60:	f000 f9f4 	bl	800234c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2105      	movs	r1, #5
 8001f68:	2026      	movs	r0, #38	@ 0x26
 8001f6a:	f000 f933 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f6e:	2026      	movs	r0, #38	@ 0x26
 8001f70:	f000 f94c 	bl	800220c <HAL_NVIC_EnableIRQ>
}
 8001f74:	bf00      	nop
 8001f76:	3730      	adds	r7, #48	@ 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40004400 	.word	0x40004400

08001f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f90:	f7ff fab8 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	@ (8001fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	@ (8001fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fba:	f007 f847 	bl	800904c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f7fe fe99 	bl	8000cf4 <main>
  bx  lr    
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001fd0:	08009e14 	.word	0x08009e14
  ldr r2, =_sbss
 8001fd4:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001fd8:	20004e90 	.word	0x20004e90

08001fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <HAL_Init+0x40>)
 8001fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <HAL_Init+0x40>)
 8001ff6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a07      	ldr	r2, [pc, #28]	@ (8002020 <HAL_Init+0x40>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f000 f8d8 	bl	80021be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200e:	200f      	movs	r0, #15
 8002010:	f7ff f900 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002014:	f7ff f8d2 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000074 	.word	0x20000074
 8002048:	20000358 	.word	0x20000358

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000358 	.word	0x20000358

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff4c 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e6:	f7ff ff61 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f7ff ffb1 	bl	8002158 <NVIC_EncodePriority>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff80 	bl	8002104 <__NVIC_SetPriority>
}
 8002204:	bf00      	nop
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff54 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002236:	f7ff ff09 	bl	800204c <HAL_GetTick>
 800223a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	@ 0x80
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e052      	b.n	8002300 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0216 	bic.w	r2, r2, #22
 8002268:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002278:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_DMA_Abort+0x62>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0208 	bic.w	r2, r2, #8
 8002298:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	e013      	b.n	80022d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ac:	f7ff fece 	bl	800204c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d90c      	bls.n	80022d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e015      	b.n	8002300 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e4      	bne.n	80022ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	223f      	movs	r2, #63	@ 0x3f
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	@ 0x80
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00c      	b.n	8002340 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	@ 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e159      	b.n	800261c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	f040 8148 	bne.w	8002616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d005      	beq.n	800239e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239a:	2b02      	cmp	r3, #2
 800239c:	d130      	bne.n	8002400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 0201 	and.w	r2, r3, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b03      	cmp	r3, #3
 800240a:	d017      	beq.n	800243c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d123      	bne.n	8002490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80a2 	beq.w	8002616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b57      	ldr	r3, [pc, #348]	@ (8002634 <HAL_GPIO_Init+0x2e8>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	4a56      	ldr	r2, [pc, #344]	@ (8002634 <HAL_GPIO_Init+0x2e8>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024e2:	4b54      	ldr	r3, [pc, #336]	@ (8002634 <HAL_GPIO_Init+0x2e8>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ee:	4a52      	ldr	r2, [pc, #328]	@ (8002638 <HAL_GPIO_Init+0x2ec>)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a49      	ldr	r2, [pc, #292]	@ (800263c <HAL_GPIO_Init+0x2f0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d019      	beq.n	800254e <HAL_GPIO_Init+0x202>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a48      	ldr	r2, [pc, #288]	@ (8002640 <HAL_GPIO_Init+0x2f4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0x1fe>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a47      	ldr	r2, [pc, #284]	@ (8002644 <HAL_GPIO_Init+0x2f8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00d      	beq.n	8002546 <HAL_GPIO_Init+0x1fa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a46      	ldr	r2, [pc, #280]	@ (8002648 <HAL_GPIO_Init+0x2fc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <HAL_GPIO_Init+0x1f6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a45      	ldr	r2, [pc, #276]	@ (800264c <HAL_GPIO_Init+0x300>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_GPIO_Init+0x1f2>
 800253a:	2304      	movs	r3, #4
 800253c:	e008      	b.n	8002550 <HAL_GPIO_Init+0x204>
 800253e:	2307      	movs	r3, #7
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x204>
 8002542:	2303      	movs	r3, #3
 8002544:	e004      	b.n	8002550 <HAL_GPIO_Init+0x204>
 8002546:	2302      	movs	r3, #2
 8002548:	e002      	b.n	8002550 <HAL_GPIO_Init+0x204>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_GPIO_Init+0x204>
 800254e:	2300      	movs	r3, #0
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	f002 0203 	and.w	r2, r2, #3
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	4093      	lsls	r3, r2
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002560:	4935      	ldr	r1, [pc, #212]	@ (8002638 <HAL_GPIO_Init+0x2ec>)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256e:	4b38      	ldr	r3, [pc, #224]	@ (8002650 <HAL_GPIO_Init+0x304>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002592:	4a2f      	ldr	r2, [pc, #188]	@ (8002650 <HAL_GPIO_Init+0x304>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002598:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <HAL_GPIO_Init+0x304>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025bc:	4a24      	ldr	r2, [pc, #144]	@ (8002650 <HAL_GPIO_Init+0x304>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025c2:	4b23      	ldr	r3, [pc, #140]	@ (8002650 <HAL_GPIO_Init+0x304>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002650 <HAL_GPIO_Init+0x304>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <HAL_GPIO_Init+0x304>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002610:	4a0f      	ldr	r2, [pc, #60]	@ (8002650 <HAL_GPIO_Init+0x304>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3301      	adds	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	f67f aea2 	bls.w	8002368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3724      	adds	r7, #36	@ 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
 8002638:	40013800 	.word	0x40013800
 800263c:	40020000 	.word	0x40020000
 8002640:	40020400 	.word	0x40020400
 8002644:	40020800 	.word	0x40020800
 8002648:	40020c00 	.word	0x40020c00
 800264c:	40021000 	.word	0x40021000
 8002650:	40013c00 	.word	0x40013c00

08002654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
 8002660:	4613      	mov	r3, r2
 8002662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002664:	787b      	ldrb	r3, [r7, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002670:	e003      	b.n	800267a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	041a      	lsls	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	619a      	str	r2, [r3, #24]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002698:	887a      	ldrh	r2, [r7, #2]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	041a      	lsls	r2, r3, #16
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	400b      	ands	r3, r1
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	619a      	str	r2, [r3, #24]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e267      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d075      	beq.n	80027c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026da:	4b88      	ldr	r3, [pc, #544]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00c      	beq.n	8002700 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e6:	4b85      	ldr	r3, [pc, #532]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d112      	bne.n	8002718 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b82      	ldr	r3, [pc, #520]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026fe:	d10b      	bne.n	8002718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	4b7e      	ldr	r3, [pc, #504]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d05b      	beq.n	80027c4 <HAL_RCC_OscConfig+0x108>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d157      	bne.n	80027c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e242      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x74>
 8002722:	4b76      	ldr	r3, [pc, #472]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a75      	ldr	r2, [pc, #468]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e01d      	b.n	800276c <HAL_RCC_OscConfig+0xb0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x98>
 800273a:	4b70      	ldr	r3, [pc, #448]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6f      	ldr	r2, [pc, #444]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b6d      	ldr	r3, [pc, #436]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6c      	ldr	r2, [pc, #432]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0xb0>
 8002754:	4b69      	ldr	r3, [pc, #420]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a68      	ldr	r2, [pc, #416]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b66      	ldr	r3, [pc, #408]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a65      	ldr	r2, [pc, #404]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff fc6a 	bl	800204c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7ff fc66 	bl	800204c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	@ 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e207      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b5b      	ldr	r3, [pc, #364]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0xc0>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff fc56 	bl	800204c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff fc52 	bl	800204c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	@ 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1f3      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	4b51      	ldr	r3, [pc, #324]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0xe8>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d063      	beq.n	800289a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027d2:	4b4a      	ldr	r3, [pc, #296]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027de:	4b47      	ldr	r3, [pc, #284]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d11c      	bne.n	8002824 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b44      	ldr	r3, [pc, #272]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	4b41      	ldr	r3, [pc, #260]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_RCC_OscConfig+0x152>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e1c7      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b3b      	ldr	r3, [pc, #236]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4937      	ldr	r1, [pc, #220]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	e03a      	b.n	800289a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282c:	4b34      	ldr	r3, [pc, #208]	@ (8002900 <HAL_RCC_OscConfig+0x244>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7ff fc0b 	bl	800204c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283a:	f7ff fc07 	bl	800204c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1a8      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	4b2b      	ldr	r3, [pc, #172]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b28      	ldr	r3, [pc, #160]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4925      	ldr	r1, [pc, #148]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	e015      	b.n	800289a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286e:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_OscConfig+0x244>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7ff fbea 	bl	800204c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287c:	f7ff fbe6 	bl	800204c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e187      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d036      	beq.n	8002914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d016      	beq.n	80028dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_RCC_OscConfig+0x248>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7ff fbca 	bl	800204c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028bc:	f7ff fbc6 	bl	800204c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e167      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ce:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_RCC_OscConfig+0x240>)
 80028d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x200>
 80028da:	e01b      	b.n	8002914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028dc:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <HAL_RCC_OscConfig+0x248>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7ff fbb3 	bl	800204c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e8:	e00e      	b.n	8002908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ea:	f7ff fbaf 	bl	800204c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d907      	bls.n	8002908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e150      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
 80028fc:	40023800 	.word	0x40023800
 8002900:	42470000 	.word	0x42470000
 8002904:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	4b88      	ldr	r3, [pc, #544]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 800290a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ea      	bne.n	80028ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8097 	beq.w	8002a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002926:	4b81      	ldr	r3, [pc, #516]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b7d      	ldr	r3, [pc, #500]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 800293c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002940:	6413      	str	r3, [r2, #64]	@ 0x40
 8002942:	4b7a      	ldr	r3, [pc, #488]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294e:	2301      	movs	r3, #1
 8002950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b77      	ldr	r3, [pc, #476]	@ (8002b30 <HAL_RCC_OscConfig+0x474>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d118      	bne.n	8002990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295e:	4b74      	ldr	r3, [pc, #464]	@ (8002b30 <HAL_RCC_OscConfig+0x474>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a73      	ldr	r2, [pc, #460]	@ (8002b30 <HAL_RCC_OscConfig+0x474>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296a:	f7ff fb6f 	bl	800204c <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002972:	f7ff fb6b 	bl	800204c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e10c      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	4b6a      	ldr	r3, [pc, #424]	@ (8002b30 <HAL_RCC_OscConfig+0x474>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x2ea>
 8002998:	4b64      	ldr	r3, [pc, #400]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a63      	ldr	r2, [pc, #396]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	e01c      	b.n	80029e0 <HAL_RCC_OscConfig+0x324>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x30c>
 80029ae:	4b5f      	ldr	r3, [pc, #380]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ba:	4b5c      	ldr	r3, [pc, #368]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	4a5b      	ldr	r2, [pc, #364]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0x324>
 80029c8:	4b58      	ldr	r3, [pc, #352]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029cc:	4a57      	ldr	r2, [pc, #348]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d4:	4b55      	ldr	r3, [pc, #340]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	4a54      	ldr	r2, [pc, #336]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 80029da:	f023 0304 	bic.w	r3, r3, #4
 80029de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d015      	beq.n	8002a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7ff fb30 	bl	800204c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7ff fb2c 	bl	800204c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0cb      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	4b49      	ldr	r3, [pc, #292]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0ee      	beq.n	80029f0 <HAL_RCC_OscConfig+0x334>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a14:	f7ff fb1a 	bl	800204c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7ff fb16 	bl	800204c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0b5      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a32:	4b3e      	ldr	r3, [pc, #248]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ee      	bne.n	8002a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a44:	4b39      	ldr	r3, [pc, #228]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	4a38      	ldr	r2, [pc, #224]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80a1 	beq.w	8002b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a5a:	4b34      	ldr	r3, [pc, #208]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d05c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d141      	bne.n	8002af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6e:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <HAL_RCC_OscConfig+0x478>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff faea 	bl	800204c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7ff fae6 	bl	800204c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e087      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	491b      	ldr	r1, [pc, #108]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_RCC_OscConfig+0x478>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7ff fabf 	bl	800204c <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7ff fabb 	bl	800204c <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e05c      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae4:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x416>
 8002af0:	e054      	b.n	8002b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <HAL_RCC_OscConfig+0x478>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff faa8 	bl	800204c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7ff faa4 	bl	800204c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e045      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_RCC_OscConfig+0x470>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x444>
 8002b1e:	e03d      	b.n	8002b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e038      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40007000 	.word	0x40007000
 8002b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCC_OscConfig+0x4ec>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d028      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d121      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d11a      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b68:	4013      	ands	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d111      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	3b01      	subs	r3, #1
 8002b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0cc      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b68      	ldr	r3, [pc, #416]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d90c      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b65      	ldr	r3, [pc, #404]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b63      	ldr	r3, [pc, #396]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0b8      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c00:	4b59      	ldr	r3, [pc, #356]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a58      	ldr	r2, [pc, #352]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c18:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c24:	4b50      	ldr	r3, [pc, #320]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	494d      	ldr	r1, [pc, #308]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d044      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d119      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e067      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4934      	ldr	r1, [pc, #208]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c9c:	f7ff f9d6 	bl	800204c <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7ff f9d2 	bl	800204c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e04f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d20c      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b22      	ldr	r3, [pc, #136]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e032      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4916      	ldr	r1, [pc, #88]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1e:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	490e      	ldr	r1, [pc, #56]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d32:	f000 f821 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	490a      	ldr	r1, [pc, #40]	@ (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	5ccb      	ldrb	r3, [r1, r3]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	4a09      	ldr	r2, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d4e:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fa5e 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	08009db8 	.word	0x08009db8
 8002d70:	2000006c 	.word	0x2000006c
 8002d74:	20000070 	.word	0x20000070

08002d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d7c:	b094      	sub	sp, #80	@ 0x50
 8002d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d90:	4b79      	ldr	r3, [pc, #484]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d00d      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x40>
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	f200 80e1 	bhi.w	8002f64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x34>
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d003      	beq.n	8002db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002daa:	e0db      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dac:	4b73      	ldr	r3, [pc, #460]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002dae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002db0:	e0db      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002db2:	4b73      	ldr	r3, [pc, #460]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x208>)
 8002db4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002db6:	e0d8      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d063      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dce:	4b6a      	ldr	r3, [pc, #424]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002de2:	2300      	movs	r3, #0
 8002de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dea:	4622      	mov	r2, r4
 8002dec:	462b      	mov	r3, r5
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4621      	mov	r1, r4
 8002e04:	1a51      	subs	r1, r2, r1
 8002e06:	6139      	str	r1, [r7, #16]
 8002e08:	4629      	mov	r1, r5
 8002e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	018b      	lsls	r3, r1, #6
 8002e20:	4651      	mov	r1, sl
 8002e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e26:	4651      	mov	r1, sl
 8002e28:	018a      	lsls	r2, r1, #6
 8002e2a:	4651      	mov	r1, sl
 8002e2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e30:	4659      	mov	r1, fp
 8002e32:	eb63 0901 	sbc.w	r9, r3, r1
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4a:	4690      	mov	r8, r2
 8002e4c:	4699      	mov	r9, r3
 8002e4e:	4623      	mov	r3, r4
 8002e50:	eb18 0303 	adds.w	r3, r8, r3
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	462b      	mov	r3, r5
 8002e58:	eb49 0303 	adc.w	r3, r9, r3
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	024b      	lsls	r3, r1, #9
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e74:	4621      	mov	r1, r4
 8002e76:	024a      	lsls	r2, r1, #9
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e7e:	2200      	movs	r2, #0
 8002e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e88:	f7fd f9fa 	bl	8000280 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e94:	e058      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e96:	4b38      	ldr	r3, [pc, #224]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	f04f 0000 	mov.w	r0, #0
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	0159      	lsls	r1, r3, #5
 8002ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec2:	0150      	lsls	r0, r2, #5
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4641      	mov	r1, r8
 8002eca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ece:	4649      	mov	r1, r9
 8002ed0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ee0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ee4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee8:	ebb2 040a 	subs.w	r4, r2, sl
 8002eec:	eb63 050b 	sbc.w	r5, r3, fp
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	00eb      	lsls	r3, r5, #3
 8002efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efe:	00e2      	lsls	r2, r4, #3
 8002f00:	4614      	mov	r4, r2
 8002f02:	461d      	mov	r5, r3
 8002f04:	4643      	mov	r3, r8
 8002f06:	18e3      	adds	r3, r4, r3
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	eb45 0303 	adc.w	r3, r5, r3
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	028b      	lsls	r3, r1, #10
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f28:	4621      	mov	r1, r4
 8002f2a:	028a      	lsls	r2, r1, #10
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	61fa      	str	r2, [r7, #28]
 8002f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3c:	f7fd f9a0 	bl	8000280 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f62:	e002      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3750      	adds	r7, #80	@ 0x50
 8002f70:	46bd      	mov	sp, r7
 8002f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	00f42400 	.word	0x00f42400
 8002f80:	007a1200 	.word	0x007a1200

08002f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f88:	4b03      	ldr	r3, [pc, #12]	@ (8002f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	2000006c 	.word	0x2000006c

08002f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fa0:	f7ff fff0 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0a9b      	lsrs	r3, r3, #10
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4903      	ldr	r1, [pc, #12]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	08009dc8 	.word	0x08009dc8

08002fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fc8:	f7ff ffdc 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	0b5b      	lsrs	r3, r3, #13
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4903      	ldr	r1, [pc, #12]	@ (8002fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	08009dc8 	.word	0x08009dc8

08002fec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	220f      	movs	r2, #15
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ffc:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_RCC_GetClockConfig+0x5c>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0203 	and.w	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003008:	4b0f      	ldr	r3, [pc, #60]	@ (8003048 <HAL_RCC_GetClockConfig+0x5c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003020:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800302e:	4b07      	ldr	r3, [pc, #28]	@ (800304c <HAL_RCC_GetClockConfig+0x60>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0207 	and.w	r2, r3, #7
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	601a      	str	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40023c00 	.word	0x40023c00

08003050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e041      	b.n	80030e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe fc46 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f000 ff18 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d001      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e044      	b.n	8003192 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d018      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x6c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003132:	d013      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x6c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1a      	ldr	r2, [pc, #104]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00e      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x6c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a19      	ldr	r2, [pc, #100]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x6c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a17      	ldr	r2, [pc, #92]	@ (80031ac <HAL_TIM_Base_Start_IT+0xbc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x6c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a16      	ldr	r2, [pc, #88]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d010      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317e:	e007      	b.n	8003190 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40014000 	.word	0x40014000

080031b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10f      	bne.n	80031fc <HAL_TIM_Base_Stop_IT+0x48>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_Base_Stop_IT+0x48>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e041      	b.n	80032a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f839 	bl	80032b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f000 fe37 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_TIM_PWM_Start+0x24>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e022      	b.n	800332e <HAL_TIM_PWM_Start+0x6a>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d109      	bne.n	8003302 <HAL_TIM_PWM_Start+0x3e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	e015      	b.n	800332e <HAL_TIM_PWM_Start+0x6a>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d109      	bne.n	800331c <HAL_TIM_PWM_Start+0x58>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e008      	b.n	800332e <HAL_TIM_PWM_Start+0x6a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e068      	b.n	8003408 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <HAL_TIM_PWM_Start+0x82>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003344:	e013      	b.n	800336e <HAL_TIM_PWM_Start+0xaa>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d104      	bne.n	8003356 <HAL_TIM_PWM_Start+0x92>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003354:	e00b      	b.n	800336e <HAL_TIM_PWM_Start+0xaa>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d104      	bne.n	8003366 <HAL_TIM_PWM_Start+0xa2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003364:	e003      	b.n	800336e <HAL_TIM_PWM_Start+0xaa>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2201      	movs	r2, #1
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f001 f974 	bl	8004664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <HAL_TIM_PWM_Start+0x14c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d107      	bne.n	8003396 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1d      	ldr	r2, [pc, #116]	@ (8003410 <HAL_TIM_PWM_Start+0x14c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x10e>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a8:	d013      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x10e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <HAL_TIM_PWM_Start+0x150>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x10e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <HAL_TIM_PWM_Start+0x154>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x10e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a16      	ldr	r2, [pc, #88]	@ (800341c <HAL_TIM_PWM_Start+0x158>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x10e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a14      	ldr	r2, [pc, #80]	@ (8003420 <HAL_TIM_PWM_Start+0x15c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d111      	bne.n	80033f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b06      	cmp	r3, #6
 80033e2:	d010      	beq.n	8003406 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f4:	e007      	b.n	8003406 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40010000 	.word	0x40010000
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40014000 	.word	0x40014000

08003424 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f001 f914 	bl	8004664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a29      	ldr	r2, [pc, #164]	@ (80034e8 <HAL_TIM_PWM_Stop+0xc4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d117      	bne.n	8003476 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_TIM_PWM_Stop+0x52>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <HAL_TIM_PWM_Stop+0x52>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a1a      	ldr	r2, [r3, #32]
 800347c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <HAL_TIM_PWM_Stop+0x82>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d107      	bne.n	80034a6 <HAL_TIM_PWM_Stop+0x82>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Stop+0x92>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b4:	e013      	b.n	80034de <HAL_TIM_PWM_Stop+0xba>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d104      	bne.n	80034c6 <HAL_TIM_PWM_Stop+0xa2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c4:	e00b      	b.n	80034de <HAL_TIM_PWM_Stop+0xba>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_PWM_Stop+0xb2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d4:	e003      	b.n	80034de <HAL_TIM_PWM_Stop+0xba>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40010000 	.word	0x40010000

080034ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e041      	b.n	8003582 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f839 	bl	800358a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 fcca 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_TIM_IC_Start_IT+0x1e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e013      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x46>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_IC_Start_IT+0x2e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e00b      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x46>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d104      	bne.n	80035de <HAL_TIM_IC_Start_IT+0x3e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	e003      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x46>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <HAL_TIM_IC_Start_IT+0x58>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e013      	b.n	8003620 <HAL_TIM_IC_Start_IT+0x80>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d104      	bne.n	8003608 <HAL_TIM_IC_Start_IT+0x68>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e00b      	b.n	8003620 <HAL_TIM_IC_Start_IT+0x80>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b08      	cmp	r3, #8
 800360c:	d104      	bne.n	8003618 <HAL_TIM_IC_Start_IT+0x78>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e003      	b.n	8003620 <HAL_TIM_IC_Start_IT+0x80>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800361e:	b2db      	uxtb	r3, r3
 8003620:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003622:	7bbb      	ldrb	r3, [r7, #14]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d102      	bne.n	800362e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003628:	7b7b      	ldrb	r3, [r7, #13]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0c2      	b.n	80037b8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_TIM_IC_Start_IT+0xa2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003640:	e013      	b.n	800366a <HAL_TIM_IC_Start_IT+0xca>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d104      	bne.n	8003652 <HAL_TIM_IC_Start_IT+0xb2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003650:	e00b      	b.n	800366a <HAL_TIM_IC_Start_IT+0xca>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d104      	bne.n	8003662 <HAL_TIM_IC_Start_IT+0xc2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003660:	e003      	b.n	800366a <HAL_TIM_IC_Start_IT+0xca>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <HAL_TIM_IC_Start_IT+0xda>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003678:	e013      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x102>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d104      	bne.n	800368a <HAL_TIM_IC_Start_IT+0xea>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003688:	e00b      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x102>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d104      	bne.n	800369a <HAL_TIM_IC_Start_IT+0xfa>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003698:	e003      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x102>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	d841      	bhi.n	800372c <HAL_TIM_IC_Start_IT+0x18c>
 80036a8:	a201      	add	r2, pc, #4	@ (adr r2, 80036b0 <HAL_TIM_IC_Start_IT+0x110>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036e5 	.word	0x080036e5
 80036b4:	0800372d 	.word	0x0800372d
 80036b8:	0800372d 	.word	0x0800372d
 80036bc:	0800372d 	.word	0x0800372d
 80036c0:	080036f7 	.word	0x080036f7
 80036c4:	0800372d 	.word	0x0800372d
 80036c8:	0800372d 	.word	0x0800372d
 80036cc:	0800372d 	.word	0x0800372d
 80036d0:	08003709 	.word	0x08003709
 80036d4:	0800372d 	.word	0x0800372d
 80036d8:	0800372d 	.word	0x0800372d
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	0800371b 	.word	0x0800371b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0202 	orr.w	r2, r2, #2
 80036f2:	60da      	str	r2, [r3, #12]
      break;
 80036f4:	e01d      	b.n	8003732 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0204 	orr.w	r2, r2, #4
 8003704:	60da      	str	r2, [r3, #12]
      break;
 8003706:	e014      	b.n	8003732 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0208 	orr.w	r2, r2, #8
 8003716:	60da      	str	r2, [r3, #12]
      break;
 8003718:	e00b      	b.n	8003732 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0210 	orr.w	r2, r2, #16
 8003728:	60da      	str	r2, [r3, #12]
      break;
 800372a:	e002      	b.n	8003732 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	bf00      	nop
  }

  if (status == HAL_OK)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d13e      	bne.n	80037b6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 ff8f 	bl	8004664 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1d      	ldr	r2, [pc, #116]	@ (80037c0 <HAL_TIM_IC_Start_IT+0x220>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_TIM_IC_Start_IT+0x1e2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003758:	d013      	beq.n	8003782 <HAL_TIM_IC_Start_IT+0x1e2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a19      	ldr	r2, [pc, #100]	@ (80037c4 <HAL_TIM_IC_Start_IT+0x224>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_TIM_IC_Start_IT+0x1e2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <HAL_TIM_IC_Start_IT+0x228>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_TIM_IC_Start_IT+0x1e2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	@ (80037cc <HAL_TIM_IC_Start_IT+0x22c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_TIM_IC_Start_IT+0x1e2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <HAL_TIM_IC_Start_IT+0x230>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d111      	bne.n	80037a6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d010      	beq.n	80037b6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	e007      	b.n	80037b6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40014000 	.word	0x40014000

080037d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d020      	beq.n	8003838 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01b      	beq.n	8003838 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fb8c 	bl	8000f3c <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fb2e 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fb35 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d020      	beq.n	8003884 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01b      	beq.n	8003884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0204 	mvn.w	r2, #4
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fb66 	bl	8000f3c <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fb08 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fb0f 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d020      	beq.n	80038d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01b      	beq.n	80038d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0208 	mvn.w	r2, #8
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2204      	movs	r2, #4
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd fb40 	bl	8000f3c <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fae2 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fae9 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d020      	beq.n	800391c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01b      	beq.n	800391c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0210 	mvn.w	r2, #16
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2208      	movs	r2, #8
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fb1a 	bl	8000f3c <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fabc 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fac3 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0201 	mvn.w	r2, #1
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fa8e 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00c      	beq.n	8003964 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 ff1e 	bl	80047a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00c      	beq.n	8003988 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa94 	bl	8003eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0220 	mvn.w	r2, #32
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fef0 	bl	800478c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e088      	b.n	8003ae4 <HAL_TIM_IC_ConfigChannel+0x130>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80039f0:	f000 fc80 	bl	80042f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020c 	bic.w	r2, r2, #12
 8003a02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6999      	ldr	r1, [r3, #24]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	619a      	str	r2, [r3, #24]
 8003a16:	e060      	b.n	8003ada <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d11c      	bne.n	8003a58 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003a2e:	f000 fcf8 	bl	8004422 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6999      	ldr	r1, [r3, #24]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	021a      	lsls	r2, r3, #8
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	619a      	str	r2, [r3, #24]
 8003a56:	e040      	b.n	8003ada <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d11b      	bne.n	8003a96 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003a6e:	f000 fd45 	bl	80044fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 020c 	bic.w	r2, r2, #12
 8003a80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69d9      	ldr	r1, [r3, #28]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	61da      	str	r2, [r3, #28]
 8003a94:	e021      	b.n	8003ada <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d11c      	bne.n	8003ad6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003aac:	f000 fd62 	bl	8004574 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003abe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69d9      	ldr	r1, [r3, #28]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
 8003ad4:	e001      	b.n	8003ada <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e0ae      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b0c      	cmp	r3, #12
 8003b16:	f200 809f 	bhi.w	8003c58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b55 	.word	0x08003b55
 8003b24:	08003c59 	.word	0x08003c59
 8003b28:	08003c59 	.word	0x08003c59
 8003b2c:	08003c59 	.word	0x08003c59
 8003b30:	08003b95 	.word	0x08003b95
 8003b34:	08003c59 	.word	0x08003c59
 8003b38:	08003c59 	.word	0x08003c59
 8003b3c:	08003c59 	.word	0x08003c59
 8003b40:	08003bd7 	.word	0x08003bd7
 8003b44:	08003c59 	.word	0x08003c59
 8003b48:	08003c59 	.word	0x08003c59
 8003b4c:	08003c59 	.word	0x08003c59
 8003b50:	08003c17 	.word	0x08003c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa3e 	bl	8003fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0208 	orr.w	r2, r2, #8
 8003b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6999      	ldr	r1, [r3, #24]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	619a      	str	r2, [r3, #24]
      break;
 8003b92:	e064      	b.n	8003c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fa84 	bl	80040a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6999      	ldr	r1, [r3, #24]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	021a      	lsls	r2, r3, #8
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	619a      	str	r2, [r3, #24]
      break;
 8003bd4:	e043      	b.n	8003c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 facf 	bl	8004180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0208 	orr.w	r2, r2, #8
 8003bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0204 	bic.w	r2, r2, #4
 8003c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69d9      	ldr	r1, [r3, #28]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	61da      	str	r2, [r3, #28]
      break;
 8003c14:	e023      	b.n	8003c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fb19 	bl	8004254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69d9      	ldr	r1, [r3, #28]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	021a      	lsls	r2, r3, #8
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	61da      	str	r2, [r3, #28]
      break;
 8003c56:	e002      	b.n	8003c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIM_ConfigClockSource+0x1c>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e0b4      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x186>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc4:	d03e      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0xd4>
 8003cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cca:	f200 8087 	bhi.w	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd2:	f000 8086 	beq.w	8003de2 <HAL_TIM_ConfigClockSource+0x172>
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cda:	d87f      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b70      	cmp	r3, #112	@ 0x70
 8003cde:	d01a      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0xa6>
 8003ce0:	2b70      	cmp	r3, #112	@ 0x70
 8003ce2:	d87b      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b60      	cmp	r3, #96	@ 0x60
 8003ce6:	d050      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x11a>
 8003ce8:	2b60      	cmp	r3, #96	@ 0x60
 8003cea:	d877      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b50      	cmp	r3, #80	@ 0x50
 8003cee:	d03c      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0xfa>
 8003cf0:	2b50      	cmp	r3, #80	@ 0x50
 8003cf2:	d873      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b40      	cmp	r3, #64	@ 0x40
 8003cf6:	d058      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x13a>
 8003cf8:	2b40      	cmp	r3, #64	@ 0x40
 8003cfa:	d86f      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b30      	cmp	r3, #48	@ 0x30
 8003cfe:	d064      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x15a>
 8003d00:	2b30      	cmp	r3, #48	@ 0x30
 8003d02:	d86b      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d060      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x15a>
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d867      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05c      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x15a>
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d05a      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x15a>
 8003d14:	e062      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d26:	f000 fc7d 	bl	8004624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	609a      	str	r2, [r3, #8]
      break;
 8003d42:	e04f      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d54:	f000 fc66 	bl	8004624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d66:	609a      	str	r2, [r3, #8]
      break;
 8003d68:	e03c      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	461a      	mov	r2, r3
 8003d78:	f000 fb24 	bl	80043c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2150      	movs	r1, #80	@ 0x50
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fc33 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8003d88:	e02c      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 fb80 	bl	800449c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2160      	movs	r1, #96	@ 0x60
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fc23 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8003da8:	e01c      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db6:	461a      	mov	r2, r3
 8003db8:	f000 fb04 	bl	80043c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2140      	movs	r1, #64	@ 0x40
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fc13 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8003dc8:	e00c      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f000 fc0a 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8003dda:	e003      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      break;
 8003de0:	e000      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d831      	bhi.n	8003e78 <HAL_TIM_ReadCapturedValue+0x78>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e5b 	.word	0x08003e5b
 8003e30:	08003e79 	.word	0x08003e79
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e6f 	.word	0x08003e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e56:	60fb      	str	r3, [r7, #12]

      break;
 8003e58:	e00f      	b.n	8003e7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e60:	60fb      	str	r3, [r7, #12]

      break;
 8003e62:	e00a      	b.n	8003e7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6a:	60fb      	str	r3, [r7, #12]

      break;
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	60fb      	str	r3, [r7, #12]

      break;
 8003e76:	e000      	b.n	8003e7a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e78:	bf00      	nop
  }

  return tmpreg;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3a      	ldr	r2, [pc, #232]	@ (8003fc0 <TIM_Base_SetConfig+0xfc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00f      	beq.n	8003efc <TIM_Base_SetConfig+0x38>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0x38>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a37      	ldr	r2, [pc, #220]	@ (8003fc4 <TIM_Base_SetConfig+0x100>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0x38>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a36      	ldr	r2, [pc, #216]	@ (8003fc8 <TIM_Base_SetConfig+0x104>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0x38>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a35      	ldr	r2, [pc, #212]	@ (8003fcc <TIM_Base_SetConfig+0x108>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc0 <TIM_Base_SetConfig+0xfc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01b      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1c:	d017      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a28      	ldr	r2, [pc, #160]	@ (8003fc4 <TIM_Base_SetConfig+0x100>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a27      	ldr	r2, [pc, #156]	@ (8003fc8 <TIM_Base_SetConfig+0x104>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00f      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a26      	ldr	r2, [pc, #152]	@ (8003fcc <TIM_Base_SetConfig+0x108>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a25      	ldr	r2, [pc, #148]	@ (8003fd0 <TIM_Base_SetConfig+0x10c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a24      	ldr	r2, [pc, #144]	@ (8003fd4 <TIM_Base_SetConfig+0x110>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a23      	ldr	r2, [pc, #140]	@ (8003fd8 <TIM_Base_SetConfig+0x114>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc0 <TIM_Base_SetConfig+0xfc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d103      	bne.n	8003f94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	611a      	str	r2, [r3, #16]
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40014400 	.word	0x40014400
 8003fd8:	40014800 	.word	0x40014800

08003fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f023 0201 	bic.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0302 	bic.w	r3, r3, #2
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a1c      	ldr	r2, [pc, #112]	@ (80040a4 <TIM_OC1_SetConfig+0xc8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10c      	bne.n	8004052 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0308 	bic.w	r3, r3, #8
 800403e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <TIM_OC1_SetConfig+0xc8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d111      	bne.n	800407e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40010000 	.word	0x40010000

080040a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 0210 	bic.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0320 	bic.w	r3, r3, #32
 80040f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <TIM_OC2_SetConfig+0xd4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10d      	bne.n	8004124 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a15      	ldr	r2, [pc, #84]	@ (800417c <TIM_OC2_SetConfig+0xd4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d113      	bne.n	8004154 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000

08004180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <TIM_OC3_SetConfig+0xd0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d10d      	bne.n	80041fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a14      	ldr	r2, [pc, #80]	@ (8004250 <TIM_OC3_SetConfig+0xd0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d113      	bne.n	800422a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40010000 	.word	0x40010000

08004254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a10      	ldr	r2, [pc, #64]	@ (80042f0 <TIM_OC4_SetConfig+0x9c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d109      	bne.n	80042c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	019b      	lsls	r3, r3, #6
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000

080042f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f023 0201 	bic.w	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a24      	ldr	r2, [pc, #144]	@ (80043b0 <TIM_TI1_SetConfig+0xbc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004328:	d00f      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <TIM_TI1_SetConfig+0xc0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a20      	ldr	r2, [pc, #128]	@ (80043b8 <TIM_TI1_SetConfig+0xc4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a1f      	ldr	r2, [pc, #124]	@ (80043bc <TIM_TI1_SetConfig+0xc8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a1e      	ldr	r2, [pc, #120]	@ (80043c0 <TIM_TI1_SetConfig+0xcc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <TIM_TI1_SetConfig+0x5a>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <TIM_TI1_SetConfig+0x5c>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e003      	b.n	800436e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	b2db      	uxtb	r3, r3
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f023 030a 	bic.w	r3, r3, #10
 8004388:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f003 030a 	and.w	r3, r3, #10
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40014000 	.word	0x40014000

080043c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0201 	bic.w	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f023 030a 	bic.w	r3, r3, #10
 8004400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	621a      	str	r2, [r3, #32]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004422:	b480      	push	{r7}
 8004424:	b087      	sub	sp, #28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0210 	bic.w	r2, r3, #16
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	b29b      	uxth	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004474:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0210 	bic.w	r2, r3, #16
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	031b      	lsls	r3, r3, #12
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f023 0303 	bic.w	r3, r3, #3
 8004528:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004538:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	b2db      	uxtb	r3, r3
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800454c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	621a      	str	r2, [r3, #32]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80045c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	031b      	lsls	r3, r3, #12
 80045cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	f043 0307 	orr.w	r3, r3, #7
 8004610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800463e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	431a      	orrs	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2201      	movs	r2, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1a      	ldr	r2, [r3, #32]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	43db      	mvns	r3, r3
 8004686:	401a      	ands	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1a      	ldr	r2, [r3, #32]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e050      	b.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1c      	ldr	r2, [pc, #112]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d018      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d013      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a18      	ldr	r2, [pc, #96]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a16      	ldr	r2, [pc, #88]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d009      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a15      	ldr	r2, [pc, #84]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a13      	ldr	r2, [pc, #76]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d10c      	bne.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4313      	orrs	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40010000 	.word	0x40010000
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40014000 	.word	0x40014000

0800478c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e042      	b.n	800484c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd fb4a 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	@ 0x24
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fdbd 	bl	8005378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800480c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800481c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800482c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	@ 0x28
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b20      	cmp	r3, #32
 8004872:	d175      	bne.n	8004960 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_UART_Transmit+0x2c>
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e06e      	b.n	8004962 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2221      	movs	r2, #33	@ 0x21
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004892:	f7fd fbdb 	bl	800204c <HAL_GetTick>
 8004896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	88fa      	ldrh	r2, [r7, #6]
 800489c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ac:	d108      	bne.n	80048c0 <HAL_UART_Transmit+0x6c>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	e003      	b.n	80048c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048c8:	e02e      	b.n	8004928 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	2180      	movs	r1, #128	@ 0x80
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 fb1f 	bl	8004f18 <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e03a      	b.n	8004962 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004900:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	3302      	adds	r3, #2
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	e007      	b.n	800491a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	3301      	adds	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1cb      	bne.n	80048ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	2140      	movs	r1, #64	@ 0x40
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 faeb 	bl	8004f18 <UART_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e006      	b.n	8004962 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	4613      	mov	r3, r2
 8004976:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b20      	cmp	r3, #32
 8004982:	d112      	bne.n	80049aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_Receive_IT+0x26>
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e00b      	b.n	80049ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	461a      	mov	r2, r3
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fb12 	bl	8004fca <UART_Start_Receive_IT>
 80049a6:	4603      	mov	r3, r0
 80049a8:	e000      	b.n	80049ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b0ba      	sub	sp, #232	@ 0xe8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049da:	2300      	movs	r3, #0
 80049dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_UART_IRQHandler+0x66>
 8004a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fbf2 	bl	80051fc <UART_Receive_IT>
      return;
 8004a18:	e25b      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80de 	beq.w	8004be0 <HAL_UART_IRQHandler+0x22c>
 8004a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80d1 	beq.w	8004be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HAL_UART_IRQHandler+0xae>
 8004a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_UART_IRQHandler+0xd2>
 8004a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	f043 0202 	orr.w	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_UART_IRQHandler+0xf6>
 8004a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	f043 0204 	orr.w	r2, r3, #4
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d011      	beq.n	8004ada <HAL_UART_IRQHandler+0x126>
 8004ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	f043 0208 	orr.w	r2, r3, #8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 81f2 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_UART_IRQHandler+0x14e>
 8004af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fb7d 	bl	80051fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0c:	2b40      	cmp	r3, #64	@ 0x40
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <HAL_UART_IRQHandler+0x17a>
 8004b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d04f      	beq.n	8004bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa85 	bl	800503e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3e:	2b40      	cmp	r3, #64	@ 0x40
 8004b40:	d141      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3314      	adds	r3, #20
 8004b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1d9      	bne.n	8004b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d013      	beq.n	8004bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d94 <HAL_UART_IRQHandler+0x3e0>)
 8004b9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fd fbb0 	bl	8002308 <HAL_DMA_Abort_IT>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	e00e      	b.n	8004bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f994 	bl	8004eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	e00a      	b.n	8004bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f990 	bl	8004eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	e006      	b.n	8004bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f98c 	bl	8004eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bda:	e175      	b.n	8004ec8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	bf00      	nop
    return;
 8004bde:	e173      	b.n	8004ec8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	f040 814f 	bne.w	8004e88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8148 	beq.w	8004e88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8141 	beq.w	8004e88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c26:	2b40      	cmp	r3, #64	@ 0x40
 8004c28:	f040 80b6 	bne.w	8004d98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8145 	beq.w	8004ecc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	f080 813e 	bcs.w	8004ecc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c62:	f000 8088 	beq.w	8004d76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1d9      	bne.n	8004c66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e1      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3314      	adds	r3, #20
 8004cf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e3      	bne.n	8004cee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e3      	bne.n	8004d34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fd fa59 	bl	8002228 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8b7 	bl	8004f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d92:	e09b      	b.n	8004ecc <HAL_UART_IRQHandler+0x518>
 8004d94:	08005105 	.word	0x08005105
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 808e 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8089 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004de2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004de4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e3      	bne.n	8004dbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3314      	adds	r3, #20
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	623b      	str	r3, [r7, #32]
   return(result);
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3314      	adds	r3, #20
 8004e16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e3      	bne.n	8004df6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0310 	bic.w	r3, r3, #16
 8004e52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e60:	61fa      	str	r2, [r7, #28]
 8004e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	69b9      	ldr	r1, [r7, #24]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e3      	bne.n	8004e3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f83d 	bl	8004f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e86:	e023      	b.n	8004ed0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d009      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x4f4>
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f943 	bl	800512c <UART_Transmit_IT>
    return;
 8004ea6:	e014      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
 8004eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f983 	bl	80051cc <UART_EndTransmit_IT>
    return;
 8004ec6:	e004      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ec8:	bf00      	nop
 8004eca:	e002      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ecc:	bf00      	nop
 8004ece:	e000      	b.n	8004ed2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ed0:	bf00      	nop
  }
}
 8004ed2:	37e8      	adds	r7, #232	@ 0xe8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f28:	e03b      	b.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d037      	beq.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f32:	f7fd f88b 	bl	800204c <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d302      	bcc.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e03a      	b.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d023      	beq.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b80      	cmp	r3, #128	@ 0x80
 8004f5e:	d020      	beq.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b40      	cmp	r3, #64	@ 0x40
 8004f64:	d01d      	beq.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d116      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f857 	bl	800503e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2208      	movs	r2, #8
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e00f      	b.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4013      	ands	r3, r2
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	bf0c      	ite	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	2300      	movne	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d0b4      	beq.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	88fa      	ldrh	r2, [r7, #6]
 8004fe2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2222      	movs	r2, #34	@ 0x22
 8004ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800500e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0220 	orr.w	r2, r2, #32
 800502e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800503e:	b480      	push	{r7}
 8005040:	b095      	sub	sp, #84	@ 0x54
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800505c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	330c      	adds	r3, #12
 8005064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005066:	643a      	str	r2, [r7, #64]	@ 0x40
 8005068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800506c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e5      	bne.n	8005046 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3314      	adds	r3, #20
 8005080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	61fb      	str	r3, [r7, #28]
   return(result);
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800509a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e5      	bne.n	800507a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d119      	bne.n	80050ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f023 0310 	bic.w	r3, r3, #16
 80050cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050d6:	61ba      	str	r2, [r7, #24]
 80050d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6979      	ldr	r1, [r7, #20]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	613b      	str	r3, [r7, #16]
   return(result);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e5      	bne.n	80050b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050f8:	bf00      	nop
 80050fa:	3754      	adds	r7, #84	@ 0x54
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f7ff fee4 	bl	8004eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b21      	cmp	r3, #33	@ 0x21
 800513e:	d13e      	bne.n	80051be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005148:	d114      	bne.n	8005174 <UART_Transmit_IT+0x48>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d110      	bne.n	8005174 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005166:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	1c9a      	adds	r2, r3, #2
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]
 8005172:	e008      	b.n	8005186 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	1c59      	adds	r1, r3, #1
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6211      	str	r1, [r2, #32]
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29b      	uxth	r3, r3
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4619      	mov	r1, r3
 8005194:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10f      	bne.n	80051ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e000      	b.n	80051c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051be:	2302      	movs	r3, #2
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fe73 	bl	8004ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	@ 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b22      	cmp	r3, #34	@ 0x22
 800520e:	f040 80ae 	bne.w	800536e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521a:	d117      	bne.n	800524c <UART_Receive_IT+0x50>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d113      	bne.n	800524c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	b29a      	uxth	r2, r3
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	629a      	str	r2, [r3, #40]	@ 0x28
 800524a:	e026      	b.n	800529a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525e:	d007      	beq.n	8005270 <UART_Receive_IT+0x74>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <UART_Receive_IT+0x82>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b2da      	uxtb	r2, r3
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e008      	b.n	8005290 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800528a:	b2da      	uxtb	r2, r3
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4619      	mov	r1, r3
 80052a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d15d      	bne.n	800536a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0220 	bic.w	r2, r2, #32
 80052bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695a      	ldr	r2, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d135      	bne.n	8005360 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	613b      	str	r3, [r7, #16]
   return(result);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f023 0310 	bic.w	r3, r3, #16
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	330c      	adds	r3, #12
 8005318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800531a:	623a      	str	r2, [r7, #32]
 800531c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	69f9      	ldr	r1, [r7, #28]
 8005320:	6a3a      	ldr	r2, [r7, #32]
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	61bb      	str	r3, [r7, #24]
   return(result);
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d10a      	bne.n	8005352 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff fdd1 	bl	8004f00 <HAL_UARTEx_RxEventCallback>
 800535e:	e002      	b.n	8005366 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fb fc9b 	bl	8000c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	e002      	b.n	8005370 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	e000      	b.n	8005370 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800536e:	2302      	movs	r3, #2
  }
}
 8005370:	4618      	mov	r0, r3
 8005372:	3730      	adds	r7, #48	@ 0x30
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800537c:	b0c0      	sub	sp, #256	@ 0x100
 800537e:	af00      	add	r7, sp, #0
 8005380:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005394:	68d9      	ldr	r1, [r3, #12]
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	ea40 0301 	orr.w	r3, r0, r1
 80053a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053d0:	f021 010c 	bic.w	r1, r1, #12
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053de:	430b      	orrs	r3, r1
 80053e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f2:	6999      	ldr	r1, [r3, #24]
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	ea40 0301 	orr.w	r3, r0, r1
 80053fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b8f      	ldr	r3, [pc, #572]	@ (8005644 <UART_SetConfig+0x2cc>)
 8005408:	429a      	cmp	r2, r3
 800540a:	d005      	beq.n	8005418 <UART_SetConfig+0xa0>
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b8d      	ldr	r3, [pc, #564]	@ (8005648 <UART_SetConfig+0x2d0>)
 8005414:	429a      	cmp	r2, r3
 8005416:	d104      	bne.n	8005422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005418:	f7fd fdd4 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 800541c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005420:	e003      	b.n	800542a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005422:	f7fd fdbb 	bl	8002f9c <HAL_RCC_GetPCLK1Freq>
 8005426:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005434:	f040 810c 	bne.w	8005650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543c:	2200      	movs	r2, #0
 800543e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005442:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800544a:	4622      	mov	r2, r4
 800544c:	462b      	mov	r3, r5
 800544e:	1891      	adds	r1, r2, r2
 8005450:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005452:	415b      	adcs	r3, r3
 8005454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800545a:	4621      	mov	r1, r4
 800545c:	eb12 0801 	adds.w	r8, r2, r1
 8005460:	4629      	mov	r1, r5
 8005462:	eb43 0901 	adc.w	r9, r3, r1
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800547a:	4690      	mov	r8, r2
 800547c:	4699      	mov	r9, r3
 800547e:	4623      	mov	r3, r4
 8005480:	eb18 0303 	adds.w	r3, r8, r3
 8005484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005488:	462b      	mov	r3, r5
 800548a:	eb49 0303 	adc.w	r3, r9, r3
 800548e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800549e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054a6:	460b      	mov	r3, r1
 80054a8:	18db      	adds	r3, r3, r3
 80054aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ac:	4613      	mov	r3, r2
 80054ae:	eb42 0303 	adc.w	r3, r2, r3
 80054b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80054b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054bc:	f7fa fee0 	bl	8000280 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4b61      	ldr	r3, [pc, #388]	@ (800564c <UART_SetConfig+0x2d4>)
 80054c6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	011c      	lsls	r4, r3, #4
 80054ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054e8:	415b      	adcs	r3, r3
 80054ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054f0:	4641      	mov	r1, r8
 80054f2:	eb12 0a01 	adds.w	sl, r2, r1
 80054f6:	4649      	mov	r1, r9
 80054f8:	eb43 0b01 	adc.w	fp, r3, r1
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800550c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005510:	4692      	mov	sl, r2
 8005512:	469b      	mov	fp, r3
 8005514:	4643      	mov	r3, r8
 8005516:	eb1a 0303 	adds.w	r3, sl, r3
 800551a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800551e:	464b      	mov	r3, r9
 8005520:	eb4b 0303 	adc.w	r3, fp, r3
 8005524:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005534:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800553c:	460b      	mov	r3, r1
 800553e:	18db      	adds	r3, r3, r3
 8005540:	643b      	str	r3, [r7, #64]	@ 0x40
 8005542:	4613      	mov	r3, r2
 8005544:	eb42 0303 	adc.w	r3, r2, r3
 8005548:	647b      	str	r3, [r7, #68]	@ 0x44
 800554a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800554e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005552:	f7fa fe95 	bl	8000280 <__aeabi_uldivmod>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4611      	mov	r1, r2
 800555c:	4b3b      	ldr	r3, [pc, #236]	@ (800564c <UART_SetConfig+0x2d4>)
 800555e:	fba3 2301 	umull	r2, r3, r3, r1
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	2264      	movs	r2, #100	@ 0x64
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	1acb      	subs	r3, r1, r3
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005572:	4b36      	ldr	r3, [pc, #216]	@ (800564c <UART_SetConfig+0x2d4>)
 8005574:	fba3 2302 	umull	r2, r3, r3, r2
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005580:	441c      	add	r4, r3
 8005582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005586:	2200      	movs	r2, #0
 8005588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800558c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	1891      	adds	r1, r2, r2
 800559a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800559c:	415b      	adcs	r3, r3
 800559e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055a4:	4641      	mov	r1, r8
 80055a6:	1851      	adds	r1, r2, r1
 80055a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80055aa:	4649      	mov	r1, r9
 80055ac:	414b      	adcs	r3, r1
 80055ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055bc:	4659      	mov	r1, fp
 80055be:	00cb      	lsls	r3, r1, #3
 80055c0:	4651      	mov	r1, sl
 80055c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055c6:	4651      	mov	r1, sl
 80055c8:	00ca      	lsls	r2, r1, #3
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	4603      	mov	r3, r0
 80055d0:	4642      	mov	r2, r8
 80055d2:	189b      	adds	r3, r3, r2
 80055d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055d8:	464b      	mov	r3, r9
 80055da:	460a      	mov	r2, r1
 80055dc:	eb42 0303 	adc.w	r3, r2, r3
 80055e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055f8:	460b      	mov	r3, r1
 80055fa:	18db      	adds	r3, r3, r3
 80055fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055fe:	4613      	mov	r3, r2
 8005600:	eb42 0303 	adc.w	r3, r2, r3
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800560a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800560e:	f7fa fe37 	bl	8000280 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <UART_SetConfig+0x2d4>)
 8005618:	fba3 1302 	umull	r1, r3, r3, r2
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	2164      	movs	r1, #100	@ 0x64
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	3332      	adds	r3, #50	@ 0x32
 800562a:	4a08      	ldr	r2, [pc, #32]	@ (800564c <UART_SetConfig+0x2d4>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 0207 	and.w	r2, r3, #7
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4422      	add	r2, r4
 800563e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005640:	e106      	b.n	8005850 <UART_SetConfig+0x4d8>
 8005642:	bf00      	nop
 8005644:	40011000 	.word	0x40011000
 8005648:	40011400 	.word	0x40011400
 800564c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800565a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800565e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005662:	4642      	mov	r2, r8
 8005664:	464b      	mov	r3, r9
 8005666:	1891      	adds	r1, r2, r2
 8005668:	6239      	str	r1, [r7, #32]
 800566a:	415b      	adcs	r3, r3
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
 800566e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005672:	4641      	mov	r1, r8
 8005674:	1854      	adds	r4, r2, r1
 8005676:	4649      	mov	r1, r9
 8005678:	eb43 0501 	adc.w	r5, r3, r1
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	00eb      	lsls	r3, r5, #3
 8005686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568a:	00e2      	lsls	r2, r4, #3
 800568c:	4614      	mov	r4, r2
 800568e:	461d      	mov	r5, r3
 8005690:	4643      	mov	r3, r8
 8005692:	18e3      	adds	r3, r4, r3
 8005694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005698:	464b      	mov	r3, r9
 800569a:	eb45 0303 	adc.w	r3, r5, r3
 800569e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056be:	4629      	mov	r1, r5
 80056c0:	008b      	lsls	r3, r1, #2
 80056c2:	4621      	mov	r1, r4
 80056c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c8:	4621      	mov	r1, r4
 80056ca:	008a      	lsls	r2, r1, #2
 80056cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056d0:	f7fa fdd6 	bl	8000280 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4b60      	ldr	r3, [pc, #384]	@ (800585c <UART_SetConfig+0x4e4>)
 80056da:	fba3 2302 	umull	r2, r3, r3, r2
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	011c      	lsls	r4, r3, #4
 80056e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	61b9      	str	r1, [r7, #24]
 80056fc:	415b      	adcs	r3, r3
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005704:	4641      	mov	r1, r8
 8005706:	1851      	adds	r1, r2, r1
 8005708:	6139      	str	r1, [r7, #16]
 800570a:	4649      	mov	r1, r9
 800570c:	414b      	adcs	r3, r1
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800571c:	4659      	mov	r1, fp
 800571e:	00cb      	lsls	r3, r1, #3
 8005720:	4651      	mov	r1, sl
 8005722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005726:	4651      	mov	r1, sl
 8005728:	00ca      	lsls	r2, r1, #3
 800572a:	4610      	mov	r0, r2
 800572c:	4619      	mov	r1, r3
 800572e:	4603      	mov	r3, r0
 8005730:	4642      	mov	r2, r8
 8005732:	189b      	adds	r3, r3, r2
 8005734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005738:	464b      	mov	r3, r9
 800573a:	460a      	mov	r2, r1
 800573c:	eb42 0303 	adc.w	r3, r2, r3
 8005740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800574e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800575c:	4649      	mov	r1, r9
 800575e:	008b      	lsls	r3, r1, #2
 8005760:	4641      	mov	r1, r8
 8005762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005766:	4641      	mov	r1, r8
 8005768:	008a      	lsls	r2, r1, #2
 800576a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800576e:	f7fa fd87 	bl	8000280 <__aeabi_uldivmod>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4611      	mov	r1, r2
 8005778:	4b38      	ldr	r3, [pc, #224]	@ (800585c <UART_SetConfig+0x4e4>)
 800577a:	fba3 2301 	umull	r2, r3, r3, r1
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2264      	movs	r2, #100	@ 0x64
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	1acb      	subs	r3, r1, r3
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	3332      	adds	r3, #50	@ 0x32
 800578c:	4a33      	ldr	r2, [pc, #204]	@ (800585c <UART_SetConfig+0x4e4>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005798:	441c      	add	r4, r3
 800579a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579e:	2200      	movs	r2, #0
 80057a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80057a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80057a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	415b      	adcs	r3, r3
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057b8:	4641      	mov	r1, r8
 80057ba:	1851      	adds	r1, r2, r1
 80057bc:	6039      	str	r1, [r7, #0]
 80057be:	4649      	mov	r1, r9
 80057c0:	414b      	adcs	r3, r1
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057d0:	4659      	mov	r1, fp
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4651      	mov	r1, sl
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4642      	mov	r2, r8
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ea:	464b      	mov	r3, r9
 80057ec:	460a      	mov	r2, r1
 80057ee:	eb42 0303 	adc.w	r3, r2, r3
 80057f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80057fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800580c:	4649      	mov	r1, r9
 800580e:	008b      	lsls	r3, r1, #2
 8005810:	4641      	mov	r1, r8
 8005812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005816:	4641      	mov	r1, r8
 8005818:	008a      	lsls	r2, r1, #2
 800581a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800581e:	f7fa fd2f 	bl	8000280 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <UART_SetConfig+0x4e4>)
 8005828:	fba3 1302 	umull	r1, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2164      	movs	r1, #100	@ 0x64
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	3332      	adds	r3, #50	@ 0x32
 800583a:	4a08      	ldr	r2, [pc, #32]	@ (800585c <UART_SetConfig+0x4e4>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4422      	add	r2, r4
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585c:	51eb851f 	.word	0x51eb851f

08005860 <__NVIC_SetPriority>:
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	6039      	str	r1, [r7, #0]
 800586a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005870:	2b00      	cmp	r3, #0
 8005872:	db0a      	blt.n	800588a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	490c      	ldr	r1, [pc, #48]	@ (80058ac <__NVIC_SetPriority+0x4c>)
 800587a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587e:	0112      	lsls	r2, r2, #4
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	440b      	add	r3, r1
 8005884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005888:	e00a      	b.n	80058a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	4908      	ldr	r1, [pc, #32]	@ (80058b0 <__NVIC_SetPriority+0x50>)
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	3b04      	subs	r3, #4
 8005898:	0112      	lsls	r2, r2, #4
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	440b      	add	r3, r1
 800589e:	761a      	strb	r2, [r3, #24]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	e000e100 	.word	0xe000e100
 80058b0:	e000ed00 	.word	0xe000ed00

080058b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <SysTick_Handler+0x1c>)
 80058ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80058bc:	f002 f880 	bl	80079c0 <xTaskGetSchedulerState>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80058c6:	f002 ff77 	bl	80087b8 <xPortSysTickHandler>
  }
}
 80058ca:	bf00      	nop
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	e000e010 	.word	0xe000e010

080058d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80058d8:	2100      	movs	r1, #0
 80058da:	f06f 0004 	mvn.w	r0, #4
 80058de:	f7ff ffbf 	bl	8005860 <__NVIC_SetPriority>
#endif
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ee:	f3ef 8305 	mrs	r3, IPSR
 80058f2:	603b      	str	r3, [r7, #0]
  return(result);
 80058f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058fa:	f06f 0305 	mvn.w	r3, #5
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	e00c      	b.n	800591c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005902:	4b0a      	ldr	r3, [pc, #40]	@ (800592c <osKernelInitialize+0x44>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d105      	bne.n	8005916 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800590a:	4b08      	ldr	r3, [pc, #32]	@ (800592c <osKernelInitialize+0x44>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005910:	2300      	movs	r3, #0
 8005912:	607b      	str	r3, [r7, #4]
 8005914:	e002      	b.n	800591c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800591c:	687b      	ldr	r3, [r7, #4]
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	2000035c 	.word	0x2000035c

08005930 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005936:	f3ef 8305 	mrs	r3, IPSR
 800593a:	603b      	str	r3, [r7, #0]
  return(result);
 800593c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005942:	f06f 0305 	mvn.w	r3, #5
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	e010      	b.n	800596c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800594a:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <osKernelStart+0x48>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d109      	bne.n	8005966 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005952:	f7ff ffbf 	bl	80058d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005956:	4b08      	ldr	r3, [pc, #32]	@ (8005978 <osKernelStart+0x48>)
 8005958:	2202      	movs	r2, #2
 800595a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800595c:	f001 fbbc 	bl	80070d8 <vTaskStartScheduler>
      stat = osOK;
 8005960:	2300      	movs	r3, #0
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	e002      	b.n	800596c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800596c:	687b      	ldr	r3, [r7, #4]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	2000035c 	.word	0x2000035c

0800597c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	@ 0x38
 8005980:	af04      	add	r7, sp, #16
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800598c:	f3ef 8305 	mrs	r3, IPSR
 8005990:	617b      	str	r3, [r7, #20]
  return(result);
 8005992:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005994:	2b00      	cmp	r3, #0
 8005996:	d17e      	bne.n	8005a96 <osThreadNew+0x11a>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d07b      	beq.n	8005a96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800599e:	2380      	movs	r3, #128	@ 0x80
 80059a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059a2:	2318      	movs	r3, #24
 80059a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80059aa:	f04f 33ff 	mov.w	r3, #4294967295
 80059ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d045      	beq.n	8005a42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <osThreadNew+0x48>
        name = attr->name;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <osThreadNew+0x6e>
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	2b38      	cmp	r3, #56	@ 0x38
 80059dc:	d805      	bhi.n	80059ea <osThreadNew+0x6e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <osThreadNew+0x72>
        return (NULL);
 80059ea:	2300      	movs	r3, #0
 80059ec:	e054      	b.n	8005a98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <osThreadNew+0xa8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2ba7      	cmp	r3, #167	@ 0xa7
 8005a0c:	d90a      	bls.n	8005a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <osThreadNew+0xa8>
        mem = 1;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e010      	b.n	8005a46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10c      	bne.n	8005a46 <osThreadNew+0xca>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d108      	bne.n	8005a46 <osThreadNew+0xca>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <osThreadNew+0xca>
          mem = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	e001      	b.n	8005a46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d110      	bne.n	8005a6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a54:	9202      	str	r2, [sp, #8]
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6a3a      	ldr	r2, [r7, #32]
 8005a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f001 f944 	bl	8006cf0 <xTaskCreateStatic>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	e013      	b.n	8005a96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d110      	bne.n	8005a96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	f107 0310 	add.w	r3, r7, #16
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f001 f992 	bl	8006db0 <xTaskCreate>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d001      	beq.n	8005a96 <osThreadNew+0x11a>
            hTask = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a96:	693b      	ldr	r3, [r7, #16]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3728      	adds	r7, #40	@ 0x28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa8:	f3ef 8305 	mrs	r3, IPSR
 8005aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <osDelay+0x1c>
    stat = osErrorISR;
 8005ab4:	f06f 0305 	mvn.w	r3, #5
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e007      	b.n	8005acc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <osDelay+0x2c>
      vTaskDelay(ticks);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 fad0 	bl	800706c <vTaskDelay>
    }
  }

  return (stat);
 8005acc:	68fb      	ldr	r3, [r7, #12]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b088      	sub	sp, #32
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae2:	f3ef 8305 	mrs	r3, IPSR
 8005ae6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ae8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d174      	bne.n	8005bd8 <osMutexNew+0x102>
    if (attr != NULL) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <osMutexNew+0x26>
      type = attr->attr_bits;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	e001      	b.n	8005b00 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <osMutexNew+0x3a>
      rmtx = 1U;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e001      	b.n	8005b14 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d15c      	bne.n	8005bd8 <osMutexNew+0x102>
      mem = -1;
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b22:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d015      	beq.n	8005b56 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d006      	beq.n	8005b40 <osMutexNew+0x6a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b38:	d902      	bls.n	8005b40 <osMutexNew+0x6a>
          mem = 1;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e00c      	b.n	8005b5a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d108      	bne.n	8005b5a <osMutexNew+0x84>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <osMutexNew+0x84>
            mem = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e001      	b.n	8005b5a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d112      	bne.n	8005b86 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	2004      	movs	r0, #4
 8005b6e:	f000 fb20 	bl	80061b2 <xQueueCreateMutexStatic>
 8005b72:	61f8      	str	r0, [r7, #28]
 8005b74:	e016      	b.n	8005ba4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	f000 fb18 	bl	80061b2 <xQueueCreateMutexStatic>
 8005b82:	61f8      	str	r0, [r7, #28]
 8005b84:	e00e      	b.n	8005ba4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005b92:	2004      	movs	r0, #4
 8005b94:	f000 faf5 	bl	8006182 <xQueueCreateMutex>
 8005b98:	61f8      	str	r0, [r7, #28]
 8005b9a:	e003      	b.n	8005ba4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f000 faf0 	bl	8006182 <xQueueCreateMutex>
 8005ba2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <osMutexNew+0xee>
        if (attr != NULL) {
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <osMutexNew+0xe2>
          name = attr->name;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e001      	b.n	8005bbc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005bbc:	68f9      	ldr	r1, [r7, #12]
 8005bbe:	69f8      	ldr	r0, [r7, #28]
 8005bc0:	f001 f838 	bl	8006c34 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d006      	beq.n	8005bd8 <osMutexNew+0x102>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005bd8:	69fb      	ldr	r3, [r7, #28]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c00:	f3ef 8305 	mrs	r3, IPSR
 8005c04:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c06:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005c0c:	f06f 0305 	mvn.w	r3, #5
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e02c      	b.n	8005c6e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005c1a:	f06f 0303 	mvn.w	r3, #3
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e025      	b.n	8005c6e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d011      	beq.n	8005c4c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6938      	ldr	r0, [r7, #16]
 8005c2c:	f000 fb11 	bl	8006252 <xQueueTakeMutexRecursive>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d01b      	beq.n	8005c6e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005c3c:	f06f 0301 	mvn.w	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	e014      	b.n	8005c6e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c44:	f06f 0302 	mvn.w	r3, #2
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e010      	b.n	8005c6e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6938      	ldr	r0, [r7, #16]
 8005c50:	f000 fdb8 	bl	80067c4 <xQueueSemaphoreTake>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d009      	beq.n	8005c6e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005c60:	f06f 0301 	mvn.w	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e002      	b.n	8005c6e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c68:	f06f 0302 	mvn.w	r3, #2
 8005c6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005c6e:	697b      	ldr	r3, [r7, #20]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c94:	f3ef 8305 	mrs	r3, IPSR
 8005c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c9a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005ca0:	f06f 0305 	mvn.w	r3, #5
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e01f      	b.n	8005ce8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d103      	bne.n	8005cb6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005cae:	f06f 0303 	mvn.w	r3, #3
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e018      	b.n	8005ce8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005cbc:	6938      	ldr	r0, [r7, #16]
 8005cbe:	f000 fa93 	bl	80061e8 <xQueueGiveMutexRecursive>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d00f      	beq.n	8005ce8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005cc8:	f06f 0302 	mvn.w	r3, #2
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e00b      	b.n	8005ce8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	6938      	ldr	r0, [r7, #16]
 8005cd8:	f000 faf2 	bl	80062c0 <xQueueGenericSend>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d002      	beq.n	8005ce8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005ce2:	f06f 0302 	mvn.w	r3, #2
 8005ce6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ce8:	697b      	ldr	r3, [r7, #20]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4a07      	ldr	r2, [pc, #28]	@ (8005d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4a06      	ldr	r2, [pc, #24]	@ (8005d24 <vApplicationGetIdleTaskMemory+0x30>)
 8005d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2280      	movs	r2, #128	@ 0x80
 8005d10:	601a      	str	r2, [r3, #0]
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000360 	.word	0x20000360
 8005d24:	20000408 	.word	0x20000408

08005d28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4a07      	ldr	r2, [pc, #28]	@ (8005d54 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	4a06      	ldr	r2, [pc, #24]	@ (8005d58 <vApplicationGetTimerTaskMemory+0x30>)
 8005d3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d46:	601a      	str	r2, [r3, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20000608 	.word	0x20000608
 8005d58:	200006b0 	.word	0x200006b0

08005d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f103 0208 	add.w	r2, r3, #8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f04f 32ff 	mov.w	r2, #4294967295
 8005d74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f103 0208 	add.w	r2, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f103 0208 	add.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d103      	bne.n	8005e1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e00c      	b.n	8005e38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3308      	adds	r3, #8
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e002      	b.n	8005e2c <vListInsert+0x2e>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d2f6      	bcs.n	8005e26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6892      	ldr	r2, [r2, #8]
 8005e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6852      	ldr	r2, [r2, #4]
 8005e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d103      	bne.n	8005ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1e5a      	subs	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10b      	bne.n	8005ef0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ef0:	f002 fbd2 	bl	8008698 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efc:	68f9      	ldr	r1, [r7, #12]
 8005efe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	3b01      	subs	r3, #1
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	441a      	add	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	22ff      	movs	r2, #255	@ 0xff
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	22ff      	movs	r2, #255	@ 0xff
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d114      	bne.n	8005f70 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01a      	beq.n	8005f84 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3310      	adds	r3, #16
 8005f52:	4618      	mov	r0, r3
 8005f54:	f001 fb5e 	bl	8007614 <xTaskRemoveFromEventList>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d012      	beq.n	8005f84 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f94 <xQueueGenericReset+0xd0>)
 8005f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	e009      	b.n	8005f84 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3310      	adds	r3, #16
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff fef1 	bl	8005d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3324      	adds	r3, #36	@ 0x24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff feec 	bl	8005d5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f84:	f002 fbba 	bl	80086fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f88:	2301      	movs	r3, #1
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08e      	sub	sp, #56	@ 0x38
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <xQueueGenericCreateStatic+0x56>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <xQueueGenericCreateStatic+0x5a>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueGenericCreateStatic+0x5c>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	623b      	str	r3, [r7, #32]
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	e7fd      	b.n	800600c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <xQueueGenericCreateStatic+0x84>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <xQueueGenericCreateStatic+0x88>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <xQueueGenericCreateStatic+0x8a>
 8006020:	2300      	movs	r3, #0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	61fb      	str	r3, [r7, #28]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800603e:	2350      	movs	r3, #80	@ 0x50
 8006040:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b50      	cmp	r3, #80	@ 0x50
 8006046:	d00b      	beq.n	8006060 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	61bb      	str	r3, [r7, #24]
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	e7fd      	b.n	800605c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006060:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00d      	beq.n	8006088 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006074:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f840 	bl	8006108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800608a:	4618      	mov	r0, r3
 800608c:	3730      	adds	r7, #48	@ 0x30
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006092:	b580      	push	{r7, lr}
 8006094:	b08a      	sub	sp, #40	@ 0x28
 8006096:	af02      	add	r7, sp, #8
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	4613      	mov	r3, r2
 800609e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <xQueueGenericCreate+0x2c>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	613b      	str	r3, [r7, #16]
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	e7fd      	b.n	80060ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	3350      	adds	r3, #80	@ 0x50
 80060cc:	4618      	mov	r0, r3
 80060ce:	f002 fc05 	bl	80088dc <pvPortMalloc>
 80060d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d011      	beq.n	80060fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	3350      	adds	r3, #80	@ 0x50
 80060e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060ec:	79fa      	ldrb	r2, [r7, #7]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	4613      	mov	r3, r2
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f805 	bl	8006108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d103      	bne.n	8006124 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	e002      	b.n	800612a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006136:	2101      	movs	r1, #1
 8006138:	69b8      	ldr	r0, [r7, #24]
 800613a:	f7ff fec3 	bl	8005ec4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00e      	beq.n	800617a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800616e:	2300      	movs	r3, #0
 8006170:	2200      	movs	r2, #0
 8006172:	2100      	movs	r1, #0
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8a3 	bl	80062c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006182:	b580      	push	{r7, lr}
 8006184:	b086      	sub	sp, #24
 8006186:	af00      	add	r7, sp, #0
 8006188:	4603      	mov	r3, r0
 800618a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800618c:	2301      	movs	r3, #1
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	2300      	movs	r3, #0
 8006192:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	461a      	mov	r2, r3
 8006198:	6939      	ldr	r1, [r7, #16]
 800619a:	6978      	ldr	r0, [r7, #20]
 800619c:	f7ff ff79 	bl	8006092 <xQueueGenericCreate>
 80061a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff ffd3 	bl	800614e <prvInitialiseMutex>

		return xNewQueue;
 80061a8:	68fb      	ldr	r3, [r7, #12]
	}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b088      	sub	sp, #32
 80061b6:	af02      	add	r7, sp, #8
 80061b8:	4603      	mov	r3, r0
 80061ba:	6039      	str	r1, [r7, #0]
 80061bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061be:	2301      	movs	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	2300      	movs	r3, #0
 80061c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2200      	movs	r2, #0
 80061ce:	6939      	ldr	r1, [r7, #16]
 80061d0:	6978      	ldr	r0, [r7, #20]
 80061d2:	f7ff fee1 	bl	8005f98 <xQueueGenericCreateStatic>
 80061d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff ffb8 	bl	800614e <prvInitialiseMutex>

		return xNewQueue;
 80061de:	68fb      	ldr	r3, [r7, #12]
	}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	60fb      	str	r3, [r7, #12]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	689c      	ldr	r4, [r3, #8]
 8006216:	f001 fbc3 	bl	80079a0 <xTaskGetCurrentTaskHandle>
 800621a:	4603      	mov	r3, r0
 800621c:	429c      	cmp	r4, r3
 800621e:	d111      	bne.n	8006244 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	1e5a      	subs	r2, r3, #1
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006232:	2300      	movs	r3, #0
 8006234:	2200      	movs	r2, #0
 8006236:	2100      	movs	r1, #0
 8006238:	6938      	ldr	r0, [r7, #16]
 800623a:	f000 f841 	bl	80062c0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800623e:	2301      	movs	r3, #1
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	e001      	b.n	8006248 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006248:	697b      	ldr	r3, [r7, #20]
	}
 800624a:	4618      	mov	r0, r3
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	bd90      	pop	{r4, r7, pc}

08006252 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006252:	b590      	push	{r4, r7, lr}
 8006254:	b087      	sub	sp, #28
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10b      	bne.n	800627e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60fb      	str	r3, [r7, #12]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	689c      	ldr	r4, [r3, #8]
 8006282:	f001 fb8d 	bl	80079a0 <xTaskGetCurrentTaskHandle>
 8006286:	4603      	mov	r3, r0
 8006288:	429c      	cmp	r4, r3
 800628a:	d107      	bne.n	800629c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006296:	2301      	movs	r3, #1
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	e00c      	b.n	80062b6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6938      	ldr	r0, [r7, #16]
 80062a0:	f000 fa90 	bl	80067c4 <xQueueSemaphoreTake>
 80062a4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80062b6:	697b      	ldr	r3, [r7, #20]
	}
 80062b8:	4618      	mov	r0, r3
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd90      	pop	{r4, r7, pc}

080062c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08e      	sub	sp, #56	@ 0x38
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062ce:	2300      	movs	r3, #0
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <xQueueGenericSend+0x34>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <xQueueGenericSend+0x42>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <xQueueGenericSend+0x46>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <xQueueGenericSend+0x48>
 8006306:	2300      	movs	r3, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <xQueueGenericSend+0x64>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d103      	bne.n	8006332 <xQueueGenericSend+0x72>
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <xQueueGenericSend+0x76>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <xQueueGenericSend+0x78>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10b      	bne.n	8006354 <xQueueGenericSend+0x94>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	623b      	str	r3, [r7, #32]
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006354:	f001 fb34 	bl	80079c0 <xTaskGetSchedulerState>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <xQueueGenericSend+0xa4>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <xQueueGenericSend+0xa8>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <xQueueGenericSend+0xaa>
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <xQueueGenericSend+0xc6>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	61fb      	str	r3, [r7, #28]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006386:	f002 f987 	bl	8008698 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	429a      	cmp	r2, r3
 8006394:	d302      	bcc.n	800639c <xQueueGenericSend+0xdc>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d129      	bne.n	80063f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063a2:	f000 fb37 	bl	8006a14 <prvCopyDataToQueue>
 80063a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d010      	beq.n	80063d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	3324      	adds	r3, #36	@ 0x24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 f92d 	bl	8007614 <xTaskRemoveFromEventList>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d013      	beq.n	80063e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063c0:	4b3f      	ldr	r3, [pc, #252]	@ (80064c0 <xQueueGenericSend+0x200>)
 80063c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	e00a      	b.n	80063e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80063d8:	4b39      	ldr	r3, [pc, #228]	@ (80064c0 <xQueueGenericSend+0x200>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063e8:	f002 f988 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e063      	b.n	80064b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063f6:	f002 f981 	bl	80086fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e05c      	b.n	80064b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006404:	f107 0314 	add.w	r3, r7, #20
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f967 	bl	80076dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800640e:	2301      	movs	r3, #1
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006412:	f002 f973 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006416:	f000 fecf 	bl	80071b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800641a:	f002 f93d 	bl	8008698 <vPortEnterCritical>
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006424:	b25b      	sxtb	r3, r3
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d103      	bne.n	8006434 <xQueueGenericSend+0x174>
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800643a:	b25b      	sxtb	r3, r3
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d103      	bne.n	800644a <xQueueGenericSend+0x18a>
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800644a:	f002 f957 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800644e:	1d3a      	adds	r2, r7, #4
 8006450:	f107 0314 	add.w	r3, r7, #20
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f001 f956 	bl	8007708 <xTaskCheckForTimeOut>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d124      	bne.n	80064ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006462:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006464:	f000 fbce 	bl	8006c04 <prvIsQueueFull>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	3310      	adds	r3, #16
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f001 f87a 	bl	8007570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800647c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800647e:	f000 fb59 	bl	8006b34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006482:	f000 fea7 	bl	80071d4 <xTaskResumeAll>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f af7c 	bne.w	8006386 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800648e:	4b0c      	ldr	r3, [pc, #48]	@ (80064c0 <xQueueGenericSend+0x200>)
 8006490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	e772      	b.n	8006386 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064a2:	f000 fb47 	bl	8006b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064a6:	f000 fe95 	bl	80071d4 <xTaskResumeAll>
 80064aa:	e76c      	b.n	8006386 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ae:	f000 fb41 	bl	8006b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064b2:	f000 fe8f 	bl	80071d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3738      	adds	r7, #56	@ 0x38
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b090      	sub	sp, #64	@ 0x40
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d103      	bne.n	8006502 <xQueueGenericSendFromISR+0x3e>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <xQueueGenericSendFromISR+0x42>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <xQueueGenericSendFromISR+0x44>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d103      	bne.n	8006532 <xQueueGenericSendFromISR+0x6e>
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <xQueueGenericSendFromISR+0x72>
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <xQueueGenericSendFromISR+0x74>
 8006536:	2300      	movs	r3, #0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	623b      	str	r3, [r7, #32]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006554:	f002 f980 	bl	8008858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006558:	f3ef 8211 	mrs	r2, BASEPRI
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	61fa      	str	r2, [r7, #28]
 800656e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006570:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006572:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <xQueueGenericSendFromISR+0xc2>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d12f      	bne.n	80065e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800658c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800659c:	f000 fa3a 	bl	8006a14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d112      	bne.n	80065d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d016      	beq.n	80065e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b4:	3324      	adds	r3, #36	@ 0x24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 f82c 	bl	8007614 <xTaskRemoveFromEventList>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00e      	beq.n	80065e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e007      	b.n	80065e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80065d4:	3301      	adds	r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	b25a      	sxtb	r2, r3
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80065e0:	2301      	movs	r3, #1
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80065e4:	e001      	b.n	80065ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3740      	adds	r7, #64	@ 0x40
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	@ 0x30
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800660c:	2300      	movs	r3, #0
 800660e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <xQueueReceive+0x32>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	623b      	str	r3, [r7, #32]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <xQueueReceive+0x40>
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <xQueueReceive+0x44>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <xQueueReceive+0x46>
 8006644:	2300      	movs	r3, #0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <xQueueReceive+0x62>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	61fb      	str	r3, [r7, #28]
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006662:	f001 f9ad 	bl	80079c0 <xTaskGetSchedulerState>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <xQueueReceive+0x72>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <xQueueReceive+0x76>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <xQueueReceive+0x78>
 8006676:	2300      	movs	r3, #0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10b      	bne.n	8006694 <xQueueReceive+0x94>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	61bb      	str	r3, [r7, #24]
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	e7fd      	b.n	8006690 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006694:	f002 f800 	bl	8008698 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01f      	beq.n	80066e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a8:	f000 fa1e 	bl	8006ae8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	1e5a      	subs	r2, r3, #1
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00f      	beq.n	80066dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	3310      	adds	r3, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 ffa7 	bl	8007614 <xTaskRemoveFromEventList>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066cc:	4b3c      	ldr	r3, [pc, #240]	@ (80067c0 <xQueueReceive+0x1c0>)
 80066ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066dc:	f002 f80e 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e069      	b.n	80067b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066ea:	f002 f807 	bl	80086fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e062      	b.n	80067b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066f8:	f107 0310 	add.w	r3, r7, #16
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 ffed 	bl	80076dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006702:	2301      	movs	r3, #1
 8006704:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006706:	f001 fff9 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800670a:	f000 fd55 	bl	80071b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800670e:	f001 ffc3 	bl	8008698 <vPortEnterCritical>
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006718:	b25b      	sxtb	r3, r3
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671e:	d103      	bne.n	8006728 <xQueueReceive+0x128>
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800672e:	b25b      	sxtb	r3, r3
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d103      	bne.n	800673e <xQueueReceive+0x13e>
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800673e:	f001 ffdd 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006742:	1d3a      	adds	r2, r7, #4
 8006744:	f107 0310 	add.w	r3, r7, #16
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f000 ffdc 	bl	8007708 <xTaskCheckForTimeOut>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d123      	bne.n	800679e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006758:	f000 fa3e 	bl	8006bd8 <prvIsQueueEmpty>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d017      	beq.n	8006792 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	3324      	adds	r3, #36	@ 0x24
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	4611      	mov	r1, r2
 800676a:	4618      	mov	r0, r3
 800676c:	f000 ff00 	bl	8007570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006772:	f000 f9df 	bl	8006b34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006776:	f000 fd2d 	bl	80071d4 <xTaskResumeAll>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d189      	bne.n	8006694 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006780:	4b0f      	ldr	r3, [pc, #60]	@ (80067c0 <xQueueReceive+0x1c0>)
 8006782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	e780      	b.n	8006694 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006794:	f000 f9ce 	bl	8006b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006798:	f000 fd1c 	bl	80071d4 <xTaskResumeAll>
 800679c:	e77a      	b.n	8006694 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800679e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a0:	f000 f9c8 	bl	8006b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067a4:	f000 fd16 	bl	80071d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067aa:	f000 fa15 	bl	8006bd8 <prvIsQueueEmpty>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f43f af6f 	beq.w	8006694 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3730      	adds	r7, #48	@ 0x30
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	e000ed04 	.word	0xe000ed04

080067c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08e      	sub	sp, #56	@ 0x38
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067d6:	2300      	movs	r3, #0
 80067d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10b      	bne.n	80067f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	623b      	str	r3, [r7, #32]
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	e7fd      	b.n	80067f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	61fb      	str	r3, [r7, #28]
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	e7fd      	b.n	8006814 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006818:	f001 f8d2 	bl	80079c0 <xTaskGetSchedulerState>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <xQueueSemaphoreTake+0x64>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <xQueueSemaphoreTake+0x68>
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <xQueueSemaphoreTake+0x6a>
 800682c:	2300      	movs	r3, #0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	61bb      	str	r3, [r7, #24]
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	e7fd      	b.n	8006846 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800684a:	f001 ff25 	bl	8008698 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	2b00      	cmp	r3, #0
 8006858:	d024      	beq.n	80068a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800685a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685c:	1e5a      	subs	r2, r3, #1
 800685e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006860:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800686a:	f001 fa23 	bl	8007cb4 <pvTaskIncrementMutexHeldCount>
 800686e:	4602      	mov	r2, r0
 8006870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006872:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00f      	beq.n	800689c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	3310      	adds	r3, #16
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fec7 	bl	8007614 <xTaskRemoveFromEventList>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800688c:	4b54      	ldr	r3, [pc, #336]	@ (80069e0 <xQueueSemaphoreTake+0x21c>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800689c:	f001 ff2e 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e098      	b.n	80069d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d112      	bne.n	80068d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	617b      	str	r3, [r7, #20]
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	e7fd      	b.n	80068c4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80068c8:	f001 ff18 	bl	80086fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e082      	b.n	80069d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fefe 	bl	80076dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068e0:	2301      	movs	r3, #1
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068e4:	f001 ff0a 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068e8:	f000 fc66 	bl	80071b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ec:	f001 fed4 	bl	8008698 <vPortEnterCritical>
 80068f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068f6:	b25b      	sxtb	r3, r3
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	d103      	bne.n	8006906 <xQueueSemaphoreTake+0x142>
 80068fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800690c:	b25b      	sxtb	r3, r3
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d103      	bne.n	800691c <xQueueSemaphoreTake+0x158>
 8006914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800691c:	f001 feee 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006920:	463a      	mov	r2, r7
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	4611      	mov	r1, r2
 8006928:	4618      	mov	r0, r3
 800692a:	f000 feed 	bl	8007708 <xTaskCheckForTimeOut>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d132      	bne.n	800699a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006936:	f000 f94f 	bl	8006bd8 <prvIsQueueEmpty>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d026      	beq.n	800698e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006948:	f001 fea6 	bl	8008698 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	4618      	mov	r0, r3
 8006952:	f001 f853 	bl	80079fc <xTaskPriorityInherit>
 8006956:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006958:	f001 fed0 	bl	80086fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	3324      	adds	r3, #36	@ 0x24
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	4611      	mov	r1, r2
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fe03 	bl	8007570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800696a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800696c:	f000 f8e2 	bl	8006b34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006970:	f000 fc30 	bl	80071d4 <xTaskResumeAll>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	f47f af67 	bne.w	800684a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800697c:	4b18      	ldr	r3, [pc, #96]	@ (80069e0 <xQueueSemaphoreTake+0x21c>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	e75d      	b.n	800684a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800698e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006990:	f000 f8d0 	bl	8006b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006994:	f000 fc1e 	bl	80071d4 <xTaskResumeAll>
 8006998:	e757      	b.n	800684a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800699a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800699c:	f000 f8ca 	bl	8006b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069a0:	f000 fc18 	bl	80071d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069a6:	f000 f917 	bl	8006bd8 <prvIsQueueEmpty>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f43f af4c 	beq.w	800684a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00d      	beq.n	80069d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80069b8:	f001 fe6e 	bl	8008698 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80069bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069be:	f000 f811 	bl	80069e4 <prvGetDisinheritPriorityAfterTimeout>
 80069c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 f8ee 	bl	8007bac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80069d0:	f001 fe94 	bl	80086fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3738      	adds	r7, #56	@ 0x38
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	e000ed04 	.word	0xe000ed04

080069e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e001      	b.n	8006a06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a06:	68fb      	ldr	r3, [r7, #12]
	}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10d      	bne.n	8006a4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d14d      	bne.n	8006ad6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 f844 	bl	8007acc <xTaskPriorityDisinherit>
 8006a44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	e043      	b.n	8006ad6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d119      	bne.n	8006a88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6858      	ldr	r0, [r3, #4]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	f002 fb1b 	bl	800909a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	441a      	add	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d32b      	bcc.n	8006ad6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	605a      	str	r2, [r3, #4]
 8006a86:	e026      	b.n	8006ad6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68d8      	ldr	r0, [r3, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a90:	461a      	mov	r2, r3
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	f002 fb01 	bl	800909a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa0:	425b      	negs	r3, r3
 8006aa2:	441a      	add	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d207      	bcs.n	8006ac4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abc:	425b      	negs	r3, r3
 8006abe:	441a      	add	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d105      	bne.n	8006ad6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006ade:	697b      	ldr	r3, [r7, #20]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d018      	beq.n	8006b2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b02:	441a      	add	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d303      	bcc.n	8006b1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68d9      	ldr	r1, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b24:	461a      	mov	r2, r3
 8006b26:	6838      	ldr	r0, [r7, #0]
 8006b28:	f002 fab7 	bl	800909a <memcpy>
	}
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b3c:	f001 fdac 	bl	8008698 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b48:	e011      	b.n	8006b6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d012      	beq.n	8006b78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3324      	adds	r3, #36	@ 0x24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fd5c 	bl	8007614 <xTaskRemoveFromEventList>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b62:	f000 fe35 	bl	80077d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dce9      	bgt.n	8006b4a <prvUnlockQueue+0x16>
 8006b76:	e000      	b.n	8006b7a <prvUnlockQueue+0x46>
					break;
 8006b78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	22ff      	movs	r2, #255	@ 0xff
 8006b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006b82:	f001 fdbb 	bl	80086fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b86:	f001 fd87 	bl	8008698 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b92:	e011      	b.n	8006bb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d012      	beq.n	8006bc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3310      	adds	r3, #16
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fd37 	bl	8007614 <xTaskRemoveFromEventList>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006bac:	f000 fe10 	bl	80077d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dce9      	bgt.n	8006b94 <prvUnlockQueue+0x60>
 8006bc0:	e000      	b.n	8006bc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	22ff      	movs	r2, #255	@ 0xff
 8006bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006bcc:	f001 fd96 	bl	80086fc <vPortExitCritical>
}
 8006bd0:	bf00      	nop
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006be0:	f001 fd5a 	bl	8008698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e001      	b.n	8006bf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bf6:	f001 fd81 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c0c:	f001 fd44 	bl	8008698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d102      	bne.n	8006c22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e001      	b.n	8006c26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c26:	f001 fd69 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e014      	b.n	8006c6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c44:	4a0f      	ldr	r2, [pc, #60]	@ (8006c84 <vQueueAddToRegistry+0x50>)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c50:	490c      	ldr	r1, [pc, #48]	@ (8006c84 <vQueueAddToRegistry+0x50>)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c84 <vQueueAddToRegistry+0x50>)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4413      	add	r3, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c66:	e006      	b.n	8006c76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b07      	cmp	r3, #7
 8006c72:	d9e7      	bls.n	8006c44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000ab0 	.word	0x20000ab0

08006c88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c98:	f001 fcfe 	bl	8008698 <vPortEnterCritical>
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ca2:	b25b      	sxtb	r3, r3
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d103      	bne.n	8006cb2 <vQueueWaitForMessageRestricted+0x2a>
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cb8:	b25b      	sxtb	r3, r3
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d103      	bne.n	8006cc8 <vQueueWaitForMessageRestricted+0x40>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cc8:	f001 fd18 	bl	80086fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d106      	bne.n	8006ce2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	3324      	adds	r3, #36	@ 0x24
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fc6d 	bl	80075bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ce2:	6978      	ldr	r0, [r7, #20]
 8006ce4:	f7ff ff26 	bl	8006b34 <prvUnlockQueue>
	}
 8006ce8:	bf00      	nop
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	@ 0x38
 8006cf4:	af04      	add	r7, sp, #16
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10b      	bne.n	8006d1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	623b      	str	r3, [r7, #32]
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	61fb      	str	r3, [r7, #28]
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	e7fd      	b.n	8006d36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d3a:	23a8      	movs	r3, #168	@ 0xa8
 8006d3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2ba8      	cmp	r3, #168	@ 0xa8
 8006d42:	d00b      	beq.n	8006d5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	61bb      	str	r3, [r7, #24]
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	e7fd      	b.n	8006d58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01e      	beq.n	8006da2 <xTaskCreateStatic+0xb2>
 8006d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01b      	beq.n	8006da2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	9302      	str	r3, [sp, #8]
 8006d84:	f107 0314 	add.w	r3, r7, #20
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f851 	bl	8006e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d9c:	f000 f8f6 	bl	8006f8c <prvAddNewTaskToReadyList>
 8006da0:	e001      	b.n	8006da6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006da6:	697b      	ldr	r3, [r7, #20]
	}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3728      	adds	r7, #40	@ 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	@ 0x30
 8006db4:	af04      	add	r7, sp, #16
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fd89 	bl	80088dc <pvPortMalloc>
 8006dca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00e      	beq.n	8006df0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006dd2:	20a8      	movs	r0, #168	@ 0xa8
 8006dd4:	f001 fd82 	bl	80088dc <pvPortMalloc>
 8006dd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006de6:	e005      	b.n	8006df4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006de8:	6978      	ldr	r0, [r7, #20]
 8006dea:	f001 fe45 	bl	8008a78 <vPortFree>
 8006dee:	e001      	b.n	8006df4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d017      	beq.n	8006e2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e02:	88fa      	ldrh	r2, [r7, #6]
 8006e04:	2300      	movs	r3, #0
 8006e06:	9303      	str	r3, [sp, #12]
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	9302      	str	r3, [sp, #8]
 8006e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f80f 	bl	8006e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e1e:	69f8      	ldr	r0, [r7, #28]
 8006e20:	f000 f8b4 	bl	8006f8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e24:	2301      	movs	r3, #1
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	e002      	b.n	8006e30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e30:	69bb      	ldr	r3, [r7, #24]
	}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3720      	adds	r7, #32
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	461a      	mov	r2, r3
 8006e54:	21a5      	movs	r1, #165	@ 0xa5
 8006e56:	f002 f84e 	bl	8008ef6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e64:	3b01      	subs	r3, #1
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f023 0307 	bic.w	r3, r3, #7
 8006e72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	617b      	str	r3, [r7, #20]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01f      	beq.n	8006edc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	e012      	b.n	8006ec8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	7819      	ldrb	r1, [r3, #0]
 8006eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	3334      	adds	r3, #52	@ 0x34
 8006eb2:	460a      	mov	r2, r1
 8006eb4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d006      	beq.n	8006ed0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b0f      	cmp	r3, #15
 8006ecc:	d9e9      	bls.n	8006ea2 <prvInitialiseNewTask+0x66>
 8006ece:	e000      	b.n	8006ed2 <prvInitialiseNewTask+0x96>
			{
				break;
 8006ed0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eda:	e003      	b.n	8006ee4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	2b37      	cmp	r3, #55	@ 0x37
 8006ee8:	d901      	bls.n	8006eee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006eea:	2337      	movs	r3, #55	@ 0x37
 8006eec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	2200      	movs	r2, #0
 8006efe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	3304      	adds	r3, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe ff49 	bl	8005d9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	3318      	adds	r3, #24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe ff44 	bl	8005d9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	3354      	adds	r3, #84	@ 0x54
 8006f3e:	224c      	movs	r2, #76	@ 0x4c
 8006f40:	2100      	movs	r1, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 ffd7 	bl	8008ef6 <memset>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006f80 <prvInitialiseNewTask+0x144>)
 8006f4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	4a0c      	ldr	r2, [pc, #48]	@ (8006f84 <prvInitialiseNewTask+0x148>)
 8006f52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	4a0c      	ldr	r2, [pc, #48]	@ (8006f88 <prvInitialiseNewTask+0x14c>)
 8006f58:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	68f9      	ldr	r1, [r7, #12]
 8006f5e:	69b8      	ldr	r0, [r7, #24]
 8006f60:	f001 fa6a 	bl	8008438 <pxPortInitialiseStack>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f76:	bf00      	nop
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20004d44 	.word	0x20004d44
 8006f84:	20004dac 	.word	0x20004dac
 8006f88:	20004e14 	.word	0x20004e14

08006f8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f94:	f001 fb80 	bl	8008698 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f98:	4b2d      	ldr	r3, [pc, #180]	@ (8007050 <prvAddNewTaskToReadyList+0xc4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8007050 <prvAddNewTaskToReadyList+0xc4>)
 8006fa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8007054 <prvAddNewTaskToReadyList+0xc8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006faa:	4a2a      	ldr	r2, [pc, #168]	@ (8007054 <prvAddNewTaskToReadyList+0xc8>)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fb0:	4b27      	ldr	r3, [pc, #156]	@ (8007050 <prvAddNewTaskToReadyList+0xc4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d110      	bne.n	8006fda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fb8:	f000 fc2e 	bl	8007818 <prvInitialiseTaskLists>
 8006fbc:	e00d      	b.n	8006fda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fbe:	4b26      	ldr	r3, [pc, #152]	@ (8007058 <prvAddNewTaskToReadyList+0xcc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fc6:	4b23      	ldr	r3, [pc, #140]	@ (8007054 <prvAddNewTaskToReadyList+0xc8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d802      	bhi.n	8006fda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8007054 <prvAddNewTaskToReadyList+0xc8>)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fda:	4b20      	ldr	r3, [pc, #128]	@ (800705c <prvAddNewTaskToReadyList+0xd0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800705c <prvAddNewTaskToReadyList+0xd0>)
 8006fe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <prvAddNewTaskToReadyList+0xd0>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8007060 <prvAddNewTaskToReadyList+0xd4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d903      	bls.n	8007000 <prvAddNewTaskToReadyList+0x74>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	4a18      	ldr	r2, [pc, #96]	@ (8007060 <prvAddNewTaskToReadyList+0xd4>)
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <prvAddNewTaskToReadyList+0xd8>)
 800700e:	441a      	add	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f7fe fecd 	bl	8005db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800701c:	f001 fb6e 	bl	80086fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007020:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <prvAddNewTaskToReadyList+0xcc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00e      	beq.n	8007046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007028:	4b0a      	ldr	r3, [pc, #40]	@ (8007054 <prvAddNewTaskToReadyList+0xc8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	429a      	cmp	r2, r3
 8007034:	d207      	bcs.n	8007046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007036:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <prvAddNewTaskToReadyList+0xdc>)
 8007038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000fc4 	.word	0x20000fc4
 8007054:	20000af0 	.word	0x20000af0
 8007058:	20000fd0 	.word	0x20000fd0
 800705c:	20000fe0 	.word	0x20000fe0
 8007060:	20000fcc 	.word	0x20000fcc
 8007064:	20000af4 	.word	0x20000af4
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d018      	beq.n	80070b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800707e:	4b14      	ldr	r3, [pc, #80]	@ (80070d0 <vTaskDelay+0x64>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <vTaskDelay+0x32>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	60bb      	str	r3, [r7, #8]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800709e:	f000 f88b 	bl	80071b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070a2:	2100      	movs	r1, #0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fe19 	bl	8007cdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070aa:	f000 f893 	bl	80071d4 <xTaskResumeAll>
 80070ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d107      	bne.n	80070c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80070b6:	4b07      	ldr	r3, [pc, #28]	@ (80070d4 <vTaskDelay+0x68>)
 80070b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000fec 	.word	0x20000fec
 80070d4:	e000ed04 	.word	0xe000ed04

080070d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	@ 0x28
 80070dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070e6:	463a      	mov	r2, r7
 80070e8:	1d39      	adds	r1, r7, #4
 80070ea:	f107 0308 	add.w	r3, r7, #8
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fe00 	bl	8005cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	9202      	str	r2, [sp, #8]
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	2300      	movs	r3, #0
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2300      	movs	r3, #0
 8007104:	460a      	mov	r2, r1
 8007106:	4924      	ldr	r1, [pc, #144]	@ (8007198 <vTaskStartScheduler+0xc0>)
 8007108:	4824      	ldr	r0, [pc, #144]	@ (800719c <vTaskStartScheduler+0xc4>)
 800710a:	f7ff fdf1 	bl	8006cf0 <xTaskCreateStatic>
 800710e:	4603      	mov	r3, r0
 8007110:	4a23      	ldr	r2, [pc, #140]	@ (80071a0 <vTaskStartScheduler+0xc8>)
 8007112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007114:	4b22      	ldr	r3, [pc, #136]	@ (80071a0 <vTaskStartScheduler+0xc8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800711c:	2301      	movs	r3, #1
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	e001      	b.n	8007126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d102      	bne.n	8007132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800712c:	f000 fe2a 	bl	8007d84 <xTimerCreateTimerTask>
 8007130:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d11b      	bne.n	8007170 <vTaskStartScheduler+0x98>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	613b      	str	r3, [r7, #16]
}
 800714a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800714c:	4b15      	ldr	r3, [pc, #84]	@ (80071a4 <vTaskStartScheduler+0xcc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3354      	adds	r3, #84	@ 0x54
 8007152:	4a15      	ldr	r2, [pc, #84]	@ (80071a8 <vTaskStartScheduler+0xd0>)
 8007154:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007156:	4b15      	ldr	r3, [pc, #84]	@ (80071ac <vTaskStartScheduler+0xd4>)
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800715e:	4b14      	ldr	r3, [pc, #80]	@ (80071b0 <vTaskStartScheduler+0xd8>)
 8007160:	2201      	movs	r2, #1
 8007162:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007164:	4b13      	ldr	r3, [pc, #76]	@ (80071b4 <vTaskStartScheduler+0xdc>)
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800716a:	f001 f9f1 	bl	8008550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800716e:	e00f      	b.n	8007190 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	d10b      	bne.n	8007190 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717c:	f383 8811 	msr	BASEPRI, r3
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	60fb      	str	r3, [r7, #12]
}
 800718a:	bf00      	nop
 800718c:	bf00      	nop
 800718e:	e7fd      	b.n	800718c <vTaskStartScheduler+0xb4>
}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	08009d14 	.word	0x08009d14
 800719c:	080077e9 	.word	0x080077e9
 80071a0:	20000fe8 	.word	0x20000fe8
 80071a4:	20000af0 	.word	0x20000af0
 80071a8:	20000088 	.word	0x20000088
 80071ac:	20000fe4 	.word	0x20000fe4
 80071b0:	20000fd0 	.word	0x20000fd0
 80071b4:	20000fc8 	.word	0x20000fc8

080071b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071bc:	4b04      	ldr	r3, [pc, #16]	@ (80071d0 <vTaskSuspendAll+0x18>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	4a03      	ldr	r2, [pc, #12]	@ (80071d0 <vTaskSuspendAll+0x18>)
 80071c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071c6:	bf00      	nop
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20000fec 	.word	0x20000fec

080071d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071e2:	4b42      	ldr	r3, [pc, #264]	@ (80072ec <xTaskResumeAll+0x118>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <xTaskResumeAll+0x2e>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	603b      	str	r3, [r7, #0]
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	e7fd      	b.n	80071fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007202:	f001 fa49 	bl	8008698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007206:	4b39      	ldr	r3, [pc, #228]	@ (80072ec <xTaskResumeAll+0x118>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3b01      	subs	r3, #1
 800720c:	4a37      	ldr	r2, [pc, #220]	@ (80072ec <xTaskResumeAll+0x118>)
 800720e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007210:	4b36      	ldr	r3, [pc, #216]	@ (80072ec <xTaskResumeAll+0x118>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d162      	bne.n	80072de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007218:	4b35      	ldr	r3, [pc, #212]	@ (80072f0 <xTaskResumeAll+0x11c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d05e      	beq.n	80072de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007220:	e02f      	b.n	8007282 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007222:	4b34      	ldr	r3, [pc, #208]	@ (80072f4 <xTaskResumeAll+0x120>)
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3318      	adds	r3, #24
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fe1e 	bl	8005e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3304      	adds	r3, #4
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe fe19 	bl	8005e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007242:	4b2d      	ldr	r3, [pc, #180]	@ (80072f8 <xTaskResumeAll+0x124>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d903      	bls.n	8007252 <xTaskResumeAll+0x7e>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724e:	4a2a      	ldr	r2, [pc, #168]	@ (80072f8 <xTaskResumeAll+0x124>)
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4a27      	ldr	r2, [pc, #156]	@ (80072fc <xTaskResumeAll+0x128>)
 8007260:	441a      	add	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3304      	adds	r3, #4
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f7fe fda4 	bl	8005db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007272:	4b23      	ldr	r3, [pc, #140]	@ (8007300 <xTaskResumeAll+0x12c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007278:	429a      	cmp	r2, r3
 800727a:	d302      	bcc.n	8007282 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800727c:	4b21      	ldr	r3, [pc, #132]	@ (8007304 <xTaskResumeAll+0x130>)
 800727e:	2201      	movs	r2, #1
 8007280:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007282:	4b1c      	ldr	r3, [pc, #112]	@ (80072f4 <xTaskResumeAll+0x120>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1cb      	bne.n	8007222 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007290:	f000 fb66 	bl	8007960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007294:	4b1c      	ldr	r3, [pc, #112]	@ (8007308 <xTaskResumeAll+0x134>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d010      	beq.n	80072c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072a0:	f000 f846 	bl	8007330 <xTaskIncrementTick>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80072aa:	4b16      	ldr	r3, [pc, #88]	@ (8007304 <xTaskResumeAll+0x130>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f1      	bne.n	80072a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80072bc:	4b12      	ldr	r3, [pc, #72]	@ (8007308 <xTaskResumeAll+0x134>)
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072c2:	4b10      	ldr	r3, [pc, #64]	@ (8007304 <xTaskResumeAll+0x130>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072ca:	2301      	movs	r3, #1
 80072cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072ce:	4b0f      	ldr	r3, [pc, #60]	@ (800730c <xTaskResumeAll+0x138>)
 80072d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072de:	f001 fa0d 	bl	80086fc <vPortExitCritical>

	return xAlreadyYielded;
 80072e2:	68bb      	ldr	r3, [r7, #8]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000fec 	.word	0x20000fec
 80072f0:	20000fc4 	.word	0x20000fc4
 80072f4:	20000f84 	.word	0x20000f84
 80072f8:	20000fcc 	.word	0x20000fcc
 80072fc:	20000af4 	.word	0x20000af4
 8007300:	20000af0 	.word	0x20000af0
 8007304:	20000fd8 	.word	0x20000fd8
 8007308:	20000fd4 	.word	0x20000fd4
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007316:	4b05      	ldr	r3, [pc, #20]	@ (800732c <xTaskGetTickCount+0x1c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800731c:	687b      	ldr	r3, [r7, #4]
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000fc8 	.word	0x20000fc8

08007330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800733a:	4b4f      	ldr	r3, [pc, #316]	@ (8007478 <xTaskIncrementTick+0x148>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f040 8090 	bne.w	8007464 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007344:	4b4d      	ldr	r3, [pc, #308]	@ (800747c <xTaskIncrementTick+0x14c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800734c:	4a4b      	ldr	r2, [pc, #300]	@ (800747c <xTaskIncrementTick+0x14c>)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d121      	bne.n	800739c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007358:	4b49      	ldr	r3, [pc, #292]	@ (8007480 <xTaskIncrementTick+0x150>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	603b      	str	r3, [r7, #0]
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	e7fd      	b.n	8007376 <xTaskIncrementTick+0x46>
 800737a:	4b41      	ldr	r3, [pc, #260]	@ (8007480 <xTaskIncrementTick+0x150>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	4b40      	ldr	r3, [pc, #256]	@ (8007484 <xTaskIncrementTick+0x154>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a3e      	ldr	r2, [pc, #248]	@ (8007480 <xTaskIncrementTick+0x150>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	4a3e      	ldr	r2, [pc, #248]	@ (8007484 <xTaskIncrementTick+0x154>)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	4b3e      	ldr	r3, [pc, #248]	@ (8007488 <xTaskIncrementTick+0x158>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3301      	adds	r3, #1
 8007394:	4a3c      	ldr	r2, [pc, #240]	@ (8007488 <xTaskIncrementTick+0x158>)
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	f000 fae2 	bl	8007960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800739c:	4b3b      	ldr	r3, [pc, #236]	@ (800748c <xTaskIncrementTick+0x15c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d349      	bcc.n	800743a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073a6:	4b36      	ldr	r3, [pc, #216]	@ (8007480 <xTaskIncrementTick+0x150>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b0:	4b36      	ldr	r3, [pc, #216]	@ (800748c <xTaskIncrementTick+0x15c>)
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	601a      	str	r2, [r3, #0]
					break;
 80073b8:	e03f      	b.n	800743a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ba:	4b31      	ldr	r3, [pc, #196]	@ (8007480 <xTaskIncrementTick+0x150>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d203      	bcs.n	80073da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073d2:	4a2e      	ldr	r2, [pc, #184]	@ (800748c <xTaskIncrementTick+0x15c>)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073d8:	e02f      	b.n	800743a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	3304      	adds	r3, #4
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fd46 	bl	8005e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3318      	adds	r3, #24
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe fd3d 	bl	8005e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	4b25      	ldr	r3, [pc, #148]	@ (8007490 <xTaskIncrementTick+0x160>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d903      	bls.n	800740a <xTaskIncrementTick+0xda>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	4a22      	ldr	r2, [pc, #136]	@ (8007490 <xTaskIncrementTick+0x160>)
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4a1f      	ldr	r2, [pc, #124]	@ (8007494 <xTaskIncrementTick+0x164>)
 8007418:	441a      	add	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	3304      	adds	r3, #4
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f7fe fcc8 	bl	8005db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742a:	4b1b      	ldr	r3, [pc, #108]	@ (8007498 <xTaskIncrementTick+0x168>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	429a      	cmp	r2, r3
 8007432:	d3b8      	bcc.n	80073a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007434:	2301      	movs	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007438:	e7b5      	b.n	80073a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800743a:	4b17      	ldr	r3, [pc, #92]	@ (8007498 <xTaskIncrementTick+0x168>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007440:	4914      	ldr	r1, [pc, #80]	@ (8007494 <xTaskIncrementTick+0x164>)
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d901      	bls.n	8007456 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007452:	2301      	movs	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007456:	4b11      	ldr	r3, [pc, #68]	@ (800749c <xTaskIncrementTick+0x16c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800745e:	2301      	movs	r3, #1
 8007460:	617b      	str	r3, [r7, #20]
 8007462:	e004      	b.n	800746e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007464:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <xTaskIncrementTick+0x170>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3301      	adds	r3, #1
 800746a:	4a0d      	ldr	r2, [pc, #52]	@ (80074a0 <xTaskIncrementTick+0x170>)
 800746c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800746e:	697b      	ldr	r3, [r7, #20]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000fec 	.word	0x20000fec
 800747c:	20000fc8 	.word	0x20000fc8
 8007480:	20000f7c 	.word	0x20000f7c
 8007484:	20000f80 	.word	0x20000f80
 8007488:	20000fdc 	.word	0x20000fdc
 800748c:	20000fe4 	.word	0x20000fe4
 8007490:	20000fcc 	.word	0x20000fcc
 8007494:	20000af4 	.word	0x20000af4
 8007498:	20000af0 	.word	0x20000af0
 800749c:	20000fd8 	.word	0x20000fd8
 80074a0:	20000fd4 	.word	0x20000fd4

080074a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007558 <vTaskSwitchContext+0xb4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074b2:	4b2a      	ldr	r3, [pc, #168]	@ (800755c <vTaskSwitchContext+0xb8>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074b8:	e047      	b.n	800754a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80074ba:	4b28      	ldr	r3, [pc, #160]	@ (800755c <vTaskSwitchContext+0xb8>)
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c0:	4b27      	ldr	r3, [pc, #156]	@ (8007560 <vTaskSwitchContext+0xbc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e011      	b.n	80074ec <vTaskSwitchContext+0x48>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10b      	bne.n	80074e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <vTaskSwitchContext+0x3e>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	491d      	ldr	r1, [pc, #116]	@ (8007564 <vTaskSwitchContext+0xc0>)
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0e3      	beq.n	80074c8 <vTaskSwitchContext+0x24>
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4a16      	ldr	r2, [pc, #88]	@ (8007564 <vTaskSwitchContext+0xc0>)
 800750c:	4413      	add	r3, r2
 800750e:	60bb      	str	r3, [r7, #8]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	605a      	str	r2, [r3, #4]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	3308      	adds	r3, #8
 8007522:	429a      	cmp	r2, r3
 8007524:	d104      	bne.n	8007530 <vTaskSwitchContext+0x8c>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	605a      	str	r2, [r3, #4]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4a0c      	ldr	r2, [pc, #48]	@ (8007568 <vTaskSwitchContext+0xc4>)
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	4a09      	ldr	r2, [pc, #36]	@ (8007560 <vTaskSwitchContext+0xbc>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007540:	4b09      	ldr	r3, [pc, #36]	@ (8007568 <vTaskSwitchContext+0xc4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3354      	adds	r3, #84	@ 0x54
 8007546:	4a09      	ldr	r2, [pc, #36]	@ (800756c <vTaskSwitchContext+0xc8>)
 8007548:	6013      	str	r3, [r2, #0]
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20000fec 	.word	0x20000fec
 800755c:	20000fd8 	.word	0x20000fd8
 8007560:	20000fcc 	.word	0x20000fcc
 8007564:	20000af4 	.word	0x20000af4
 8007568:	20000af0 	.word	0x20000af0
 800756c:	20000088 	.word	0x20000088

08007570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10b      	bne.n	8007598 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	60fb      	str	r3, [r7, #12]
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	e7fd      	b.n	8007594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007598:	4b07      	ldr	r3, [pc, #28]	@ (80075b8 <vTaskPlaceOnEventList+0x48>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3318      	adds	r3, #24
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7fe fc2c 	bl	8005dfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075a6:	2101      	movs	r1, #1
 80075a8:	6838      	ldr	r0, [r7, #0]
 80075aa:	f000 fb97 	bl	8007cdc <prvAddCurrentTaskToDelayedList>
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000af0 	.word	0x20000af0

080075bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10b      	bne.n	80075e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	617b      	str	r3, [r7, #20]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007610 <vTaskPlaceOnEventListRestricted+0x54>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3318      	adds	r3, #24
 80075ec:	4619      	mov	r1, r3
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7fe fbe1 	bl	8005db6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80075fa:	f04f 33ff 	mov.w	r3, #4294967295
 80075fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	68b8      	ldr	r0, [r7, #8]
 8007604:	f000 fb6a 	bl	8007cdc <prvAddCurrentTaskToDelayedList>
	}
 8007608:	bf00      	nop
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20000af0 	.word	0x20000af0

08007614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10b      	bne.n	8007642 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	60fb      	str	r3, [r7, #12]
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	e7fd      	b.n	800763e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3318      	adds	r3, #24
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fc12 	bl	8005e70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800764c:	4b1d      	ldr	r3, [pc, #116]	@ (80076c4 <xTaskRemoveFromEventList+0xb0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d11d      	bne.n	8007690 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	3304      	adds	r3, #4
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe fc09 	bl	8005e70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007662:	4b19      	ldr	r3, [pc, #100]	@ (80076c8 <xTaskRemoveFromEventList+0xb4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d903      	bls.n	8007672 <xTaskRemoveFromEventList+0x5e>
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766e:	4a16      	ldr	r2, [pc, #88]	@ (80076c8 <xTaskRemoveFromEventList+0xb4>)
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4a13      	ldr	r2, [pc, #76]	@ (80076cc <xTaskRemoveFromEventList+0xb8>)
 8007680:	441a      	add	r2, r3
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7fe fb94 	bl	8005db6 <vListInsertEnd>
 800768e:	e005      	b.n	800769c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	3318      	adds	r3, #24
 8007694:	4619      	mov	r1, r3
 8007696:	480e      	ldr	r0, [pc, #56]	@ (80076d0 <xTaskRemoveFromEventList+0xbc>)
 8007698:	f7fe fb8d 	bl	8005db6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a0:	4b0c      	ldr	r3, [pc, #48]	@ (80076d4 <xTaskRemoveFromEventList+0xc0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d905      	bls.n	80076b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076aa:	2301      	movs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076ae:	4b0a      	ldr	r3, [pc, #40]	@ (80076d8 <xTaskRemoveFromEventList+0xc4>)
 80076b0:	2201      	movs	r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e001      	b.n	80076ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076ba:	697b      	ldr	r3, [r7, #20]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000fec 	.word	0x20000fec
 80076c8:	20000fcc 	.word	0x20000fcc
 80076cc:	20000af4 	.word	0x20000af4
 80076d0:	20000f84 	.word	0x20000f84
 80076d4:	20000af0 	.word	0x20000af0
 80076d8:	20000fd8 	.word	0x20000fd8

080076dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076e4:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <vTaskInternalSetTimeOutState+0x24>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076ec:	4b05      	ldr	r3, [pc, #20]	@ (8007704 <vTaskInternalSetTimeOutState+0x28>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	605a      	str	r2, [r3, #4]
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20000fdc 	.word	0x20000fdc
 8007704:	20000fc8 	.word	0x20000fc8

08007708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10b      	bne.n	8007730 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	613b      	str	r3, [r7, #16]
}
 800772a:	bf00      	nop
 800772c:	bf00      	nop
 800772e:	e7fd      	b.n	800772c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10b      	bne.n	800774e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60fb      	str	r3, [r7, #12]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800774e:	f000 ffa3 	bl	8008698 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007752:	4b1d      	ldr	r3, [pc, #116]	@ (80077c8 <xTaskCheckForTimeOut+0xc0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776a:	d102      	bne.n	8007772 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e023      	b.n	80077ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b15      	ldr	r3, [pc, #84]	@ (80077cc <xTaskCheckForTimeOut+0xc4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d007      	beq.n	800778e <xTaskCheckForTimeOut+0x86>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	429a      	cmp	r2, r3
 8007786:	d302      	bcc.n	800778e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	e015      	b.n	80077ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	429a      	cmp	r2, r3
 8007796:	d20b      	bcs.n	80077b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff ff99 	bl	80076dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e004      	b.n	80077ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077b6:	2301      	movs	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077ba:	f000 ff9f 	bl	80086fc <vPortExitCritical>

	return xReturn;
 80077be:	69fb      	ldr	r3, [r7, #28]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20000fc8 	.word	0x20000fc8
 80077cc:	20000fdc 	.word	0x20000fdc

080077d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077d4:	4b03      	ldr	r3, [pc, #12]	@ (80077e4 <vTaskMissedYield+0x14>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]
}
 80077da:	bf00      	nop
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	20000fd8 	.word	0x20000fd8

080077e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077f0:	f000 f852 	bl	8007898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077f4:	4b06      	ldr	r3, [pc, #24]	@ (8007810 <prvIdleTask+0x28>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d9f9      	bls.n	80077f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <prvIdleTask+0x2c>)
 80077fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800780c:	e7f0      	b.n	80077f0 <prvIdleTask+0x8>
 800780e:	bf00      	nop
 8007810:	20000af4 	.word	0x20000af4
 8007814:	e000ed04 	.word	0xe000ed04

08007818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800781e:	2300      	movs	r3, #0
 8007820:	607b      	str	r3, [r7, #4]
 8007822:	e00c      	b.n	800783e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4a12      	ldr	r2, [pc, #72]	@ (8007878 <prvInitialiseTaskLists+0x60>)
 8007830:	4413      	add	r3, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fa92 	bl	8005d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3301      	adds	r3, #1
 800783c:	607b      	str	r3, [r7, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b37      	cmp	r3, #55	@ 0x37
 8007842:	d9ef      	bls.n	8007824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007844:	480d      	ldr	r0, [pc, #52]	@ (800787c <prvInitialiseTaskLists+0x64>)
 8007846:	f7fe fa89 	bl	8005d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800784a:	480d      	ldr	r0, [pc, #52]	@ (8007880 <prvInitialiseTaskLists+0x68>)
 800784c:	f7fe fa86 	bl	8005d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007850:	480c      	ldr	r0, [pc, #48]	@ (8007884 <prvInitialiseTaskLists+0x6c>)
 8007852:	f7fe fa83 	bl	8005d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007856:	480c      	ldr	r0, [pc, #48]	@ (8007888 <prvInitialiseTaskLists+0x70>)
 8007858:	f7fe fa80 	bl	8005d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800785c:	480b      	ldr	r0, [pc, #44]	@ (800788c <prvInitialiseTaskLists+0x74>)
 800785e:	f7fe fa7d 	bl	8005d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007862:	4b0b      	ldr	r3, [pc, #44]	@ (8007890 <prvInitialiseTaskLists+0x78>)
 8007864:	4a05      	ldr	r2, [pc, #20]	@ (800787c <prvInitialiseTaskLists+0x64>)
 8007866:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007868:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <prvInitialiseTaskLists+0x7c>)
 800786a:	4a05      	ldr	r2, [pc, #20]	@ (8007880 <prvInitialiseTaskLists+0x68>)
 800786c:	601a      	str	r2, [r3, #0]
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000af4 	.word	0x20000af4
 800787c:	20000f54 	.word	0x20000f54
 8007880:	20000f68 	.word	0x20000f68
 8007884:	20000f84 	.word	0x20000f84
 8007888:	20000f98 	.word	0x20000f98
 800788c:	20000fb0 	.word	0x20000fb0
 8007890:	20000f7c 	.word	0x20000f7c
 8007894:	20000f80 	.word	0x20000f80

08007898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800789e:	e019      	b.n	80078d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078a0:	f000 fefa 	bl	8008698 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a4:	4b10      	ldr	r3, [pc, #64]	@ (80078e8 <prvCheckTasksWaitingTermination+0x50>)
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe fadd 	bl	8005e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078b6:	4b0d      	ldr	r3, [pc, #52]	@ (80078ec <prvCheckTasksWaitingTermination+0x54>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	4a0b      	ldr	r2, [pc, #44]	@ (80078ec <prvCheckTasksWaitingTermination+0x54>)
 80078be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078c0:	4b0b      	ldr	r3, [pc, #44]	@ (80078f0 <prvCheckTasksWaitingTermination+0x58>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	4a0a      	ldr	r2, [pc, #40]	@ (80078f0 <prvCheckTasksWaitingTermination+0x58>)
 80078c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078ca:	f000 ff17 	bl	80086fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f810 	bl	80078f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078d4:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <prvCheckTasksWaitingTermination+0x58>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e1      	bne.n	80078a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078dc:	bf00      	nop
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000f98 	.word	0x20000f98
 80078ec:	20000fc4 	.word	0x20000fc4
 80078f0:	20000fac 	.word	0x20000fac

080078f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3354      	adds	r3, #84	@ 0x54
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fb11 	bl	8008f28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800790c:	2b00      	cmp	r3, #0
 800790e:	d108      	bne.n	8007922 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007914:	4618      	mov	r0, r3
 8007916:	f001 f8af 	bl	8008a78 <vPortFree>
				vPortFree( pxTCB );
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 f8ac 	bl	8008a78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007920:	e019      	b.n	8007956 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007928:	2b01      	cmp	r3, #1
 800792a:	d103      	bne.n	8007934 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f8a3 	bl	8008a78 <vPortFree>
	}
 8007932:	e010      	b.n	8007956 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800793a:	2b02      	cmp	r3, #2
 800793c:	d00b      	beq.n	8007956 <prvDeleteTCB+0x62>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60fb      	str	r3, [r7, #12]
}
 8007950:	bf00      	nop
 8007952:	bf00      	nop
 8007954:	e7fd      	b.n	8007952 <prvDeleteTCB+0x5e>
	}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007966:	4b0c      	ldr	r3, [pc, #48]	@ (8007998 <prvResetNextTaskUnblockTime+0x38>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007970:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <prvResetNextTaskUnblockTime+0x3c>)
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007978:	e008      	b.n	800798c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797a:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <prvResetNextTaskUnblockTime+0x38>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	4a04      	ldr	r2, [pc, #16]	@ (800799c <prvResetNextTaskUnblockTime+0x3c>)
 800798a:	6013      	str	r3, [r2, #0]
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	20000f7c 	.word	0x20000f7c
 800799c:	20000fe4 	.word	0x20000fe4

080079a0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80079a6:	4b05      	ldr	r3, [pc, #20]	@ (80079bc <xTaskGetCurrentTaskHandle+0x1c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80079ac:	687b      	ldr	r3, [r7, #4]
	}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	20000af0 	.word	0x20000af0

080079c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079c6:	4b0b      	ldr	r3, [pc, #44]	@ (80079f4 <xTaskGetSchedulerState+0x34>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079ce:	2301      	movs	r3, #1
 80079d0:	607b      	str	r3, [r7, #4]
 80079d2:	e008      	b.n	80079e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d4:	4b08      	ldr	r3, [pc, #32]	@ (80079f8 <xTaskGetSchedulerState+0x38>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079dc:	2302      	movs	r3, #2
 80079de:	607b      	str	r3, [r7, #4]
 80079e0:	e001      	b.n	80079e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079e2:	2300      	movs	r3, #0
 80079e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079e6:	687b      	ldr	r3, [r7, #4]
	}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	20000fd0 	.word	0x20000fd0
 80079f8:	20000fec 	.word	0x20000fec

080079fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d051      	beq.n	8007ab6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a16:	4b2a      	ldr	r3, [pc, #168]	@ (8007ac0 <xTaskPriorityInherit+0xc4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d241      	bcs.n	8007aa4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	db06      	blt.n	8007a36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a28:	4b25      	ldr	r3, [pc, #148]	@ (8007ac0 <xTaskPriorityInherit+0xc4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6959      	ldr	r1, [r3, #20]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4a1f      	ldr	r2, [pc, #124]	@ (8007ac4 <xTaskPriorityInherit+0xc8>)
 8007a48:	4413      	add	r3, r2
 8007a4a:	4299      	cmp	r1, r3
 8007a4c:	d122      	bne.n	8007a94 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fa0c 	bl	8005e70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a58:	4b19      	ldr	r3, [pc, #100]	@ (8007ac0 <xTaskPriorityInherit+0xc4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a66:	4b18      	ldr	r3, [pc, #96]	@ (8007ac8 <xTaskPriorityInherit+0xcc>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d903      	bls.n	8007a76 <xTaskPriorityInherit+0x7a>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a72:	4a15      	ldr	r2, [pc, #84]	@ (8007ac8 <xTaskPriorityInherit+0xcc>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4a10      	ldr	r2, [pc, #64]	@ (8007ac4 <xTaskPriorityInherit+0xc8>)
 8007a84:	441a      	add	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe f992 	bl	8005db6 <vListInsertEnd>
 8007a92:	e004      	b.n	8007a9e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a94:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac0 <xTaskPriorityInherit+0xc4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	e008      	b.n	8007ab6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007aa8:	4b05      	ldr	r3, [pc, #20]	@ (8007ac0 <xTaskPriorityInherit+0xc4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d201      	bcs.n	8007ab6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
	}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20000af0 	.word	0x20000af0
 8007ac4:	20000af4 	.word	0x20000af4
 8007ac8:	20000fcc 	.word	0x20000fcc

08007acc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d058      	beq.n	8007b94 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8007ba0 <xTaskPriorityDisinherit+0xd4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d00b      	beq.n	8007b04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60fb      	str	r3, [r7, #12]
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	e7fd      	b.n	8007b00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10b      	bne.n	8007b24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	60bb      	str	r3, [r7, #8]
}
 8007b1e:	bf00      	nop
 8007b20:	bf00      	nop
 8007b22:	e7fd      	b.n	8007b20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b28:	1e5a      	subs	r2, r3, #1
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d02c      	beq.n	8007b94 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d128      	bne.n	8007b94 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	3304      	adds	r3, #4
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe f992 	bl	8005e70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b58:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b64:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba4 <xTaskPriorityDisinherit+0xd8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d903      	bls.n	8007b74 <xTaskPriorityDisinherit+0xa8>
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	4a0c      	ldr	r2, [pc, #48]	@ (8007ba4 <xTaskPriorityDisinherit+0xd8>)
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4a09      	ldr	r2, [pc, #36]	@ (8007ba8 <xTaskPriorityDisinherit+0xdc>)
 8007b82:	441a      	add	r2, r3
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f7fe f913 	bl	8005db6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b94:	697b      	ldr	r3, [r7, #20]
	}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000af0 	.word	0x20000af0
 8007ba4:	20000fcc 	.word	0x20000fcc
 8007ba8:	20000af4 	.word	0x20000af4

08007bac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d06c      	beq.n	8007c9e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d902      	bls.n	8007bf4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	e002      	b.n	8007bfa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d04c      	beq.n	8007c9e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d147      	bne.n	8007c9e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c0e:	4b26      	ldr	r3, [pc, #152]	@ (8007ca8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d10b      	bne.n	8007c30 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	60bb      	str	r3, [r7, #8]
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	e7fd      	b.n	8007c2c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db04      	blt.n	8007c4e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	6959      	ldr	r1, [r3, #20]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4a13      	ldr	r2, [pc, #76]	@ (8007cac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c5e:	4413      	add	r3, r2
 8007c60:	4299      	cmp	r1, r3
 8007c62:	d11c      	bne.n	8007c9e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	3304      	adds	r3, #4
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe f901 	bl	8005e70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c72:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d903      	bls.n	8007c82 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007cb0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a07      	ldr	r2, [pc, #28]	@ (8007cac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c90:	441a      	add	r2, r3
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7fe f88c 	bl	8005db6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c9e:	bf00      	nop
 8007ca0:	3720      	adds	r7, #32
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000af0 	.word	0x20000af0
 8007cac:	20000af4 	.word	0x20000af4
 8007cb0:	20000fcc 	.word	0x20000fcc

08007cb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007cb4:	b480      	push	{r7}
 8007cb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007cb8:	4b07      	ldr	r3, [pc, #28]	@ (8007cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007cc0:	4b05      	ldr	r3, [pc, #20]	@ (8007cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cc6:	3201      	adds	r2, #1
 8007cc8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007cca:	4b03      	ldr	r3, [pc, #12]	@ (8007cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
	}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	20000af0 	.word	0x20000af0

08007cdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ce6:	4b21      	ldr	r3, [pc, #132]	@ (8007d6c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cec:	4b20      	ldr	r3, [pc, #128]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe f8bc 	bl	8005e70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d10a      	bne.n	8007d16 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d007      	beq.n	8007d16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d06:	4b1a      	ldr	r3, [pc, #104]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4819      	ldr	r0, [pc, #100]	@ (8007d74 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d10:	f7fe f851 	bl	8005db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d14:	e026      	b.n	8007d64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d1e:	4b14      	ldr	r3, [pc, #80]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d209      	bcs.n	8007d42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d2e:	4b12      	ldr	r3, [pc, #72]	@ (8007d78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b0f      	ldr	r3, [pc, #60]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f7fe f85f 	bl	8005dfe <vListInsert>
}
 8007d40:	e010      	b.n	8007d64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d42:	4b0e      	ldr	r3, [pc, #56]	@ (8007d7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	4b0a      	ldr	r3, [pc, #40]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fe f855 	bl	8005dfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d54:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d202      	bcs.n	8007d64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d5e:	4a08      	ldr	r2, [pc, #32]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6013      	str	r3, [r2, #0]
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20000fc8 	.word	0x20000fc8
 8007d70:	20000af0 	.word	0x20000af0
 8007d74:	20000fb0 	.word	0x20000fb0
 8007d78:	20000f80 	.word	0x20000f80
 8007d7c:	20000f7c 	.word	0x20000f7c
 8007d80:	20000fe4 	.word	0x20000fe4

08007d84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	@ 0x28
 8007d88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d8e:	f000 fb13 	bl	80083b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d92:	4b1d      	ldr	r3, [pc, #116]	@ (8007e08 <xTimerCreateTimerTask+0x84>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d021      	beq.n	8007dde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007da2:	1d3a      	adds	r2, r7, #4
 8007da4:	f107 0108 	add.w	r1, r7, #8
 8007da8:	f107 030c 	add.w	r3, r7, #12
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fd ffbb 	bl	8005d28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	9202      	str	r2, [sp, #8]
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	4911      	ldr	r1, [pc, #68]	@ (8007e0c <xTimerCreateTimerTask+0x88>)
 8007dc6:	4812      	ldr	r0, [pc, #72]	@ (8007e10 <xTimerCreateTimerTask+0x8c>)
 8007dc8:	f7fe ff92 	bl	8006cf0 <xTaskCreateStatic>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	4a11      	ldr	r2, [pc, #68]	@ (8007e14 <xTimerCreateTimerTask+0x90>)
 8007dd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dd2:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <xTimerCreateTimerTask+0x90>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	613b      	str	r3, [r7, #16]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dfc:	697b      	ldr	r3, [r7, #20]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20001020 	.word	0x20001020
 8007e0c:	08009d1c 	.word	0x08009d1c
 8007e10:	08007f51 	.word	0x08007f51
 8007e14:	20001024 	.word	0x20001024

08007e18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <xTimerGenericCommand+0x30>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	623b      	str	r3, [r7, #32]
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e48:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <xTimerGenericCommand+0x98>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d02a      	beq.n	8007ea6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	dc18      	bgt.n	8007e94 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e62:	f7ff fdad 	bl	80079c0 <xTaskGetSchedulerState>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d109      	bne.n	8007e80 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e6c:	4b10      	ldr	r3, [pc, #64]	@ (8007eb0 <xTimerGenericCommand+0x98>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	f107 0110 	add.w	r1, r7, #16
 8007e74:	2300      	movs	r3, #0
 8007e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e78:	f7fe fa22 	bl	80062c0 <xQueueGenericSend>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e7e:	e012      	b.n	8007ea6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e80:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <xTimerGenericCommand+0x98>)
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	f107 0110 	add.w	r1, r7, #16
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7fe fa18 	bl	80062c0 <xQueueGenericSend>
 8007e90:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e92:	e008      	b.n	8007ea6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e94:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <xTimerGenericCommand+0x98>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	f107 0110 	add.w	r1, r7, #16
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	f7fe fb10 	bl	80064c4 <xQueueGenericSendFromISR>
 8007ea4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3728      	adds	r7, #40	@ 0x28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20001020 	.word	0x20001020

08007eb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebe:	4b23      	ldr	r3, [pc, #140]	@ (8007f4c <prvProcessExpiredTimer+0x98>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fd ffcf 	bl	8005e70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d023      	beq.n	8007f28 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	18d1      	adds	r1, r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	6978      	ldr	r0, [r7, #20]
 8007eee:	f000 f8d5 	bl	800809c <prvInsertTimerInActiveList>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d020      	beq.n	8007f3a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	2300      	movs	r3, #0
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	2100      	movs	r1, #0
 8007f02:	6978      	ldr	r0, [r7, #20]
 8007f04:	f7ff ff88 	bl	8007e18 <xTimerGenericCommand>
 8007f08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d114      	bne.n	8007f3a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f2e:	f023 0301 	bic.w	r3, r3, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	6978      	ldr	r0, [r7, #20]
 8007f40:	4798      	blx	r3
}
 8007f42:	bf00      	nop
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20001018 	.word	0x20001018

08007f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f58:	f107 0308 	add.w	r3, r7, #8
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f859 	bl	8008014 <prvGetNextExpireTime>
 8007f62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4619      	mov	r1, r3
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f805 	bl	8007f78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f6e:	f000 f8d7 	bl	8008120 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f72:	bf00      	nop
 8007f74:	e7f0      	b.n	8007f58 <prvTimerTask+0x8>
	...

08007f78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f82:	f7ff f919 	bl	80071b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f866 	bl	800805c <prvSampleTimeNow>
 8007f90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d130      	bne.n	8007ffa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <prvProcessTimerOrBlockTask+0x3c>
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d806      	bhi.n	8007fb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fa6:	f7ff f915 	bl	80071d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff ff81 	bl	8007eb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fb2:	e024      	b.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d008      	beq.n	8007fcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fba:	4b13      	ldr	r3, [pc, #76]	@ (8008008 <prvProcessTimerOrBlockTask+0x90>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <prvProcessTimerOrBlockTask+0x50>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <prvProcessTimerOrBlockTask+0x52>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800800c <prvProcessTimerOrBlockTask+0x94>)
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f7fe fe55 	bl	8006c88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fde:	f7ff f8f9 	bl	80071d4 <xTaskResumeAll>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fe8:	4b09      	ldr	r3, [pc, #36]	@ (8008010 <prvProcessTimerOrBlockTask+0x98>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
}
 8007ff8:	e001      	b.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ffa:	f7ff f8eb 	bl	80071d4 <xTaskResumeAll>
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	2000101c 	.word	0x2000101c
 800800c:	20001020 	.word	0x20001020
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800801c:	4b0e      	ldr	r3, [pc, #56]	@ (8008058 <prvGetNextExpireTime+0x44>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <prvGetNextExpireTime+0x16>
 8008026:	2201      	movs	r2, #1
 8008028:	e000      	b.n	800802c <prvGetNextExpireTime+0x18>
 800802a:	2200      	movs	r2, #0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008038:	4b07      	ldr	r3, [pc, #28]	@ (8008058 <prvGetNextExpireTime+0x44>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e001      	b.n	8008048 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008048:	68fb      	ldr	r3, [r7, #12]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20001018 	.word	0x20001018

0800805c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008064:	f7ff f954 	bl	8007310 <xTaskGetTickCount>
 8008068:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800806a:	4b0b      	ldr	r3, [pc, #44]	@ (8008098 <prvSampleTimeNow+0x3c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	429a      	cmp	r2, r3
 8008072:	d205      	bcs.n	8008080 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008074:	f000 f93a 	bl	80082ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e002      	b.n	8008086 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008086:	4a04      	ldr	r2, [pc, #16]	@ (8008098 <prvSampleTimeNow+0x3c>)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800808c:	68fb      	ldr	r3, [r7, #12]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20001028 	.word	0x20001028

0800809c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d812      	bhi.n	80080e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e01b      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080d6:	4b10      	ldr	r3, [pc, #64]	@ (8008118 <prvInsertTimerInActiveList+0x7c>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fd fe8c 	bl	8005dfe <vListInsert>
 80080e6:	e012      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d206      	bcs.n	80080fe <prvInsertTimerInActiveList+0x62>
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d302      	bcc.n	80080fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e007      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080fe:	4b07      	ldr	r3, [pc, #28]	@ (800811c <prvInsertTimerInActiveList+0x80>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fd fe78 	bl	8005dfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800810e:	697b      	ldr	r3, [r7, #20]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	2000101c 	.word	0x2000101c
 800811c:	20001018 	.word	0x20001018

08008120 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08e      	sub	sp, #56	@ 0x38
 8008124:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008126:	e0ce      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da19      	bge.n	8008162 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800812e:	1d3b      	adds	r3, r7, #4
 8008130:	3304      	adds	r3, #4
 8008132:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10b      	bne.n	8008152 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	61fb      	str	r3, [r7, #28]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008158:	6850      	ldr	r0, [r2, #4]
 800815a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800815c:	6892      	ldr	r2, [r2, #8]
 800815e:	4611      	mov	r1, r2
 8008160:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f2c0 80ae 	blt.w	80082c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d004      	beq.n	8008180 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008178:	3304      	adds	r3, #4
 800817a:	4618      	mov	r0, r3
 800817c:	f7fd fe78 	bl	8005e70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008180:	463b      	mov	r3, r7
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff ff6a 	bl	800805c <prvSampleTimeNow>
 8008188:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b09      	cmp	r3, #9
 800818e:	f200 8097 	bhi.w	80082c0 <prvProcessReceivedCommands+0x1a0>
 8008192:	a201      	add	r2, pc, #4	@ (adr r2, 8008198 <prvProcessReceivedCommands+0x78>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081c1 	.word	0x080081c1
 800819c:	080081c1 	.word	0x080081c1
 80081a0:	080081c1 	.word	0x080081c1
 80081a4:	08008237 	.word	0x08008237
 80081a8:	0800824b 	.word	0x0800824b
 80081ac:	08008297 	.word	0x08008297
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	080081c1 	.word	0x080081c1
 80081b8:	08008237 	.word	0x08008237
 80081bc:	0800824b 	.word	0x0800824b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	18d1      	adds	r1, r2, r3
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e0:	f7ff ff5c 	bl	800809c <prvInsertTimerInActiveList>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d06c      	beq.n	80082c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d061      	beq.n	80082c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	441a      	add	r2, r3
 8008208:	2300      	movs	r3, #0
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	2300      	movs	r3, #0
 800820e:	2100      	movs	r1, #0
 8008210:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008212:	f7ff fe01 	bl	8007e18 <xTimerGenericCommand>
 8008216:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d152      	bne.n	80082c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	61bb      	str	r3, [r7, #24]
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	b2da      	uxtb	r2, r3
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008248:	e03d      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800824a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	b2da      	uxtb	r2, r3
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008260:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	617b      	str	r3, [r7, #20]
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	e7fd      	b.n	800827e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	18d1      	adds	r1, r2, r3
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800828e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008290:	f7ff ff04 	bl	800809c <prvInsertTimerInActiveList>
					break;
 8008294:	e017      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80082a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082a6:	f000 fbe7 	bl	8008a78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082aa:	e00c      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80082be:	e002      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80082c0:	bf00      	nop
 80082c2:	e000      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80082c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082c6:	4b08      	ldr	r3, [pc, #32]	@ (80082e8 <prvProcessReceivedCommands+0x1c8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	1d39      	adds	r1, r7, #4
 80082cc:	2200      	movs	r2, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe f996 	bl	8006600 <xQueueReceive>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f47f af26 	bne.w	8008128 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	3730      	adds	r7, #48	@ 0x30
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20001020 	.word	0x20001020

080082ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082f2:	e049      	b.n	8008388 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082f4:	4b2e      	ldr	r3, [pc, #184]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fe:	4b2c      	ldr	r3, [pc, #176]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fd fdaf 	bl	8005e70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b00      	cmp	r3, #0
 8008326:	d02f      	beq.n	8008388 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4413      	add	r3, r2
 8008330:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d90e      	bls.n	8008358 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008346:	4b1a      	ldr	r3, [pc, #104]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fd fd54 	bl	8005dfe <vListInsert>
 8008356:	e017      	b.n	8008388 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008358:	2300      	movs	r3, #0
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	2300      	movs	r3, #0
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	2100      	movs	r1, #0
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f7ff fd58 	bl	8007e18 <xTimerGenericCommand>
 8008368:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10b      	bne.n	8008388 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	603b      	str	r3, [r7, #0]
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	e7fd      	b.n	8008384 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008388:	4b09      	ldr	r3, [pc, #36]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1b0      	bne.n	80082f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008392:	4b07      	ldr	r3, [pc, #28]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008398:	4b06      	ldr	r3, [pc, #24]	@ (80083b4 <prvSwitchTimerLists+0xc8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a04      	ldr	r2, [pc, #16]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 800839e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083a0:	4a04      	ldr	r2, [pc, #16]	@ (80083b4 <prvSwitchTimerLists+0xc8>)
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6013      	str	r3, [r2, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20001018 	.word	0x20001018
 80083b4:	2000101c 	.word	0x2000101c

080083b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083be:	f000 f96b 	bl	8008698 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083c2:	4b15      	ldr	r3, [pc, #84]	@ (8008418 <prvCheckForValidListAndQueue+0x60>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d120      	bne.n	800840c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083ca:	4814      	ldr	r0, [pc, #80]	@ (800841c <prvCheckForValidListAndQueue+0x64>)
 80083cc:	f7fd fcc6 	bl	8005d5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083d0:	4813      	ldr	r0, [pc, #76]	@ (8008420 <prvCheckForValidListAndQueue+0x68>)
 80083d2:	f7fd fcc3 	bl	8005d5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083d6:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <prvCheckForValidListAndQueue+0x6c>)
 80083d8:	4a10      	ldr	r2, [pc, #64]	@ (800841c <prvCheckForValidListAndQueue+0x64>)
 80083da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083dc:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <prvCheckForValidListAndQueue+0x70>)
 80083de:	4a10      	ldr	r2, [pc, #64]	@ (8008420 <prvCheckForValidListAndQueue+0x68>)
 80083e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083e2:	2300      	movs	r3, #0
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	4b11      	ldr	r3, [pc, #68]	@ (800842c <prvCheckForValidListAndQueue+0x74>)
 80083e8:	4a11      	ldr	r2, [pc, #68]	@ (8008430 <prvCheckForValidListAndQueue+0x78>)
 80083ea:	2110      	movs	r1, #16
 80083ec:	200a      	movs	r0, #10
 80083ee:	f7fd fdd3 	bl	8005f98 <xQueueGenericCreateStatic>
 80083f2:	4603      	mov	r3, r0
 80083f4:	4a08      	ldr	r2, [pc, #32]	@ (8008418 <prvCheckForValidListAndQueue+0x60>)
 80083f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083f8:	4b07      	ldr	r3, [pc, #28]	@ (8008418 <prvCheckForValidListAndQueue+0x60>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008400:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <prvCheckForValidListAndQueue+0x60>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	490b      	ldr	r1, [pc, #44]	@ (8008434 <prvCheckForValidListAndQueue+0x7c>)
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fc14 	bl	8006c34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800840c:	f000 f976 	bl	80086fc <vPortExitCritical>
}
 8008410:	bf00      	nop
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20001020 	.word	0x20001020
 800841c:	20000ff0 	.word	0x20000ff0
 8008420:	20001004 	.word	0x20001004
 8008424:	20001018 	.word	0x20001018
 8008428:	2000101c 	.word	0x2000101c
 800842c:	200010cc 	.word	0x200010cc
 8008430:	2000102c 	.word	0x2000102c
 8008434:	08009d24 	.word	0x08009d24

08008438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3b04      	subs	r3, #4
 8008448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3b04      	subs	r3, #4
 8008456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f023 0201 	bic.w	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3b04      	subs	r3, #4
 8008466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008468:	4a0c      	ldr	r2, [pc, #48]	@ (800849c <pxPortInitialiseStack+0x64>)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b14      	subs	r3, #20
 8008472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3b04      	subs	r3, #4
 800847e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f06f 0202 	mvn.w	r2, #2
 8008486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3b20      	subs	r3, #32
 800848c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800848e:	68fb      	ldr	r3, [r7, #12]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	080084a1 	.word	0x080084a1

080084a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084aa:	4b13      	ldr	r3, [pc, #76]	@ (80084f8 <prvTaskExitError+0x58>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d00b      	beq.n	80084cc <prvTaskExitError+0x2c>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60fb      	str	r3, [r7, #12]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <prvTaskExitError+0x28>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	60bb      	str	r3, [r7, #8]
}
 80084de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084e0:	bf00      	nop
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0fc      	beq.n	80084e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000078 	.word	0x20000078
 80084fc:	00000000 	.word	0x00000000

08008500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008500:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <pxCurrentTCBConst2>)
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	6808      	ldr	r0, [r1, #0]
 8008506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	f380 8809 	msr	PSP, r0
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8811 	msr	BASEPRI, r0
 800851a:	4770      	bx	lr
 800851c:	f3af 8000 	nop.w

08008520 <pxCurrentTCBConst2>:
 8008520:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop

08008528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008528:	4808      	ldr	r0, [pc, #32]	@ (800854c <prvPortStartFirstTask+0x24>)
 800852a:	6800      	ldr	r0, [r0, #0]
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f380 8808 	msr	MSP, r0
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8814 	msr	CONTROL, r0
 800853a:	b662      	cpsie	i
 800853c:	b661      	cpsie	f
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	df00      	svc	0
 8008548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800854a:	bf00      	nop
 800854c:	e000ed08 	.word	0xe000ed08

08008550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008556:	4b47      	ldr	r3, [pc, #284]	@ (8008674 <xPortStartScheduler+0x124>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a47      	ldr	r2, [pc, #284]	@ (8008678 <xPortStartScheduler+0x128>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10b      	bne.n	8008578 <xPortStartScheduler+0x28>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	613b      	str	r3, [r7, #16]
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	e7fd      	b.n	8008574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008578:	4b3e      	ldr	r3, [pc, #248]	@ (8008674 <xPortStartScheduler+0x124>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a3f      	ldr	r2, [pc, #252]	@ (800867c <xPortStartScheduler+0x12c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d10b      	bne.n	800859a <xPortStartScheduler+0x4a>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	60fb      	str	r3, [r7, #12]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800859a:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <xPortStartScheduler+0x130>)
 800859c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	22ff      	movs	r2, #255	@ 0xff
 80085aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	4b31      	ldr	r3, [pc, #196]	@ (8008684 <xPortStartScheduler+0x134>)
 80085c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085c2:	4b31      	ldr	r3, [pc, #196]	@ (8008688 <xPortStartScheduler+0x138>)
 80085c4:	2207      	movs	r2, #7
 80085c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085c8:	e009      	b.n	80085de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80085ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008688 <xPortStartScheduler+0x138>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008688 <xPortStartScheduler+0x138>)
 80085d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e6:	2b80      	cmp	r3, #128	@ 0x80
 80085e8:	d0ef      	beq.n	80085ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085ea:	4b27      	ldr	r3, [pc, #156]	@ (8008688 <xPortStartScheduler+0x138>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1c3 0307 	rsb	r3, r3, #7
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d00b      	beq.n	800860e <xPortStartScheduler+0xbe>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	60bb      	str	r3, [r7, #8]
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800860e:	4b1e      	ldr	r3, [pc, #120]	@ (8008688 <xPortStartScheduler+0x138>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	4a1c      	ldr	r2, [pc, #112]	@ (8008688 <xPortStartScheduler+0x138>)
 8008616:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008618:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <xPortStartScheduler+0x138>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008620:	4a19      	ldr	r2, [pc, #100]	@ (8008688 <xPortStartScheduler+0x138>)
 8008622:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	b2da      	uxtb	r2, r3
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800862c:	4b17      	ldr	r3, [pc, #92]	@ (800868c <xPortStartScheduler+0x13c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a16      	ldr	r2, [pc, #88]	@ (800868c <xPortStartScheduler+0x13c>)
 8008632:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008636:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008638:	4b14      	ldr	r3, [pc, #80]	@ (800868c <xPortStartScheduler+0x13c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a13      	ldr	r2, [pc, #76]	@ (800868c <xPortStartScheduler+0x13c>)
 800863e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008642:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008644:	f000 f8da 	bl	80087fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008648:	4b11      	ldr	r3, [pc, #68]	@ (8008690 <xPortStartScheduler+0x140>)
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800864e:	f000 f8f9 	bl	8008844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008652:	4b10      	ldr	r3, [pc, #64]	@ (8008694 <xPortStartScheduler+0x144>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a0f      	ldr	r2, [pc, #60]	@ (8008694 <xPortStartScheduler+0x144>)
 8008658:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800865c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800865e:	f7ff ff63 	bl	8008528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008662:	f7fe ff1f 	bl	80074a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008666:	f7ff ff1b 	bl	80084a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	e000ed00 	.word	0xe000ed00
 8008678:	410fc271 	.word	0x410fc271
 800867c:	410fc270 	.word	0x410fc270
 8008680:	e000e400 	.word	0xe000e400
 8008684:	2000111c 	.word	0x2000111c
 8008688:	20001120 	.word	0x20001120
 800868c:	e000ed20 	.word	0xe000ed20
 8008690:	20000078 	.word	0x20000078
 8008694:	e000ef34 	.word	0xe000ef34

08008698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	607b      	str	r3, [r7, #4]
}
 80086b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086b2:	4b10      	ldr	r3, [pc, #64]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	4a0e      	ldr	r2, [pc, #56]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086bc:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d110      	bne.n	80086e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086c4:	4b0c      	ldr	r3, [pc, #48]	@ (80086f8 <vPortEnterCritical+0x60>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	603b      	str	r3, [r7, #0]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <vPortEnterCritical+0x4a>
	}
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000078 	.word	0x20000078
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008702:	4b12      	ldr	r3, [pc, #72]	@ (800874c <vPortExitCritical+0x50>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <vPortExitCritical+0x26>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	e7fd      	b.n	800871e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008722:	4b0a      	ldr	r3, [pc, #40]	@ (800874c <vPortExitCritical+0x50>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3b01      	subs	r3, #1
 8008728:	4a08      	ldr	r2, [pc, #32]	@ (800874c <vPortExitCritical+0x50>)
 800872a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800872c:	4b07      	ldr	r3, [pc, #28]	@ (800874c <vPortExitCritical+0x50>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <vPortExitCritical+0x44>
 8008734:	2300      	movs	r3, #0
 8008736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f383 8811 	msr	BASEPRI, r3
}
 800873e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	20000078 	.word	0x20000078

08008750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008750:	f3ef 8009 	mrs	r0, PSP
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4b15      	ldr	r3, [pc, #84]	@ (80087b0 <pxCurrentTCBConst>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f01e 0f10 	tst.w	lr, #16
 8008760:	bf08      	it	eq
 8008762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	6010      	str	r0, [r2, #0]
 800876c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008774:	f380 8811 	msr	BASEPRI, r0
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f7fe fe90 	bl	80074a4 <vTaskSwitchContext>
 8008784:	f04f 0000 	mov.w	r0, #0
 8008788:	f380 8811 	msr	BASEPRI, r0
 800878c:	bc09      	pop	{r0, r3}
 800878e:	6819      	ldr	r1, [r3, #0]
 8008790:	6808      	ldr	r0, [r1, #0]
 8008792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008796:	f01e 0f10 	tst.w	lr, #16
 800879a:	bf08      	it	eq
 800879c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087a0:	f380 8809 	msr	PSP, r0
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst>:
 80087b0:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087d2:	f7fe fdad 	bl	8007330 <xTaskIncrementTick>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087dc:	4b06      	ldr	r3, [pc, #24]	@ (80087f8 <xPortSysTickHandler+0x40>)
 80087de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f383 8811 	msr	BASEPRI, r3
}
 80087ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008800:	4b0b      	ldr	r3, [pc, #44]	@ (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <vPortSetupTimerInterrupt+0x38>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800880c:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <vPortSetupTimerInterrupt+0x3c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0a      	ldr	r2, [pc, #40]	@ (800883c <vPortSetupTimerInterrupt+0x40>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	099b      	lsrs	r3, r3, #6
 8008818:	4a09      	ldr	r2, [pc, #36]	@ (8008840 <vPortSetupTimerInterrupt+0x44>)
 800881a:	3b01      	subs	r3, #1
 800881c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800881e:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008820:	2207      	movs	r2, #7
 8008822:	601a      	str	r2, [r3, #0]
}
 8008824:	bf00      	nop
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	e000e010 	.word	0xe000e010
 8008834:	e000e018 	.word	0xe000e018
 8008838:	2000006c 	.word	0x2000006c
 800883c:	10624dd3 	.word	0x10624dd3
 8008840:	e000e014 	.word	0xe000e014

08008844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008844:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008854 <vPortEnableVFP+0x10>
 8008848:	6801      	ldr	r1, [r0, #0]
 800884a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800884e:	6001      	str	r1, [r0, #0]
 8008850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008852:	bf00      	nop
 8008854:	e000ed88 	.word	0xe000ed88

08008858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800885e:	f3ef 8305 	mrs	r3, IPSR
 8008862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b0f      	cmp	r3, #15
 8008868:	d915      	bls.n	8008896 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800886a:	4a18      	ldr	r2, [pc, #96]	@ (80088cc <vPortValidateInterruptPriority+0x74>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008874:	4b16      	ldr	r3, [pc, #88]	@ (80088d0 <vPortValidateInterruptPriority+0x78>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	7afa      	ldrb	r2, [r7, #11]
 800887a:	429a      	cmp	r2, r3
 800887c:	d20b      	bcs.n	8008896 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	e7fd      	b.n	8008892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008896:	4b0f      	ldr	r3, [pc, #60]	@ (80088d4 <vPortValidateInterruptPriority+0x7c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800889e:	4b0e      	ldr	r3, [pc, #56]	@ (80088d8 <vPortValidateInterruptPriority+0x80>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d90b      	bls.n	80088be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	603b      	str	r3, [r7, #0]
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	e7fd      	b.n	80088ba <vPortValidateInterruptPriority+0x62>
	}
 80088be:	bf00      	nop
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	e000e3f0 	.word	0xe000e3f0
 80088d0:	2000111c 	.word	0x2000111c
 80088d4:	e000ed0c 	.word	0xe000ed0c
 80088d8:	20001120 	.word	0x20001120

080088dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	@ 0x28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088e8:	f7fe fc66 	bl	80071b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008a60 <pvPortMalloc+0x184>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088f4:	f000 f924 	bl	8008b40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008a64 <pvPortMalloc+0x188>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	f040 8095 	bne.w	8008a30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01e      	beq.n	800894a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800890c:	2208      	movs	r2, #8
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	2b00      	cmp	r3, #0
 800891c:	d015      	beq.n	800894a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f023 0307 	bic.w	r3, r3, #7
 8008924:	3308      	adds	r3, #8
 8008926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <pvPortMalloc+0x6e>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	617b      	str	r3, [r7, #20]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d06f      	beq.n	8008a30 <pvPortMalloc+0x154>
 8008950:	4b45      	ldr	r3, [pc, #276]	@ (8008a68 <pvPortMalloc+0x18c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d86a      	bhi.n	8008a30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800895a:	4b44      	ldr	r3, [pc, #272]	@ (8008a6c <pvPortMalloc+0x190>)
 800895c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800895e:	4b43      	ldr	r3, [pc, #268]	@ (8008a6c <pvPortMalloc+0x190>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008964:	e004      	b.n	8008970 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d903      	bls.n	8008982 <pvPortMalloc+0xa6>
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008982:	4b37      	ldr	r3, [pc, #220]	@ (8008a60 <pvPortMalloc+0x184>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008988:	429a      	cmp	r2, r3
 800898a:	d051      	beq.n	8008a30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2208      	movs	r2, #8
 8008992:	4413      	add	r3, r2
 8008994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	2308      	movs	r3, #8
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d920      	bls.n	80089f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <pvPortMalloc+0xfc>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	613b      	str	r3, [r7, #16]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089ea:	69b8      	ldr	r0, [r7, #24]
 80089ec:	f000 f90a 	bl	8008c04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a68 <pvPortMalloc+0x18c>)
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008a68 <pvPortMalloc+0x18c>)
 80089fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008a68 <pvPortMalloc+0x18c>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b1b      	ldr	r3, [pc, #108]	@ (8008a70 <pvPortMalloc+0x194>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d203      	bcs.n	8008a12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a0a:	4b17      	ldr	r3, [pc, #92]	@ (8008a68 <pvPortMalloc+0x18c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a18      	ldr	r2, [pc, #96]	@ (8008a70 <pvPortMalloc+0x194>)
 8008a10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b13      	ldr	r3, [pc, #76]	@ (8008a64 <pvPortMalloc+0x188>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a26:	4b13      	ldr	r3, [pc, #76]	@ (8008a74 <pvPortMalloc+0x198>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	4a11      	ldr	r2, [pc, #68]	@ (8008a74 <pvPortMalloc+0x198>)
 8008a2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a30:	f7fe fbd0 	bl	80071d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <pvPortMalloc+0x17a>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	60fb      	str	r3, [r7, #12]
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	e7fd      	b.n	8008a52 <pvPortMalloc+0x176>
	return pvReturn;
 8008a56:	69fb      	ldr	r3, [r7, #28]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3728      	adds	r7, #40	@ 0x28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20004d2c 	.word	0x20004d2c
 8008a64:	20004d40 	.word	0x20004d40
 8008a68:	20004d30 	.word	0x20004d30
 8008a6c:	20004d24 	.word	0x20004d24
 8008a70:	20004d34 	.word	0x20004d34
 8008a74:	20004d38 	.word	0x20004d38

08008a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d04f      	beq.n	8008b2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4413      	add	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	4b25      	ldr	r3, [pc, #148]	@ (8008b34 <vPortFree+0xbc>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10b      	bne.n	8008abe <vPortFree+0x46>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00b      	beq.n	8008ade <vPortFree+0x66>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	bf00      	nop
 8008adc:	e7fd      	b.n	8008ada <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	4b14      	ldr	r3, [pc, #80]	@ (8008b34 <vPortFree+0xbc>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01e      	beq.n	8008b2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d11a      	bne.n	8008b2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b34 <vPortFree+0xbc>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	43db      	mvns	r3, r3
 8008afe:	401a      	ands	r2, r3
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b04:	f7fe fb58 	bl	80071b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b38 <vPortFree+0xc0>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4413      	add	r3, r2
 8008b12:	4a09      	ldr	r2, [pc, #36]	@ (8008b38 <vPortFree+0xc0>)
 8008b14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b16:	6938      	ldr	r0, [r7, #16]
 8008b18:	f000 f874 	bl	8008c04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b1c:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <vPortFree+0xc4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3301      	adds	r3, #1
 8008b22:	4a06      	ldr	r2, [pc, #24]	@ (8008b3c <vPortFree+0xc4>)
 8008b24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b26:	f7fe fb55 	bl	80071d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20004d40 	.word	0x20004d40
 8008b38:	20004d30 	.word	0x20004d30
 8008b3c:	20004d3c 	.word	0x20004d3c

08008b40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008b4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b4c:	4b27      	ldr	r3, [pc, #156]	@ (8008bec <prvHeapInit+0xac>)
 8008b4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f003 0307 	and.w	r3, r3, #7
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00c      	beq.n	8008b74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3307      	adds	r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 0307 	bic.w	r3, r3, #7
 8008b66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bec <prvHeapInit+0xac>)
 8008b70:	4413      	add	r3, r2
 8008b72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b78:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf0 <prvHeapInit+0xb0>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf0 <prvHeapInit+0xb0>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	4413      	add	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0307 	bic.w	r3, r3, #7
 8008b9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4a15      	ldr	r2, [pc, #84]	@ (8008bf4 <prvHeapInit+0xb4>)
 8008ba0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ba2:	4b14      	ldr	r3, [pc, #80]	@ (8008bf4 <prvHeapInit+0xb4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008baa:	4b12      	ldr	r3, [pc, #72]	@ (8008bf4 <prvHeapInit+0xb4>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	1ad2      	subs	r2, r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <prvHeapInit+0xb4>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8008bf8 <prvHeapInit+0xb8>)
 8008bce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	4a09      	ldr	r2, [pc, #36]	@ (8008bfc <prvHeapInit+0xbc>)
 8008bd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bd8:	4b09      	ldr	r3, [pc, #36]	@ (8008c00 <prvHeapInit+0xc0>)
 8008bda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008bde:	601a      	str	r2, [r3, #0]
}
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	20001124 	.word	0x20001124
 8008bf0:	20004d24 	.word	0x20004d24
 8008bf4:	20004d2c 	.word	0x20004d2c
 8008bf8:	20004d34 	.word	0x20004d34
 8008bfc:	20004d30 	.word	0x20004d30
 8008c00:	20004d40 	.word	0x20004d40

08008c04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c0c:	4b28      	ldr	r3, [pc, #160]	@ (8008cb0 <prvInsertBlockIntoFreeList+0xac>)
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e002      	b.n	8008c18 <prvInsertBlockIntoFreeList+0x14>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d8f7      	bhi.n	8008c12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d108      	bne.n	8008c46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	441a      	add	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	441a      	add	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d118      	bne.n	8008c8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4b15      	ldr	r3, [pc, #84]	@ (8008cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d00d      	beq.n	8008c82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	441a      	add	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	e008      	b.n	8008c94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c82:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	e003      	b.n	8008c94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d002      	beq.n	8008ca2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ca2:	bf00      	nop
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	20004d24 	.word	0x20004d24
 8008cb4:	20004d2c 	.word	0x20004d2c

08008cb8 <std>:
 8008cb8:	2300      	movs	r3, #0
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cc6:	6083      	str	r3, [r0, #8]
 8008cc8:	8181      	strh	r1, [r0, #12]
 8008cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ccc:	81c2      	strh	r2, [r0, #14]
 8008cce:	6183      	str	r3, [r0, #24]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	305c      	adds	r0, #92	@ 0x5c
 8008cd6:	f000 f90e 	bl	8008ef6 <memset>
 8008cda:	4b0d      	ldr	r3, [pc, #52]	@ (8008d10 <std+0x58>)
 8008cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <std+0x5c>)
 8008ce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <std+0x60>)
 8008ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d1c <std+0x64>)
 8008ce8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cea:	4b0d      	ldr	r3, [pc, #52]	@ (8008d20 <std+0x68>)
 8008cec:	6224      	str	r4, [r4, #32]
 8008cee:	429c      	cmp	r4, r3
 8008cf0:	d006      	beq.n	8008d00 <std+0x48>
 8008cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cf6:	4294      	cmp	r4, r2
 8008cf8:	d002      	beq.n	8008d00 <std+0x48>
 8008cfa:	33d0      	adds	r3, #208	@ 0xd0
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	d105      	bne.n	8008d0c <std+0x54>
 8008d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d08:	f000 b9c4 	b.w	8009094 <__retarget_lock_init_recursive>
 8008d0c:	bd10      	pop	{r4, pc}
 8008d0e:	bf00      	nop
 8008d10:	08008e71 	.word	0x08008e71
 8008d14:	08008e93 	.word	0x08008e93
 8008d18:	08008ecb 	.word	0x08008ecb
 8008d1c:	08008eef 	.word	0x08008eef
 8008d20:	20004d44 	.word	0x20004d44

08008d24 <stdio_exit_handler>:
 8008d24:	4a02      	ldr	r2, [pc, #8]	@ (8008d30 <stdio_exit_handler+0xc>)
 8008d26:	4903      	ldr	r1, [pc, #12]	@ (8008d34 <stdio_exit_handler+0x10>)
 8008d28:	4803      	ldr	r0, [pc, #12]	@ (8008d38 <stdio_exit_handler+0x14>)
 8008d2a:	f000 b869 	b.w	8008e00 <_fwalk_sglue>
 8008d2e:	bf00      	nop
 8008d30:	2000007c 	.word	0x2000007c
 8008d34:	08009951 	.word	0x08009951
 8008d38:	2000008c 	.word	0x2000008c

08008d3c <cleanup_stdio>:
 8008d3c:	6841      	ldr	r1, [r0, #4]
 8008d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d70 <cleanup_stdio+0x34>)
 8008d40:	4299      	cmp	r1, r3
 8008d42:	b510      	push	{r4, lr}
 8008d44:	4604      	mov	r4, r0
 8008d46:	d001      	beq.n	8008d4c <cleanup_stdio+0x10>
 8008d48:	f000 fe02 	bl	8009950 <_fflush_r>
 8008d4c:	68a1      	ldr	r1, [r4, #8]
 8008d4e:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <cleanup_stdio+0x38>)
 8008d50:	4299      	cmp	r1, r3
 8008d52:	d002      	beq.n	8008d5a <cleanup_stdio+0x1e>
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 fdfb 	bl	8009950 <_fflush_r>
 8008d5a:	68e1      	ldr	r1, [r4, #12]
 8008d5c:	4b06      	ldr	r3, [pc, #24]	@ (8008d78 <cleanup_stdio+0x3c>)
 8008d5e:	4299      	cmp	r1, r3
 8008d60:	d004      	beq.n	8008d6c <cleanup_stdio+0x30>
 8008d62:	4620      	mov	r0, r4
 8008d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d68:	f000 bdf2 	b.w	8009950 <_fflush_r>
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	bf00      	nop
 8008d70:	20004d44 	.word	0x20004d44
 8008d74:	20004dac 	.word	0x20004dac
 8008d78:	20004e14 	.word	0x20004e14

08008d7c <global_stdio_init.part.0>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008dac <global_stdio_init.part.0+0x30>)
 8008d80:	4c0b      	ldr	r4, [pc, #44]	@ (8008db0 <global_stdio_init.part.0+0x34>)
 8008d82:	4a0c      	ldr	r2, [pc, #48]	@ (8008db4 <global_stdio_init.part.0+0x38>)
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	4620      	mov	r0, r4
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2104      	movs	r1, #4
 8008d8c:	f7ff ff94 	bl	8008cb8 <std>
 8008d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d94:	2201      	movs	r2, #1
 8008d96:	2109      	movs	r1, #9
 8008d98:	f7ff ff8e 	bl	8008cb8 <std>
 8008d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008da0:	2202      	movs	r2, #2
 8008da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da6:	2112      	movs	r1, #18
 8008da8:	f7ff bf86 	b.w	8008cb8 <std>
 8008dac:	20004e7c 	.word	0x20004e7c
 8008db0:	20004d44 	.word	0x20004d44
 8008db4:	08008d25 	.word	0x08008d25

08008db8 <__sfp_lock_acquire>:
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__sfp_lock_acquire+0x8>)
 8008dba:	f000 b96c 	b.w	8009096 <__retarget_lock_acquire_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20004e85 	.word	0x20004e85

08008dc4 <__sfp_lock_release>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	@ (8008dcc <__sfp_lock_release+0x8>)
 8008dc6:	f000 b967 	b.w	8009098 <__retarget_lock_release_recursive>
 8008dca:	bf00      	nop
 8008dcc:	20004e85 	.word	0x20004e85

08008dd0 <__sinit>:
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	f7ff fff0 	bl	8008db8 <__sfp_lock_acquire>
 8008dd8:	6a23      	ldr	r3, [r4, #32]
 8008dda:	b11b      	cbz	r3, 8008de4 <__sinit+0x14>
 8008ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de0:	f7ff bff0 	b.w	8008dc4 <__sfp_lock_release>
 8008de4:	4b04      	ldr	r3, [pc, #16]	@ (8008df8 <__sinit+0x28>)
 8008de6:	6223      	str	r3, [r4, #32]
 8008de8:	4b04      	ldr	r3, [pc, #16]	@ (8008dfc <__sinit+0x2c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1f5      	bne.n	8008ddc <__sinit+0xc>
 8008df0:	f7ff ffc4 	bl	8008d7c <global_stdio_init.part.0>
 8008df4:	e7f2      	b.n	8008ddc <__sinit+0xc>
 8008df6:	bf00      	nop
 8008df8:	08008d3d 	.word	0x08008d3d
 8008dfc:	20004e7c 	.word	0x20004e7c

08008e00 <_fwalk_sglue>:
 8008e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e04:	4607      	mov	r7, r0
 8008e06:	4688      	mov	r8, r1
 8008e08:	4614      	mov	r4, r2
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e10:	f1b9 0901 	subs.w	r9, r9, #1
 8008e14:	d505      	bpl.n	8008e22 <_fwalk_sglue+0x22>
 8008e16:	6824      	ldr	r4, [r4, #0]
 8008e18:	2c00      	cmp	r4, #0
 8008e1a:	d1f7      	bne.n	8008e0c <_fwalk_sglue+0xc>
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d907      	bls.n	8008e38 <_fwalk_sglue+0x38>
 8008e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	d003      	beq.n	8008e38 <_fwalk_sglue+0x38>
 8008e30:	4629      	mov	r1, r5
 8008e32:	4638      	mov	r0, r7
 8008e34:	47c0      	blx	r8
 8008e36:	4306      	orrs	r6, r0
 8008e38:	3568      	adds	r5, #104	@ 0x68
 8008e3a:	e7e9      	b.n	8008e10 <_fwalk_sglue+0x10>

08008e3c <iprintf>:
 8008e3c:	b40f      	push	{r0, r1, r2, r3}
 8008e3e:	b507      	push	{r0, r1, r2, lr}
 8008e40:	4906      	ldr	r1, [pc, #24]	@ (8008e5c <iprintf+0x20>)
 8008e42:	ab04      	add	r3, sp, #16
 8008e44:	6808      	ldr	r0, [r1, #0]
 8008e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4a:	6881      	ldr	r1, [r0, #8]
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	f000 fa55 	bl	80092fc <_vfiprintf_r>
 8008e52:	b003      	add	sp, #12
 8008e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e58:	b004      	add	sp, #16
 8008e5a:	4770      	bx	lr
 8008e5c:	20000088 	.word	0x20000088

08008e60 <putchar>:
 8008e60:	4b02      	ldr	r3, [pc, #8]	@ (8008e6c <putchar+0xc>)
 8008e62:	4601      	mov	r1, r0
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	6882      	ldr	r2, [r0, #8]
 8008e68:	f000 bd9a 	b.w	80099a0 <_putc_r>
 8008e6c:	20000088 	.word	0x20000088

08008e70 <__sread>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	460c      	mov	r4, r1
 8008e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e78:	f000 f8be 	bl	8008ff8 <_read_r>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	bfab      	itete	ge
 8008e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e82:	89a3      	ldrhlt	r3, [r4, #12]
 8008e84:	181b      	addge	r3, r3, r0
 8008e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e8a:	bfac      	ite	ge
 8008e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e8e:	81a3      	strhlt	r3, [r4, #12]
 8008e90:	bd10      	pop	{r4, pc}

08008e92 <__swrite>:
 8008e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	461f      	mov	r7, r3
 8008e98:	898b      	ldrh	r3, [r1, #12]
 8008e9a:	05db      	lsls	r3, r3, #23
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	4616      	mov	r6, r2
 8008ea2:	d505      	bpl.n	8008eb0 <__swrite+0x1e>
 8008ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f000 f892 	bl	8008fd4 <_lseek_r>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec6:	f000 b8a9 	b.w	800901c <_write_r>

08008eca <__sseek>:
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	460c      	mov	r4, r1
 8008ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed2:	f000 f87f 	bl	8008fd4 <_lseek_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	bf15      	itete	ne
 8008edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ee6:	81a3      	strheq	r3, [r4, #12]
 8008ee8:	bf18      	it	ne
 8008eea:	81a3      	strhne	r3, [r4, #12]
 8008eec:	bd10      	pop	{r4, pc}

08008eee <__sclose>:
 8008eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef2:	f000 b809 	b.w	8008f08 <_close_r>

08008ef6 <memset>:
 8008ef6:	4402      	add	r2, r0
 8008ef8:	4603      	mov	r3, r0
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d100      	bne.n	8008f00 <memset+0xa>
 8008efe:	4770      	bx	lr
 8008f00:	f803 1b01 	strb.w	r1, [r3], #1
 8008f04:	e7f9      	b.n	8008efa <memset+0x4>
	...

08008f08 <_close_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d06      	ldr	r5, [pc, #24]	@ (8008f24 <_close_r+0x1c>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	f7f8 fa8b 	bl	800142e <_close>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_close_r+0x1a>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_close_r+0x1a>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	20004e80 	.word	0x20004e80

08008f28 <_reclaim_reent>:
 8008f28:	4b29      	ldr	r3, [pc, #164]	@ (8008fd0 <_reclaim_reent+0xa8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4283      	cmp	r3, r0
 8008f2e:	b570      	push	{r4, r5, r6, lr}
 8008f30:	4604      	mov	r4, r0
 8008f32:	d04b      	beq.n	8008fcc <_reclaim_reent+0xa4>
 8008f34:	69c3      	ldr	r3, [r0, #28]
 8008f36:	b1ab      	cbz	r3, 8008f64 <_reclaim_reent+0x3c>
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	b16b      	cbz	r3, 8008f58 <_reclaim_reent+0x30>
 8008f3c:	2500      	movs	r5, #0
 8008f3e:	69e3      	ldr	r3, [r4, #28]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	5959      	ldr	r1, [r3, r5]
 8008f44:	2900      	cmp	r1, #0
 8008f46:	d13b      	bne.n	8008fc0 <_reclaim_reent+0x98>
 8008f48:	3504      	adds	r5, #4
 8008f4a:	2d80      	cmp	r5, #128	@ 0x80
 8008f4c:	d1f7      	bne.n	8008f3e <_reclaim_reent+0x16>
 8008f4e:	69e3      	ldr	r3, [r4, #28]
 8008f50:	4620      	mov	r0, r4
 8008f52:	68d9      	ldr	r1, [r3, #12]
 8008f54:	f000 f8b0 	bl	80090b8 <_free_r>
 8008f58:	69e3      	ldr	r3, [r4, #28]
 8008f5a:	6819      	ldr	r1, [r3, #0]
 8008f5c:	b111      	cbz	r1, 8008f64 <_reclaim_reent+0x3c>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f000 f8aa 	bl	80090b8 <_free_r>
 8008f64:	6961      	ldr	r1, [r4, #20]
 8008f66:	b111      	cbz	r1, 8008f6e <_reclaim_reent+0x46>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 f8a5 	bl	80090b8 <_free_r>
 8008f6e:	69e1      	ldr	r1, [r4, #28]
 8008f70:	b111      	cbz	r1, 8008f78 <_reclaim_reent+0x50>
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 f8a0 	bl	80090b8 <_free_r>
 8008f78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008f7a:	b111      	cbz	r1, 8008f82 <_reclaim_reent+0x5a>
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 f89b 	bl	80090b8 <_free_r>
 8008f82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f84:	b111      	cbz	r1, 8008f8c <_reclaim_reent+0x64>
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 f896 	bl	80090b8 <_free_r>
 8008f8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008f8e:	b111      	cbz	r1, 8008f96 <_reclaim_reent+0x6e>
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 f891 	bl	80090b8 <_free_r>
 8008f96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008f98:	b111      	cbz	r1, 8008fa0 <_reclaim_reent+0x78>
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 f88c 	bl	80090b8 <_free_r>
 8008fa0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008fa2:	b111      	cbz	r1, 8008faa <_reclaim_reent+0x82>
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f000 f887 	bl	80090b8 <_free_r>
 8008faa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008fac:	b111      	cbz	r1, 8008fb4 <_reclaim_reent+0x8c>
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 f882 	bl	80090b8 <_free_r>
 8008fb4:	6a23      	ldr	r3, [r4, #32]
 8008fb6:	b14b      	cbz	r3, 8008fcc <_reclaim_reent+0xa4>
 8008fb8:	4620      	mov	r0, r4
 8008fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fbe:	4718      	bx	r3
 8008fc0:	680e      	ldr	r6, [r1, #0]
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f878 	bl	80090b8 <_free_r>
 8008fc8:	4631      	mov	r1, r6
 8008fca:	e7bb      	b.n	8008f44 <_reclaim_reent+0x1c>
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000088 	.word	0x20000088

08008fd4 <_lseek_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4d07      	ldr	r5, [pc, #28]	@ (8008ff4 <_lseek_r+0x20>)
 8008fd8:	4604      	mov	r4, r0
 8008fda:	4608      	mov	r0, r1
 8008fdc:	4611      	mov	r1, r2
 8008fde:	2200      	movs	r2, #0
 8008fe0:	602a      	str	r2, [r5, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f7f8 fa4a 	bl	800147c <_lseek>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_lseek_r+0x1e>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_lseek_r+0x1e>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20004e80 	.word	0x20004e80

08008ff8 <_read_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	@ (8009018 <_read_r+0x20>)
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	4608      	mov	r0, r1
 8009000:	4611      	mov	r1, r2
 8009002:	2200      	movs	r2, #0
 8009004:	602a      	str	r2, [r5, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f7f8 f9d8 	bl	80013bc <_read>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_read_r+0x1e>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_read_r+0x1e>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20004e80 	.word	0x20004e80

0800901c <_write_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d07      	ldr	r5, [pc, #28]	@ (800903c <_write_r+0x20>)
 8009020:	4604      	mov	r4, r0
 8009022:	4608      	mov	r0, r1
 8009024:	4611      	mov	r1, r2
 8009026:	2200      	movs	r2, #0
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7f8 f9e3 	bl	80013f6 <_write>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_write_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_write_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20004e80 	.word	0x20004e80

08009040 <__errno>:
 8009040:	4b01      	ldr	r3, [pc, #4]	@ (8009048 <__errno+0x8>)
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000088 	.word	0x20000088

0800904c <__libc_init_array>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4d0d      	ldr	r5, [pc, #52]	@ (8009084 <__libc_init_array+0x38>)
 8009050:	4c0d      	ldr	r4, [pc, #52]	@ (8009088 <__libc_init_array+0x3c>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	2600      	movs	r6, #0
 8009058:	42a6      	cmp	r6, r4
 800905a:	d109      	bne.n	8009070 <__libc_init_array+0x24>
 800905c:	4d0b      	ldr	r5, [pc, #44]	@ (800908c <__libc_init_array+0x40>)
 800905e:	4c0c      	ldr	r4, [pc, #48]	@ (8009090 <__libc_init_array+0x44>)
 8009060:	f000 fdfa 	bl	8009c58 <_init>
 8009064:	1b64      	subs	r4, r4, r5
 8009066:	10a4      	asrs	r4, r4, #2
 8009068:	2600      	movs	r6, #0
 800906a:	42a6      	cmp	r6, r4
 800906c:	d105      	bne.n	800907a <__libc_init_array+0x2e>
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	f855 3b04 	ldr.w	r3, [r5], #4
 8009074:	4798      	blx	r3
 8009076:	3601      	adds	r6, #1
 8009078:	e7ee      	b.n	8009058 <__libc_init_array+0xc>
 800907a:	f855 3b04 	ldr.w	r3, [r5], #4
 800907e:	4798      	blx	r3
 8009080:	3601      	adds	r6, #1
 8009082:	e7f2      	b.n	800906a <__libc_init_array+0x1e>
 8009084:	08009e0c 	.word	0x08009e0c
 8009088:	08009e0c 	.word	0x08009e0c
 800908c:	08009e0c 	.word	0x08009e0c
 8009090:	08009e10 	.word	0x08009e10

08009094 <__retarget_lock_init_recursive>:
 8009094:	4770      	bx	lr

08009096 <__retarget_lock_acquire_recursive>:
 8009096:	4770      	bx	lr

08009098 <__retarget_lock_release_recursive>:
 8009098:	4770      	bx	lr

0800909a <memcpy>:
 800909a:	440a      	add	r2, r1
 800909c:	4291      	cmp	r1, r2
 800909e:	f100 33ff 	add.w	r3, r0, #4294967295
 80090a2:	d100      	bne.n	80090a6 <memcpy+0xc>
 80090a4:	4770      	bx	lr
 80090a6:	b510      	push	{r4, lr}
 80090a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090b0:	4291      	cmp	r1, r2
 80090b2:	d1f9      	bne.n	80090a8 <memcpy+0xe>
 80090b4:	bd10      	pop	{r4, pc}
	...

080090b8 <_free_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4605      	mov	r5, r0
 80090bc:	2900      	cmp	r1, #0
 80090be:	d041      	beq.n	8009144 <_free_r+0x8c>
 80090c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090c4:	1f0c      	subs	r4, r1, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bfb8      	it	lt
 80090ca:	18e4      	addlt	r4, r4, r3
 80090cc:	f000 f8e0 	bl	8009290 <__malloc_lock>
 80090d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009148 <_free_r+0x90>)
 80090d2:	6813      	ldr	r3, [r2, #0]
 80090d4:	b933      	cbnz	r3, 80090e4 <_free_r+0x2c>
 80090d6:	6063      	str	r3, [r4, #4]
 80090d8:	6014      	str	r4, [r2, #0]
 80090da:	4628      	mov	r0, r5
 80090dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e0:	f000 b8dc 	b.w	800929c <__malloc_unlock>
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	d908      	bls.n	80090fa <_free_r+0x42>
 80090e8:	6820      	ldr	r0, [r4, #0]
 80090ea:	1821      	adds	r1, r4, r0
 80090ec:	428b      	cmp	r3, r1
 80090ee:	bf01      	itttt	eq
 80090f0:	6819      	ldreq	r1, [r3, #0]
 80090f2:	685b      	ldreq	r3, [r3, #4]
 80090f4:	1809      	addeq	r1, r1, r0
 80090f6:	6021      	streq	r1, [r4, #0]
 80090f8:	e7ed      	b.n	80090d6 <_free_r+0x1e>
 80090fa:	461a      	mov	r2, r3
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	b10b      	cbz	r3, 8009104 <_free_r+0x4c>
 8009100:	42a3      	cmp	r3, r4
 8009102:	d9fa      	bls.n	80090fa <_free_r+0x42>
 8009104:	6811      	ldr	r1, [r2, #0]
 8009106:	1850      	adds	r0, r2, r1
 8009108:	42a0      	cmp	r0, r4
 800910a:	d10b      	bne.n	8009124 <_free_r+0x6c>
 800910c:	6820      	ldr	r0, [r4, #0]
 800910e:	4401      	add	r1, r0
 8009110:	1850      	adds	r0, r2, r1
 8009112:	4283      	cmp	r3, r0
 8009114:	6011      	str	r1, [r2, #0]
 8009116:	d1e0      	bne.n	80090da <_free_r+0x22>
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	6053      	str	r3, [r2, #4]
 800911e:	4408      	add	r0, r1
 8009120:	6010      	str	r0, [r2, #0]
 8009122:	e7da      	b.n	80090da <_free_r+0x22>
 8009124:	d902      	bls.n	800912c <_free_r+0x74>
 8009126:	230c      	movs	r3, #12
 8009128:	602b      	str	r3, [r5, #0]
 800912a:	e7d6      	b.n	80090da <_free_r+0x22>
 800912c:	6820      	ldr	r0, [r4, #0]
 800912e:	1821      	adds	r1, r4, r0
 8009130:	428b      	cmp	r3, r1
 8009132:	bf04      	itt	eq
 8009134:	6819      	ldreq	r1, [r3, #0]
 8009136:	685b      	ldreq	r3, [r3, #4]
 8009138:	6063      	str	r3, [r4, #4]
 800913a:	bf04      	itt	eq
 800913c:	1809      	addeq	r1, r1, r0
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	6054      	str	r4, [r2, #4]
 8009142:	e7ca      	b.n	80090da <_free_r+0x22>
 8009144:	bd38      	pop	{r3, r4, r5, pc}
 8009146:	bf00      	nop
 8009148:	20004e8c 	.word	0x20004e8c

0800914c <sbrk_aligned>:
 800914c:	b570      	push	{r4, r5, r6, lr}
 800914e:	4e0f      	ldr	r6, [pc, #60]	@ (800918c <sbrk_aligned+0x40>)
 8009150:	460c      	mov	r4, r1
 8009152:	6831      	ldr	r1, [r6, #0]
 8009154:	4605      	mov	r5, r0
 8009156:	b911      	cbnz	r1, 800915e <sbrk_aligned+0x12>
 8009158:	f000 fcea 	bl	8009b30 <_sbrk_r>
 800915c:	6030      	str	r0, [r6, #0]
 800915e:	4621      	mov	r1, r4
 8009160:	4628      	mov	r0, r5
 8009162:	f000 fce5 	bl	8009b30 <_sbrk_r>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d103      	bne.n	8009172 <sbrk_aligned+0x26>
 800916a:	f04f 34ff 	mov.w	r4, #4294967295
 800916e:	4620      	mov	r0, r4
 8009170:	bd70      	pop	{r4, r5, r6, pc}
 8009172:	1cc4      	adds	r4, r0, #3
 8009174:	f024 0403 	bic.w	r4, r4, #3
 8009178:	42a0      	cmp	r0, r4
 800917a:	d0f8      	beq.n	800916e <sbrk_aligned+0x22>
 800917c:	1a21      	subs	r1, r4, r0
 800917e:	4628      	mov	r0, r5
 8009180:	f000 fcd6 	bl	8009b30 <_sbrk_r>
 8009184:	3001      	adds	r0, #1
 8009186:	d1f2      	bne.n	800916e <sbrk_aligned+0x22>
 8009188:	e7ef      	b.n	800916a <sbrk_aligned+0x1e>
 800918a:	bf00      	nop
 800918c:	20004e88 	.word	0x20004e88

08009190 <_malloc_r>:
 8009190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009194:	1ccd      	adds	r5, r1, #3
 8009196:	f025 0503 	bic.w	r5, r5, #3
 800919a:	3508      	adds	r5, #8
 800919c:	2d0c      	cmp	r5, #12
 800919e:	bf38      	it	cc
 80091a0:	250c      	movcc	r5, #12
 80091a2:	2d00      	cmp	r5, #0
 80091a4:	4606      	mov	r6, r0
 80091a6:	db01      	blt.n	80091ac <_malloc_r+0x1c>
 80091a8:	42a9      	cmp	r1, r5
 80091aa:	d904      	bls.n	80091b6 <_malloc_r+0x26>
 80091ac:	230c      	movs	r3, #12
 80091ae:	6033      	str	r3, [r6, #0]
 80091b0:	2000      	movs	r0, #0
 80091b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800928c <_malloc_r+0xfc>
 80091ba:	f000 f869 	bl	8009290 <__malloc_lock>
 80091be:	f8d8 3000 	ldr.w	r3, [r8]
 80091c2:	461c      	mov	r4, r3
 80091c4:	bb44      	cbnz	r4, 8009218 <_malloc_r+0x88>
 80091c6:	4629      	mov	r1, r5
 80091c8:	4630      	mov	r0, r6
 80091ca:	f7ff ffbf 	bl	800914c <sbrk_aligned>
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	4604      	mov	r4, r0
 80091d2:	d158      	bne.n	8009286 <_malloc_r+0xf6>
 80091d4:	f8d8 4000 	ldr.w	r4, [r8]
 80091d8:	4627      	mov	r7, r4
 80091da:	2f00      	cmp	r7, #0
 80091dc:	d143      	bne.n	8009266 <_malloc_r+0xd6>
 80091de:	2c00      	cmp	r4, #0
 80091e0:	d04b      	beq.n	800927a <_malloc_r+0xea>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	4639      	mov	r1, r7
 80091e6:	4630      	mov	r0, r6
 80091e8:	eb04 0903 	add.w	r9, r4, r3
 80091ec:	f000 fca0 	bl	8009b30 <_sbrk_r>
 80091f0:	4581      	cmp	r9, r0
 80091f2:	d142      	bne.n	800927a <_malloc_r+0xea>
 80091f4:	6821      	ldr	r1, [r4, #0]
 80091f6:	1a6d      	subs	r5, r5, r1
 80091f8:	4629      	mov	r1, r5
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ffa6 	bl	800914c <sbrk_aligned>
 8009200:	3001      	adds	r0, #1
 8009202:	d03a      	beq.n	800927a <_malloc_r+0xea>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	442b      	add	r3, r5
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	f8d8 3000 	ldr.w	r3, [r8]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	bb62      	cbnz	r2, 800926c <_malloc_r+0xdc>
 8009212:	f8c8 7000 	str.w	r7, [r8]
 8009216:	e00f      	b.n	8009238 <_malloc_r+0xa8>
 8009218:	6822      	ldr	r2, [r4, #0]
 800921a:	1b52      	subs	r2, r2, r5
 800921c:	d420      	bmi.n	8009260 <_malloc_r+0xd0>
 800921e:	2a0b      	cmp	r2, #11
 8009220:	d917      	bls.n	8009252 <_malloc_r+0xc2>
 8009222:	1961      	adds	r1, r4, r5
 8009224:	42a3      	cmp	r3, r4
 8009226:	6025      	str	r5, [r4, #0]
 8009228:	bf18      	it	ne
 800922a:	6059      	strne	r1, [r3, #4]
 800922c:	6863      	ldr	r3, [r4, #4]
 800922e:	bf08      	it	eq
 8009230:	f8c8 1000 	streq.w	r1, [r8]
 8009234:	5162      	str	r2, [r4, r5]
 8009236:	604b      	str	r3, [r1, #4]
 8009238:	4630      	mov	r0, r6
 800923a:	f000 f82f 	bl	800929c <__malloc_unlock>
 800923e:	f104 000b 	add.w	r0, r4, #11
 8009242:	1d23      	adds	r3, r4, #4
 8009244:	f020 0007 	bic.w	r0, r0, #7
 8009248:	1ac2      	subs	r2, r0, r3
 800924a:	bf1c      	itt	ne
 800924c:	1a1b      	subne	r3, r3, r0
 800924e:	50a3      	strne	r3, [r4, r2]
 8009250:	e7af      	b.n	80091b2 <_malloc_r+0x22>
 8009252:	6862      	ldr	r2, [r4, #4]
 8009254:	42a3      	cmp	r3, r4
 8009256:	bf0c      	ite	eq
 8009258:	f8c8 2000 	streq.w	r2, [r8]
 800925c:	605a      	strne	r2, [r3, #4]
 800925e:	e7eb      	b.n	8009238 <_malloc_r+0xa8>
 8009260:	4623      	mov	r3, r4
 8009262:	6864      	ldr	r4, [r4, #4]
 8009264:	e7ae      	b.n	80091c4 <_malloc_r+0x34>
 8009266:	463c      	mov	r4, r7
 8009268:	687f      	ldr	r7, [r7, #4]
 800926a:	e7b6      	b.n	80091da <_malloc_r+0x4a>
 800926c:	461a      	mov	r2, r3
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	42a3      	cmp	r3, r4
 8009272:	d1fb      	bne.n	800926c <_malloc_r+0xdc>
 8009274:	2300      	movs	r3, #0
 8009276:	6053      	str	r3, [r2, #4]
 8009278:	e7de      	b.n	8009238 <_malloc_r+0xa8>
 800927a:	230c      	movs	r3, #12
 800927c:	6033      	str	r3, [r6, #0]
 800927e:	4630      	mov	r0, r6
 8009280:	f000 f80c 	bl	800929c <__malloc_unlock>
 8009284:	e794      	b.n	80091b0 <_malloc_r+0x20>
 8009286:	6005      	str	r5, [r0, #0]
 8009288:	e7d6      	b.n	8009238 <_malloc_r+0xa8>
 800928a:	bf00      	nop
 800928c:	20004e8c 	.word	0x20004e8c

08009290 <__malloc_lock>:
 8009290:	4801      	ldr	r0, [pc, #4]	@ (8009298 <__malloc_lock+0x8>)
 8009292:	f7ff bf00 	b.w	8009096 <__retarget_lock_acquire_recursive>
 8009296:	bf00      	nop
 8009298:	20004e84 	.word	0x20004e84

0800929c <__malloc_unlock>:
 800929c:	4801      	ldr	r0, [pc, #4]	@ (80092a4 <__malloc_unlock+0x8>)
 800929e:	f7ff befb 	b.w	8009098 <__retarget_lock_release_recursive>
 80092a2:	bf00      	nop
 80092a4:	20004e84 	.word	0x20004e84

080092a8 <__sfputc_r>:
 80092a8:	6893      	ldr	r3, [r2, #8]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	b410      	push	{r4}
 80092b0:	6093      	str	r3, [r2, #8]
 80092b2:	da08      	bge.n	80092c6 <__sfputc_r+0x1e>
 80092b4:	6994      	ldr	r4, [r2, #24]
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	db01      	blt.n	80092be <__sfputc_r+0x16>
 80092ba:	290a      	cmp	r1, #10
 80092bc:	d103      	bne.n	80092c6 <__sfputc_r+0x1e>
 80092be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092c2:	f000 bba1 	b.w	8009a08 <__swbuf_r>
 80092c6:	6813      	ldr	r3, [r2, #0]
 80092c8:	1c58      	adds	r0, r3, #1
 80092ca:	6010      	str	r0, [r2, #0]
 80092cc:	7019      	strb	r1, [r3, #0]
 80092ce:	4608      	mov	r0, r1
 80092d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <__sfputs_r>:
 80092d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	4614      	mov	r4, r2
 80092de:	18d5      	adds	r5, r2, r3
 80092e0:	42ac      	cmp	r4, r5
 80092e2:	d101      	bne.n	80092e8 <__sfputs_r+0x12>
 80092e4:	2000      	movs	r0, #0
 80092e6:	e007      	b.n	80092f8 <__sfputs_r+0x22>
 80092e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ec:	463a      	mov	r2, r7
 80092ee:	4630      	mov	r0, r6
 80092f0:	f7ff ffda 	bl	80092a8 <__sfputc_r>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d1f3      	bne.n	80092e0 <__sfputs_r+0xa>
 80092f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092fc <_vfiprintf_r>:
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	460d      	mov	r5, r1
 8009302:	b09d      	sub	sp, #116	@ 0x74
 8009304:	4614      	mov	r4, r2
 8009306:	4698      	mov	r8, r3
 8009308:	4606      	mov	r6, r0
 800930a:	b118      	cbz	r0, 8009314 <_vfiprintf_r+0x18>
 800930c:	6a03      	ldr	r3, [r0, #32]
 800930e:	b90b      	cbnz	r3, 8009314 <_vfiprintf_r+0x18>
 8009310:	f7ff fd5e 	bl	8008dd0 <__sinit>
 8009314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009316:	07d9      	lsls	r1, r3, #31
 8009318:	d405      	bmi.n	8009326 <_vfiprintf_r+0x2a>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	059a      	lsls	r2, r3, #22
 800931e:	d402      	bmi.n	8009326 <_vfiprintf_r+0x2a>
 8009320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009322:	f7ff feb8 	bl	8009096 <__retarget_lock_acquire_recursive>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	071b      	lsls	r3, r3, #28
 800932a:	d501      	bpl.n	8009330 <_vfiprintf_r+0x34>
 800932c:	692b      	ldr	r3, [r5, #16]
 800932e:	b99b      	cbnz	r3, 8009358 <_vfiprintf_r+0x5c>
 8009330:	4629      	mov	r1, r5
 8009332:	4630      	mov	r0, r6
 8009334:	f000 fba6 	bl	8009a84 <__swsetup_r>
 8009338:	b170      	cbz	r0, 8009358 <_vfiprintf_r+0x5c>
 800933a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800933c:	07dc      	lsls	r4, r3, #31
 800933e:	d504      	bpl.n	800934a <_vfiprintf_r+0x4e>
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	b01d      	add	sp, #116	@ 0x74
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	89ab      	ldrh	r3, [r5, #12]
 800934c:	0598      	lsls	r0, r3, #22
 800934e:	d4f7      	bmi.n	8009340 <_vfiprintf_r+0x44>
 8009350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009352:	f7ff fea1 	bl	8009098 <__retarget_lock_release_recursive>
 8009356:	e7f3      	b.n	8009340 <_vfiprintf_r+0x44>
 8009358:	2300      	movs	r3, #0
 800935a:	9309      	str	r3, [sp, #36]	@ 0x24
 800935c:	2320      	movs	r3, #32
 800935e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009362:	f8cd 800c 	str.w	r8, [sp, #12]
 8009366:	2330      	movs	r3, #48	@ 0x30
 8009368:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009518 <_vfiprintf_r+0x21c>
 800936c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009370:	f04f 0901 	mov.w	r9, #1
 8009374:	4623      	mov	r3, r4
 8009376:	469a      	mov	sl, r3
 8009378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800937c:	b10a      	cbz	r2, 8009382 <_vfiprintf_r+0x86>
 800937e:	2a25      	cmp	r2, #37	@ 0x25
 8009380:	d1f9      	bne.n	8009376 <_vfiprintf_r+0x7a>
 8009382:	ebba 0b04 	subs.w	fp, sl, r4
 8009386:	d00b      	beq.n	80093a0 <_vfiprintf_r+0xa4>
 8009388:	465b      	mov	r3, fp
 800938a:	4622      	mov	r2, r4
 800938c:	4629      	mov	r1, r5
 800938e:	4630      	mov	r0, r6
 8009390:	f7ff ffa1 	bl	80092d6 <__sfputs_r>
 8009394:	3001      	adds	r0, #1
 8009396:	f000 80a7 	beq.w	80094e8 <_vfiprintf_r+0x1ec>
 800939a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800939c:	445a      	add	r2, fp
 800939e:	9209      	str	r2, [sp, #36]	@ 0x24
 80093a0:	f89a 3000 	ldrb.w	r3, [sl]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 809f 	beq.w	80094e8 <_vfiprintf_r+0x1ec>
 80093aa:	2300      	movs	r3, #0
 80093ac:	f04f 32ff 	mov.w	r2, #4294967295
 80093b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093b4:	f10a 0a01 	add.w	sl, sl, #1
 80093b8:	9304      	str	r3, [sp, #16]
 80093ba:	9307      	str	r3, [sp, #28]
 80093bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80093c2:	4654      	mov	r4, sl
 80093c4:	2205      	movs	r2, #5
 80093c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ca:	4853      	ldr	r0, [pc, #332]	@ (8009518 <_vfiprintf_r+0x21c>)
 80093cc:	f7f6 ff08 	bl	80001e0 <memchr>
 80093d0:	9a04      	ldr	r2, [sp, #16]
 80093d2:	b9d8      	cbnz	r0, 800940c <_vfiprintf_r+0x110>
 80093d4:	06d1      	lsls	r1, r2, #27
 80093d6:	bf44      	itt	mi
 80093d8:	2320      	movmi	r3, #32
 80093da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093de:	0713      	lsls	r3, r2, #28
 80093e0:	bf44      	itt	mi
 80093e2:	232b      	movmi	r3, #43	@ 0x2b
 80093e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093e8:	f89a 3000 	ldrb.w	r3, [sl]
 80093ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ee:	d015      	beq.n	800941c <_vfiprintf_r+0x120>
 80093f0:	9a07      	ldr	r2, [sp, #28]
 80093f2:	4654      	mov	r4, sl
 80093f4:	2000      	movs	r0, #0
 80093f6:	f04f 0c0a 	mov.w	ip, #10
 80093fa:	4621      	mov	r1, r4
 80093fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009400:	3b30      	subs	r3, #48	@ 0x30
 8009402:	2b09      	cmp	r3, #9
 8009404:	d94b      	bls.n	800949e <_vfiprintf_r+0x1a2>
 8009406:	b1b0      	cbz	r0, 8009436 <_vfiprintf_r+0x13a>
 8009408:	9207      	str	r2, [sp, #28]
 800940a:	e014      	b.n	8009436 <_vfiprintf_r+0x13a>
 800940c:	eba0 0308 	sub.w	r3, r0, r8
 8009410:	fa09 f303 	lsl.w	r3, r9, r3
 8009414:	4313      	orrs	r3, r2
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	46a2      	mov	sl, r4
 800941a:	e7d2      	b.n	80093c2 <_vfiprintf_r+0xc6>
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	1d19      	adds	r1, r3, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	9103      	str	r1, [sp, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	bfbb      	ittet	lt
 8009428:	425b      	neglt	r3, r3
 800942a:	f042 0202 	orrlt.w	r2, r2, #2
 800942e:	9307      	strge	r3, [sp, #28]
 8009430:	9307      	strlt	r3, [sp, #28]
 8009432:	bfb8      	it	lt
 8009434:	9204      	strlt	r2, [sp, #16]
 8009436:	7823      	ldrb	r3, [r4, #0]
 8009438:	2b2e      	cmp	r3, #46	@ 0x2e
 800943a:	d10a      	bne.n	8009452 <_vfiprintf_r+0x156>
 800943c:	7863      	ldrb	r3, [r4, #1]
 800943e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009440:	d132      	bne.n	80094a8 <_vfiprintf_r+0x1ac>
 8009442:	9b03      	ldr	r3, [sp, #12]
 8009444:	1d1a      	adds	r2, r3, #4
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	9203      	str	r2, [sp, #12]
 800944a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800944e:	3402      	adds	r4, #2
 8009450:	9305      	str	r3, [sp, #20]
 8009452:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009528 <_vfiprintf_r+0x22c>
 8009456:	7821      	ldrb	r1, [r4, #0]
 8009458:	2203      	movs	r2, #3
 800945a:	4650      	mov	r0, sl
 800945c:	f7f6 fec0 	bl	80001e0 <memchr>
 8009460:	b138      	cbz	r0, 8009472 <_vfiprintf_r+0x176>
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	eba0 000a 	sub.w	r0, r0, sl
 8009468:	2240      	movs	r2, #64	@ 0x40
 800946a:	4082      	lsls	r2, r0
 800946c:	4313      	orrs	r3, r2
 800946e:	3401      	adds	r4, #1
 8009470:	9304      	str	r3, [sp, #16]
 8009472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009476:	4829      	ldr	r0, [pc, #164]	@ (800951c <_vfiprintf_r+0x220>)
 8009478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800947c:	2206      	movs	r2, #6
 800947e:	f7f6 feaf 	bl	80001e0 <memchr>
 8009482:	2800      	cmp	r0, #0
 8009484:	d03f      	beq.n	8009506 <_vfiprintf_r+0x20a>
 8009486:	4b26      	ldr	r3, [pc, #152]	@ (8009520 <_vfiprintf_r+0x224>)
 8009488:	bb1b      	cbnz	r3, 80094d2 <_vfiprintf_r+0x1d6>
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	3307      	adds	r3, #7
 800948e:	f023 0307 	bic.w	r3, r3, #7
 8009492:	3308      	adds	r3, #8
 8009494:	9303      	str	r3, [sp, #12]
 8009496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009498:	443b      	add	r3, r7
 800949a:	9309      	str	r3, [sp, #36]	@ 0x24
 800949c:	e76a      	b.n	8009374 <_vfiprintf_r+0x78>
 800949e:	fb0c 3202 	mla	r2, ip, r2, r3
 80094a2:	460c      	mov	r4, r1
 80094a4:	2001      	movs	r0, #1
 80094a6:	e7a8      	b.n	80093fa <_vfiprintf_r+0xfe>
 80094a8:	2300      	movs	r3, #0
 80094aa:	3401      	adds	r4, #1
 80094ac:	9305      	str	r3, [sp, #20]
 80094ae:	4619      	mov	r1, r3
 80094b0:	f04f 0c0a 	mov.w	ip, #10
 80094b4:	4620      	mov	r0, r4
 80094b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ba:	3a30      	subs	r2, #48	@ 0x30
 80094bc:	2a09      	cmp	r2, #9
 80094be:	d903      	bls.n	80094c8 <_vfiprintf_r+0x1cc>
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0c6      	beq.n	8009452 <_vfiprintf_r+0x156>
 80094c4:	9105      	str	r1, [sp, #20]
 80094c6:	e7c4      	b.n	8009452 <_vfiprintf_r+0x156>
 80094c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094cc:	4604      	mov	r4, r0
 80094ce:	2301      	movs	r3, #1
 80094d0:	e7f0      	b.n	80094b4 <_vfiprintf_r+0x1b8>
 80094d2:	ab03      	add	r3, sp, #12
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	462a      	mov	r2, r5
 80094d8:	4b12      	ldr	r3, [pc, #72]	@ (8009524 <_vfiprintf_r+0x228>)
 80094da:	a904      	add	r1, sp, #16
 80094dc:	4630      	mov	r0, r6
 80094de:	f3af 8000 	nop.w
 80094e2:	4607      	mov	r7, r0
 80094e4:	1c78      	adds	r0, r7, #1
 80094e6:	d1d6      	bne.n	8009496 <_vfiprintf_r+0x19a>
 80094e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094ea:	07d9      	lsls	r1, r3, #31
 80094ec:	d405      	bmi.n	80094fa <_vfiprintf_r+0x1fe>
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	059a      	lsls	r2, r3, #22
 80094f2:	d402      	bmi.n	80094fa <_vfiprintf_r+0x1fe>
 80094f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094f6:	f7ff fdcf 	bl	8009098 <__retarget_lock_release_recursive>
 80094fa:	89ab      	ldrh	r3, [r5, #12]
 80094fc:	065b      	lsls	r3, r3, #25
 80094fe:	f53f af1f 	bmi.w	8009340 <_vfiprintf_r+0x44>
 8009502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009504:	e71e      	b.n	8009344 <_vfiprintf_r+0x48>
 8009506:	ab03      	add	r3, sp, #12
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	462a      	mov	r2, r5
 800950c:	4b05      	ldr	r3, [pc, #20]	@ (8009524 <_vfiprintf_r+0x228>)
 800950e:	a904      	add	r1, sp, #16
 8009510:	4630      	mov	r0, r6
 8009512:	f000 f879 	bl	8009608 <_printf_i>
 8009516:	e7e4      	b.n	80094e2 <_vfiprintf_r+0x1e6>
 8009518:	08009dd0 	.word	0x08009dd0
 800951c:	08009dda 	.word	0x08009dda
 8009520:	00000000 	.word	0x00000000
 8009524:	080092d7 	.word	0x080092d7
 8009528:	08009dd6 	.word	0x08009dd6

0800952c <_printf_common>:
 800952c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009530:	4616      	mov	r6, r2
 8009532:	4698      	mov	r8, r3
 8009534:	688a      	ldr	r2, [r1, #8]
 8009536:	690b      	ldr	r3, [r1, #16]
 8009538:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800953c:	4293      	cmp	r3, r2
 800953e:	bfb8      	it	lt
 8009540:	4613      	movlt	r3, r2
 8009542:	6033      	str	r3, [r6, #0]
 8009544:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009548:	4607      	mov	r7, r0
 800954a:	460c      	mov	r4, r1
 800954c:	b10a      	cbz	r2, 8009552 <_printf_common+0x26>
 800954e:	3301      	adds	r3, #1
 8009550:	6033      	str	r3, [r6, #0]
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	0699      	lsls	r1, r3, #26
 8009556:	bf42      	ittt	mi
 8009558:	6833      	ldrmi	r3, [r6, #0]
 800955a:	3302      	addmi	r3, #2
 800955c:	6033      	strmi	r3, [r6, #0]
 800955e:	6825      	ldr	r5, [r4, #0]
 8009560:	f015 0506 	ands.w	r5, r5, #6
 8009564:	d106      	bne.n	8009574 <_printf_common+0x48>
 8009566:	f104 0a19 	add.w	sl, r4, #25
 800956a:	68e3      	ldr	r3, [r4, #12]
 800956c:	6832      	ldr	r2, [r6, #0]
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	42ab      	cmp	r3, r5
 8009572:	dc26      	bgt.n	80095c2 <_printf_common+0x96>
 8009574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009578:	6822      	ldr	r2, [r4, #0]
 800957a:	3b00      	subs	r3, #0
 800957c:	bf18      	it	ne
 800957e:	2301      	movne	r3, #1
 8009580:	0692      	lsls	r2, r2, #26
 8009582:	d42b      	bmi.n	80095dc <_printf_common+0xb0>
 8009584:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009588:	4641      	mov	r1, r8
 800958a:	4638      	mov	r0, r7
 800958c:	47c8      	blx	r9
 800958e:	3001      	adds	r0, #1
 8009590:	d01e      	beq.n	80095d0 <_printf_common+0xa4>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	6922      	ldr	r2, [r4, #16]
 8009596:	f003 0306 	and.w	r3, r3, #6
 800959a:	2b04      	cmp	r3, #4
 800959c:	bf02      	ittt	eq
 800959e:	68e5      	ldreq	r5, [r4, #12]
 80095a0:	6833      	ldreq	r3, [r6, #0]
 80095a2:	1aed      	subeq	r5, r5, r3
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	bf0c      	ite	eq
 80095a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095ac:	2500      	movne	r5, #0
 80095ae:	4293      	cmp	r3, r2
 80095b0:	bfc4      	itt	gt
 80095b2:	1a9b      	subgt	r3, r3, r2
 80095b4:	18ed      	addgt	r5, r5, r3
 80095b6:	2600      	movs	r6, #0
 80095b8:	341a      	adds	r4, #26
 80095ba:	42b5      	cmp	r5, r6
 80095bc:	d11a      	bne.n	80095f4 <_printf_common+0xc8>
 80095be:	2000      	movs	r0, #0
 80095c0:	e008      	b.n	80095d4 <_printf_common+0xa8>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4652      	mov	r2, sl
 80095c6:	4641      	mov	r1, r8
 80095c8:	4638      	mov	r0, r7
 80095ca:	47c8      	blx	r9
 80095cc:	3001      	adds	r0, #1
 80095ce:	d103      	bne.n	80095d8 <_printf_common+0xac>
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d8:	3501      	adds	r5, #1
 80095da:	e7c6      	b.n	800956a <_printf_common+0x3e>
 80095dc:	18e1      	adds	r1, r4, r3
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	2030      	movs	r0, #48	@ 0x30
 80095e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095e6:	4422      	add	r2, r4
 80095e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095f0:	3302      	adds	r3, #2
 80095f2:	e7c7      	b.n	8009584 <_printf_common+0x58>
 80095f4:	2301      	movs	r3, #1
 80095f6:	4622      	mov	r2, r4
 80095f8:	4641      	mov	r1, r8
 80095fa:	4638      	mov	r0, r7
 80095fc:	47c8      	blx	r9
 80095fe:	3001      	adds	r0, #1
 8009600:	d0e6      	beq.n	80095d0 <_printf_common+0xa4>
 8009602:	3601      	adds	r6, #1
 8009604:	e7d9      	b.n	80095ba <_printf_common+0x8e>
	...

08009608 <_printf_i>:
 8009608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800960c:	7e0f      	ldrb	r7, [r1, #24]
 800960e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009610:	2f78      	cmp	r7, #120	@ 0x78
 8009612:	4691      	mov	r9, r2
 8009614:	4680      	mov	r8, r0
 8009616:	460c      	mov	r4, r1
 8009618:	469a      	mov	sl, r3
 800961a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800961e:	d807      	bhi.n	8009630 <_printf_i+0x28>
 8009620:	2f62      	cmp	r7, #98	@ 0x62
 8009622:	d80a      	bhi.n	800963a <_printf_i+0x32>
 8009624:	2f00      	cmp	r7, #0
 8009626:	f000 80d2 	beq.w	80097ce <_printf_i+0x1c6>
 800962a:	2f58      	cmp	r7, #88	@ 0x58
 800962c:	f000 80b9 	beq.w	80097a2 <_printf_i+0x19a>
 8009630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009634:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009638:	e03a      	b.n	80096b0 <_printf_i+0xa8>
 800963a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800963e:	2b15      	cmp	r3, #21
 8009640:	d8f6      	bhi.n	8009630 <_printf_i+0x28>
 8009642:	a101      	add	r1, pc, #4	@ (adr r1, 8009648 <_printf_i+0x40>)
 8009644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009648:	080096a1 	.word	0x080096a1
 800964c:	080096b5 	.word	0x080096b5
 8009650:	08009631 	.word	0x08009631
 8009654:	08009631 	.word	0x08009631
 8009658:	08009631 	.word	0x08009631
 800965c:	08009631 	.word	0x08009631
 8009660:	080096b5 	.word	0x080096b5
 8009664:	08009631 	.word	0x08009631
 8009668:	08009631 	.word	0x08009631
 800966c:	08009631 	.word	0x08009631
 8009670:	08009631 	.word	0x08009631
 8009674:	080097b5 	.word	0x080097b5
 8009678:	080096df 	.word	0x080096df
 800967c:	0800976f 	.word	0x0800976f
 8009680:	08009631 	.word	0x08009631
 8009684:	08009631 	.word	0x08009631
 8009688:	080097d7 	.word	0x080097d7
 800968c:	08009631 	.word	0x08009631
 8009690:	080096df 	.word	0x080096df
 8009694:	08009631 	.word	0x08009631
 8009698:	08009631 	.word	0x08009631
 800969c:	08009777 	.word	0x08009777
 80096a0:	6833      	ldr	r3, [r6, #0]
 80096a2:	1d1a      	adds	r2, r3, #4
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6032      	str	r2, [r6, #0]
 80096a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096b0:	2301      	movs	r3, #1
 80096b2:	e09d      	b.n	80097f0 <_printf_i+0x1e8>
 80096b4:	6833      	ldr	r3, [r6, #0]
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	1d19      	adds	r1, r3, #4
 80096ba:	6031      	str	r1, [r6, #0]
 80096bc:	0606      	lsls	r6, r0, #24
 80096be:	d501      	bpl.n	80096c4 <_printf_i+0xbc>
 80096c0:	681d      	ldr	r5, [r3, #0]
 80096c2:	e003      	b.n	80096cc <_printf_i+0xc4>
 80096c4:	0645      	lsls	r5, r0, #25
 80096c6:	d5fb      	bpl.n	80096c0 <_printf_i+0xb8>
 80096c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096cc:	2d00      	cmp	r5, #0
 80096ce:	da03      	bge.n	80096d8 <_printf_i+0xd0>
 80096d0:	232d      	movs	r3, #45	@ 0x2d
 80096d2:	426d      	negs	r5, r5
 80096d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096d8:	4859      	ldr	r0, [pc, #356]	@ (8009840 <_printf_i+0x238>)
 80096da:	230a      	movs	r3, #10
 80096dc:	e011      	b.n	8009702 <_printf_i+0xfa>
 80096de:	6821      	ldr	r1, [r4, #0]
 80096e0:	6833      	ldr	r3, [r6, #0]
 80096e2:	0608      	lsls	r0, r1, #24
 80096e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80096e8:	d402      	bmi.n	80096f0 <_printf_i+0xe8>
 80096ea:	0649      	lsls	r1, r1, #25
 80096ec:	bf48      	it	mi
 80096ee:	b2ad      	uxthmi	r5, r5
 80096f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80096f2:	4853      	ldr	r0, [pc, #332]	@ (8009840 <_printf_i+0x238>)
 80096f4:	6033      	str	r3, [r6, #0]
 80096f6:	bf14      	ite	ne
 80096f8:	230a      	movne	r3, #10
 80096fa:	2308      	moveq	r3, #8
 80096fc:	2100      	movs	r1, #0
 80096fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009702:	6866      	ldr	r6, [r4, #4]
 8009704:	60a6      	str	r6, [r4, #8]
 8009706:	2e00      	cmp	r6, #0
 8009708:	bfa2      	ittt	ge
 800970a:	6821      	ldrge	r1, [r4, #0]
 800970c:	f021 0104 	bicge.w	r1, r1, #4
 8009710:	6021      	strge	r1, [r4, #0]
 8009712:	b90d      	cbnz	r5, 8009718 <_printf_i+0x110>
 8009714:	2e00      	cmp	r6, #0
 8009716:	d04b      	beq.n	80097b0 <_printf_i+0x1a8>
 8009718:	4616      	mov	r6, r2
 800971a:	fbb5 f1f3 	udiv	r1, r5, r3
 800971e:	fb03 5711 	mls	r7, r3, r1, r5
 8009722:	5dc7      	ldrb	r7, [r0, r7]
 8009724:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009728:	462f      	mov	r7, r5
 800972a:	42bb      	cmp	r3, r7
 800972c:	460d      	mov	r5, r1
 800972e:	d9f4      	bls.n	800971a <_printf_i+0x112>
 8009730:	2b08      	cmp	r3, #8
 8009732:	d10b      	bne.n	800974c <_printf_i+0x144>
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	07df      	lsls	r7, r3, #31
 8009738:	d508      	bpl.n	800974c <_printf_i+0x144>
 800973a:	6923      	ldr	r3, [r4, #16]
 800973c:	6861      	ldr	r1, [r4, #4]
 800973e:	4299      	cmp	r1, r3
 8009740:	bfde      	ittt	le
 8009742:	2330      	movle	r3, #48	@ 0x30
 8009744:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009748:	f106 36ff 	addle.w	r6, r6, #4294967295
 800974c:	1b92      	subs	r2, r2, r6
 800974e:	6122      	str	r2, [r4, #16]
 8009750:	f8cd a000 	str.w	sl, [sp]
 8009754:	464b      	mov	r3, r9
 8009756:	aa03      	add	r2, sp, #12
 8009758:	4621      	mov	r1, r4
 800975a:	4640      	mov	r0, r8
 800975c:	f7ff fee6 	bl	800952c <_printf_common>
 8009760:	3001      	adds	r0, #1
 8009762:	d14a      	bne.n	80097fa <_printf_i+0x1f2>
 8009764:	f04f 30ff 	mov.w	r0, #4294967295
 8009768:	b004      	add	sp, #16
 800976a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	f043 0320 	orr.w	r3, r3, #32
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	4833      	ldr	r0, [pc, #204]	@ (8009844 <_printf_i+0x23c>)
 8009778:	2778      	movs	r7, #120	@ 0x78
 800977a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	6831      	ldr	r1, [r6, #0]
 8009782:	061f      	lsls	r7, r3, #24
 8009784:	f851 5b04 	ldr.w	r5, [r1], #4
 8009788:	d402      	bmi.n	8009790 <_printf_i+0x188>
 800978a:	065f      	lsls	r7, r3, #25
 800978c:	bf48      	it	mi
 800978e:	b2ad      	uxthmi	r5, r5
 8009790:	6031      	str	r1, [r6, #0]
 8009792:	07d9      	lsls	r1, r3, #31
 8009794:	bf44      	itt	mi
 8009796:	f043 0320 	orrmi.w	r3, r3, #32
 800979a:	6023      	strmi	r3, [r4, #0]
 800979c:	b11d      	cbz	r5, 80097a6 <_printf_i+0x19e>
 800979e:	2310      	movs	r3, #16
 80097a0:	e7ac      	b.n	80096fc <_printf_i+0xf4>
 80097a2:	4827      	ldr	r0, [pc, #156]	@ (8009840 <_printf_i+0x238>)
 80097a4:	e7e9      	b.n	800977a <_printf_i+0x172>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	f023 0320 	bic.w	r3, r3, #32
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	e7f6      	b.n	800979e <_printf_i+0x196>
 80097b0:	4616      	mov	r6, r2
 80097b2:	e7bd      	b.n	8009730 <_printf_i+0x128>
 80097b4:	6833      	ldr	r3, [r6, #0]
 80097b6:	6825      	ldr	r5, [r4, #0]
 80097b8:	6961      	ldr	r1, [r4, #20]
 80097ba:	1d18      	adds	r0, r3, #4
 80097bc:	6030      	str	r0, [r6, #0]
 80097be:	062e      	lsls	r6, r5, #24
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	d501      	bpl.n	80097c8 <_printf_i+0x1c0>
 80097c4:	6019      	str	r1, [r3, #0]
 80097c6:	e002      	b.n	80097ce <_printf_i+0x1c6>
 80097c8:	0668      	lsls	r0, r5, #25
 80097ca:	d5fb      	bpl.n	80097c4 <_printf_i+0x1bc>
 80097cc:	8019      	strh	r1, [r3, #0]
 80097ce:	2300      	movs	r3, #0
 80097d0:	6123      	str	r3, [r4, #16]
 80097d2:	4616      	mov	r6, r2
 80097d4:	e7bc      	b.n	8009750 <_printf_i+0x148>
 80097d6:	6833      	ldr	r3, [r6, #0]
 80097d8:	1d1a      	adds	r2, r3, #4
 80097da:	6032      	str	r2, [r6, #0]
 80097dc:	681e      	ldr	r6, [r3, #0]
 80097de:	6862      	ldr	r2, [r4, #4]
 80097e0:	2100      	movs	r1, #0
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7f6 fcfc 	bl	80001e0 <memchr>
 80097e8:	b108      	cbz	r0, 80097ee <_printf_i+0x1e6>
 80097ea:	1b80      	subs	r0, r0, r6
 80097ec:	6060      	str	r0, [r4, #4]
 80097ee:	6863      	ldr	r3, [r4, #4]
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	2300      	movs	r3, #0
 80097f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097f8:	e7aa      	b.n	8009750 <_printf_i+0x148>
 80097fa:	6923      	ldr	r3, [r4, #16]
 80097fc:	4632      	mov	r2, r6
 80097fe:	4649      	mov	r1, r9
 8009800:	4640      	mov	r0, r8
 8009802:	47d0      	blx	sl
 8009804:	3001      	adds	r0, #1
 8009806:	d0ad      	beq.n	8009764 <_printf_i+0x15c>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	079b      	lsls	r3, r3, #30
 800980c:	d413      	bmi.n	8009836 <_printf_i+0x22e>
 800980e:	68e0      	ldr	r0, [r4, #12]
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	4298      	cmp	r0, r3
 8009814:	bfb8      	it	lt
 8009816:	4618      	movlt	r0, r3
 8009818:	e7a6      	b.n	8009768 <_printf_i+0x160>
 800981a:	2301      	movs	r3, #1
 800981c:	4632      	mov	r2, r6
 800981e:	4649      	mov	r1, r9
 8009820:	4640      	mov	r0, r8
 8009822:	47d0      	blx	sl
 8009824:	3001      	adds	r0, #1
 8009826:	d09d      	beq.n	8009764 <_printf_i+0x15c>
 8009828:	3501      	adds	r5, #1
 800982a:	68e3      	ldr	r3, [r4, #12]
 800982c:	9903      	ldr	r1, [sp, #12]
 800982e:	1a5b      	subs	r3, r3, r1
 8009830:	42ab      	cmp	r3, r5
 8009832:	dcf2      	bgt.n	800981a <_printf_i+0x212>
 8009834:	e7eb      	b.n	800980e <_printf_i+0x206>
 8009836:	2500      	movs	r5, #0
 8009838:	f104 0619 	add.w	r6, r4, #25
 800983c:	e7f5      	b.n	800982a <_printf_i+0x222>
 800983e:	bf00      	nop
 8009840:	08009de1 	.word	0x08009de1
 8009844:	08009df2 	.word	0x08009df2

08009848 <__sflush_r>:
 8009848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009850:	0716      	lsls	r6, r2, #28
 8009852:	4605      	mov	r5, r0
 8009854:	460c      	mov	r4, r1
 8009856:	d454      	bmi.n	8009902 <__sflush_r+0xba>
 8009858:	684b      	ldr	r3, [r1, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	dc02      	bgt.n	8009864 <__sflush_r+0x1c>
 800985e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009860:	2b00      	cmp	r3, #0
 8009862:	dd48      	ble.n	80098f6 <__sflush_r+0xae>
 8009864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009866:	2e00      	cmp	r6, #0
 8009868:	d045      	beq.n	80098f6 <__sflush_r+0xae>
 800986a:	2300      	movs	r3, #0
 800986c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009870:	682f      	ldr	r7, [r5, #0]
 8009872:	6a21      	ldr	r1, [r4, #32]
 8009874:	602b      	str	r3, [r5, #0]
 8009876:	d030      	beq.n	80098da <__sflush_r+0x92>
 8009878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	0759      	lsls	r1, r3, #29
 800987e:	d505      	bpl.n	800988c <__sflush_r+0x44>
 8009880:	6863      	ldr	r3, [r4, #4]
 8009882:	1ad2      	subs	r2, r2, r3
 8009884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009886:	b10b      	cbz	r3, 800988c <__sflush_r+0x44>
 8009888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800988a:	1ad2      	subs	r2, r2, r3
 800988c:	2300      	movs	r3, #0
 800988e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009890:	6a21      	ldr	r1, [r4, #32]
 8009892:	4628      	mov	r0, r5
 8009894:	47b0      	blx	r6
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	d106      	bne.n	80098aa <__sflush_r+0x62>
 800989c:	6829      	ldr	r1, [r5, #0]
 800989e:	291d      	cmp	r1, #29
 80098a0:	d82b      	bhi.n	80098fa <__sflush_r+0xb2>
 80098a2:	4a2a      	ldr	r2, [pc, #168]	@ (800994c <__sflush_r+0x104>)
 80098a4:	410a      	asrs	r2, r1
 80098a6:	07d6      	lsls	r6, r2, #31
 80098a8:	d427      	bmi.n	80098fa <__sflush_r+0xb2>
 80098aa:	2200      	movs	r2, #0
 80098ac:	6062      	str	r2, [r4, #4]
 80098ae:	04d9      	lsls	r1, r3, #19
 80098b0:	6922      	ldr	r2, [r4, #16]
 80098b2:	6022      	str	r2, [r4, #0]
 80098b4:	d504      	bpl.n	80098c0 <__sflush_r+0x78>
 80098b6:	1c42      	adds	r2, r0, #1
 80098b8:	d101      	bne.n	80098be <__sflush_r+0x76>
 80098ba:	682b      	ldr	r3, [r5, #0]
 80098bc:	b903      	cbnz	r3, 80098c0 <__sflush_r+0x78>
 80098be:	6560      	str	r0, [r4, #84]	@ 0x54
 80098c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098c2:	602f      	str	r7, [r5, #0]
 80098c4:	b1b9      	cbz	r1, 80098f6 <__sflush_r+0xae>
 80098c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098ca:	4299      	cmp	r1, r3
 80098cc:	d002      	beq.n	80098d4 <__sflush_r+0x8c>
 80098ce:	4628      	mov	r0, r5
 80098d0:	f7ff fbf2 	bl	80090b8 <_free_r>
 80098d4:	2300      	movs	r3, #0
 80098d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80098d8:	e00d      	b.n	80098f6 <__sflush_r+0xae>
 80098da:	2301      	movs	r3, #1
 80098dc:	4628      	mov	r0, r5
 80098de:	47b0      	blx	r6
 80098e0:	4602      	mov	r2, r0
 80098e2:	1c50      	adds	r0, r2, #1
 80098e4:	d1c9      	bne.n	800987a <__sflush_r+0x32>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d0c6      	beq.n	800987a <__sflush_r+0x32>
 80098ec:	2b1d      	cmp	r3, #29
 80098ee:	d001      	beq.n	80098f4 <__sflush_r+0xac>
 80098f0:	2b16      	cmp	r3, #22
 80098f2:	d11e      	bne.n	8009932 <__sflush_r+0xea>
 80098f4:	602f      	str	r7, [r5, #0]
 80098f6:	2000      	movs	r0, #0
 80098f8:	e022      	b.n	8009940 <__sflush_r+0xf8>
 80098fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098fe:	b21b      	sxth	r3, r3
 8009900:	e01b      	b.n	800993a <__sflush_r+0xf2>
 8009902:	690f      	ldr	r7, [r1, #16]
 8009904:	2f00      	cmp	r7, #0
 8009906:	d0f6      	beq.n	80098f6 <__sflush_r+0xae>
 8009908:	0793      	lsls	r3, r2, #30
 800990a:	680e      	ldr	r6, [r1, #0]
 800990c:	bf08      	it	eq
 800990e:	694b      	ldreq	r3, [r1, #20]
 8009910:	600f      	str	r7, [r1, #0]
 8009912:	bf18      	it	ne
 8009914:	2300      	movne	r3, #0
 8009916:	eba6 0807 	sub.w	r8, r6, r7
 800991a:	608b      	str	r3, [r1, #8]
 800991c:	f1b8 0f00 	cmp.w	r8, #0
 8009920:	dde9      	ble.n	80098f6 <__sflush_r+0xae>
 8009922:	6a21      	ldr	r1, [r4, #32]
 8009924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009926:	4643      	mov	r3, r8
 8009928:	463a      	mov	r2, r7
 800992a:	4628      	mov	r0, r5
 800992c:	47b0      	blx	r6
 800992e:	2800      	cmp	r0, #0
 8009930:	dc08      	bgt.n	8009944 <__sflush_r+0xfc>
 8009932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800993a:	81a3      	strh	r3, [r4, #12]
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009944:	4407      	add	r7, r0
 8009946:	eba8 0800 	sub.w	r8, r8, r0
 800994a:	e7e7      	b.n	800991c <__sflush_r+0xd4>
 800994c:	dfbffffe 	.word	0xdfbffffe

08009950 <_fflush_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	690b      	ldr	r3, [r1, #16]
 8009954:	4605      	mov	r5, r0
 8009956:	460c      	mov	r4, r1
 8009958:	b913      	cbnz	r3, 8009960 <_fflush_r+0x10>
 800995a:	2500      	movs	r5, #0
 800995c:	4628      	mov	r0, r5
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	b118      	cbz	r0, 800996a <_fflush_r+0x1a>
 8009962:	6a03      	ldr	r3, [r0, #32]
 8009964:	b90b      	cbnz	r3, 800996a <_fflush_r+0x1a>
 8009966:	f7ff fa33 	bl	8008dd0 <__sinit>
 800996a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0f3      	beq.n	800995a <_fflush_r+0xa>
 8009972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009974:	07d0      	lsls	r0, r2, #31
 8009976:	d404      	bmi.n	8009982 <_fflush_r+0x32>
 8009978:	0599      	lsls	r1, r3, #22
 800997a:	d402      	bmi.n	8009982 <_fflush_r+0x32>
 800997c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800997e:	f7ff fb8a 	bl	8009096 <__retarget_lock_acquire_recursive>
 8009982:	4628      	mov	r0, r5
 8009984:	4621      	mov	r1, r4
 8009986:	f7ff ff5f 	bl	8009848 <__sflush_r>
 800998a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800998c:	07da      	lsls	r2, r3, #31
 800998e:	4605      	mov	r5, r0
 8009990:	d4e4      	bmi.n	800995c <_fflush_r+0xc>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	059b      	lsls	r3, r3, #22
 8009996:	d4e1      	bmi.n	800995c <_fflush_r+0xc>
 8009998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800999a:	f7ff fb7d 	bl	8009098 <__retarget_lock_release_recursive>
 800999e:	e7dd      	b.n	800995c <_fflush_r+0xc>

080099a0 <_putc_r>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	460d      	mov	r5, r1
 80099a4:	4614      	mov	r4, r2
 80099a6:	4606      	mov	r6, r0
 80099a8:	b118      	cbz	r0, 80099b2 <_putc_r+0x12>
 80099aa:	6a03      	ldr	r3, [r0, #32]
 80099ac:	b90b      	cbnz	r3, 80099b2 <_putc_r+0x12>
 80099ae:	f7ff fa0f 	bl	8008dd0 <__sinit>
 80099b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099b4:	07d8      	lsls	r0, r3, #31
 80099b6:	d405      	bmi.n	80099c4 <_putc_r+0x24>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	0599      	lsls	r1, r3, #22
 80099bc:	d402      	bmi.n	80099c4 <_putc_r+0x24>
 80099be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099c0:	f7ff fb69 	bl	8009096 <__retarget_lock_acquire_recursive>
 80099c4:	68a3      	ldr	r3, [r4, #8]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	60a3      	str	r3, [r4, #8]
 80099cc:	da05      	bge.n	80099da <_putc_r+0x3a>
 80099ce:	69a2      	ldr	r2, [r4, #24]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	db12      	blt.n	80099fa <_putc_r+0x5a>
 80099d4:	b2eb      	uxtb	r3, r5
 80099d6:	2b0a      	cmp	r3, #10
 80099d8:	d00f      	beq.n	80099fa <_putc_r+0x5a>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	6022      	str	r2, [r4, #0]
 80099e0:	701d      	strb	r5, [r3, #0]
 80099e2:	b2ed      	uxtb	r5, r5
 80099e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099e6:	07da      	lsls	r2, r3, #31
 80099e8:	d405      	bmi.n	80099f6 <_putc_r+0x56>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	059b      	lsls	r3, r3, #22
 80099ee:	d402      	bmi.n	80099f6 <_putc_r+0x56>
 80099f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099f2:	f7ff fb51 	bl	8009098 <__retarget_lock_release_recursive>
 80099f6:	4628      	mov	r0, r5
 80099f8:	bd70      	pop	{r4, r5, r6, pc}
 80099fa:	4629      	mov	r1, r5
 80099fc:	4622      	mov	r2, r4
 80099fe:	4630      	mov	r0, r6
 8009a00:	f000 f802 	bl	8009a08 <__swbuf_r>
 8009a04:	4605      	mov	r5, r0
 8009a06:	e7ed      	b.n	80099e4 <_putc_r+0x44>

08009a08 <__swbuf_r>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	460e      	mov	r6, r1
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	4605      	mov	r5, r0
 8009a10:	b118      	cbz	r0, 8009a1a <__swbuf_r+0x12>
 8009a12:	6a03      	ldr	r3, [r0, #32]
 8009a14:	b90b      	cbnz	r3, 8009a1a <__swbuf_r+0x12>
 8009a16:	f7ff f9db 	bl	8008dd0 <__sinit>
 8009a1a:	69a3      	ldr	r3, [r4, #24]
 8009a1c:	60a3      	str	r3, [r4, #8]
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	071a      	lsls	r2, r3, #28
 8009a22:	d501      	bpl.n	8009a28 <__swbuf_r+0x20>
 8009a24:	6923      	ldr	r3, [r4, #16]
 8009a26:	b943      	cbnz	r3, 8009a3a <__swbuf_r+0x32>
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 f82a 	bl	8009a84 <__swsetup_r>
 8009a30:	b118      	cbz	r0, 8009a3a <__swbuf_r+0x32>
 8009a32:	f04f 37ff 	mov.w	r7, #4294967295
 8009a36:	4638      	mov	r0, r7
 8009a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	6922      	ldr	r2, [r4, #16]
 8009a3e:	1a98      	subs	r0, r3, r2
 8009a40:	6963      	ldr	r3, [r4, #20]
 8009a42:	b2f6      	uxtb	r6, r6
 8009a44:	4283      	cmp	r3, r0
 8009a46:	4637      	mov	r7, r6
 8009a48:	dc05      	bgt.n	8009a56 <__swbuf_r+0x4e>
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f7ff ff7f 	bl	8009950 <_fflush_r>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d1ed      	bne.n	8009a32 <__swbuf_r+0x2a>
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	60a3      	str	r3, [r4, #8]
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	6022      	str	r2, [r4, #0]
 8009a62:	701e      	strb	r6, [r3, #0]
 8009a64:	6962      	ldr	r2, [r4, #20]
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d004      	beq.n	8009a76 <__swbuf_r+0x6e>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	07db      	lsls	r3, r3, #31
 8009a70:	d5e1      	bpl.n	8009a36 <__swbuf_r+0x2e>
 8009a72:	2e0a      	cmp	r6, #10
 8009a74:	d1df      	bne.n	8009a36 <__swbuf_r+0x2e>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f7ff ff69 	bl	8009950 <_fflush_r>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d0d9      	beq.n	8009a36 <__swbuf_r+0x2e>
 8009a82:	e7d6      	b.n	8009a32 <__swbuf_r+0x2a>

08009a84 <__swsetup_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4b29      	ldr	r3, [pc, #164]	@ (8009b2c <__swsetup_r+0xa8>)
 8009a88:	4605      	mov	r5, r0
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	b118      	cbz	r0, 8009a98 <__swsetup_r+0x14>
 8009a90:	6a03      	ldr	r3, [r0, #32]
 8009a92:	b90b      	cbnz	r3, 8009a98 <__swsetup_r+0x14>
 8009a94:	f7ff f99c 	bl	8008dd0 <__sinit>
 8009a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a9c:	0719      	lsls	r1, r3, #28
 8009a9e:	d422      	bmi.n	8009ae6 <__swsetup_r+0x62>
 8009aa0:	06da      	lsls	r2, r3, #27
 8009aa2:	d407      	bmi.n	8009ab4 <__swsetup_r+0x30>
 8009aa4:	2209      	movs	r2, #9
 8009aa6:	602a      	str	r2, [r5, #0]
 8009aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aac:	81a3      	strh	r3, [r4, #12]
 8009aae:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab2:	e033      	b.n	8009b1c <__swsetup_r+0x98>
 8009ab4:	0758      	lsls	r0, r3, #29
 8009ab6:	d512      	bpl.n	8009ade <__swsetup_r+0x5a>
 8009ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009aba:	b141      	cbz	r1, 8009ace <__swsetup_r+0x4a>
 8009abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	d002      	beq.n	8009aca <__swsetup_r+0x46>
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f7ff faf7 	bl	80090b8 <_free_r>
 8009aca:	2300      	movs	r3, #0
 8009acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ad4:	81a3      	strh	r3, [r4, #12]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f043 0308 	orr.w	r3, r3, #8
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	b94b      	cbnz	r3, 8009afe <__swsetup_r+0x7a>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af4:	d003      	beq.n	8009afe <__swsetup_r+0x7a>
 8009af6:	4621      	mov	r1, r4
 8009af8:	4628      	mov	r0, r5
 8009afa:	f000 f84f 	bl	8009b9c <__smakebuf_r>
 8009afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b02:	f013 0201 	ands.w	r2, r3, #1
 8009b06:	d00a      	beq.n	8009b1e <__swsetup_r+0x9a>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	60a2      	str	r2, [r4, #8]
 8009b0c:	6962      	ldr	r2, [r4, #20]
 8009b0e:	4252      	negs	r2, r2
 8009b10:	61a2      	str	r2, [r4, #24]
 8009b12:	6922      	ldr	r2, [r4, #16]
 8009b14:	b942      	cbnz	r2, 8009b28 <__swsetup_r+0xa4>
 8009b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b1a:	d1c5      	bne.n	8009aa8 <__swsetup_r+0x24>
 8009b1c:	bd38      	pop	{r3, r4, r5, pc}
 8009b1e:	0799      	lsls	r1, r3, #30
 8009b20:	bf58      	it	pl
 8009b22:	6962      	ldrpl	r2, [r4, #20]
 8009b24:	60a2      	str	r2, [r4, #8]
 8009b26:	e7f4      	b.n	8009b12 <__swsetup_r+0x8e>
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e7f7      	b.n	8009b1c <__swsetup_r+0x98>
 8009b2c:	20000088 	.word	0x20000088

08009b30 <_sbrk_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	@ (8009b4c <_sbrk_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f7 fcac 	bl	8001498 <_sbrk>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_sbrk_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_sbrk_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20004e80 	.word	0x20004e80

08009b50 <__swhatbuf_r>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	460c      	mov	r4, r1
 8009b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b58:	2900      	cmp	r1, #0
 8009b5a:	b096      	sub	sp, #88	@ 0x58
 8009b5c:	4615      	mov	r5, r2
 8009b5e:	461e      	mov	r6, r3
 8009b60:	da0d      	bge.n	8009b7e <__swhatbuf_r+0x2e>
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b68:	f04f 0100 	mov.w	r1, #0
 8009b6c:	bf14      	ite	ne
 8009b6e:	2340      	movne	r3, #64	@ 0x40
 8009b70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b74:	2000      	movs	r0, #0
 8009b76:	6031      	str	r1, [r6, #0]
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	b016      	add	sp, #88	@ 0x58
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
 8009b7e:	466a      	mov	r2, sp
 8009b80:	f000 f848 	bl	8009c14 <_fstat_r>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	dbec      	blt.n	8009b62 <__swhatbuf_r+0x12>
 8009b88:	9901      	ldr	r1, [sp, #4]
 8009b8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b92:	4259      	negs	r1, r3
 8009b94:	4159      	adcs	r1, r3
 8009b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b9a:	e7eb      	b.n	8009b74 <__swhatbuf_r+0x24>

08009b9c <__smakebuf_r>:
 8009b9c:	898b      	ldrh	r3, [r1, #12]
 8009b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ba0:	079d      	lsls	r5, r3, #30
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	d507      	bpl.n	8009bb8 <__smakebuf_r+0x1c>
 8009ba8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	6163      	str	r3, [r4, #20]
 8009bb4:	b003      	add	sp, #12
 8009bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb8:	ab01      	add	r3, sp, #4
 8009bba:	466a      	mov	r2, sp
 8009bbc:	f7ff ffc8 	bl	8009b50 <__swhatbuf_r>
 8009bc0:	9f00      	ldr	r7, [sp, #0]
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff fae2 	bl	8009190 <_malloc_r>
 8009bcc:	b948      	cbnz	r0, 8009be2 <__smakebuf_r+0x46>
 8009bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd2:	059a      	lsls	r2, r3, #22
 8009bd4:	d4ee      	bmi.n	8009bb4 <__smakebuf_r+0x18>
 8009bd6:	f023 0303 	bic.w	r3, r3, #3
 8009bda:	f043 0302 	orr.w	r3, r3, #2
 8009bde:	81a3      	strh	r3, [r4, #12]
 8009be0:	e7e2      	b.n	8009ba8 <__smakebuf_r+0xc>
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	6020      	str	r0, [r4, #0]
 8009be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bf2:	b15b      	cbz	r3, 8009c0c <__smakebuf_r+0x70>
 8009bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f000 f81d 	bl	8009c38 <_isatty_r>
 8009bfe:	b128      	cbz	r0, 8009c0c <__smakebuf_r+0x70>
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	f023 0303 	bic.w	r3, r3, #3
 8009c06:	f043 0301 	orr.w	r3, r3, #1
 8009c0a:	81a3      	strh	r3, [r4, #12]
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	431d      	orrs	r5, r3
 8009c10:	81a5      	strh	r5, [r4, #12]
 8009c12:	e7cf      	b.n	8009bb4 <__smakebuf_r+0x18>

08009c14 <_fstat_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4d07      	ldr	r5, [pc, #28]	@ (8009c34 <_fstat_r+0x20>)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	4611      	mov	r1, r2
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	f7f7 fc10 	bl	8001446 <_fstat>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	d102      	bne.n	8009c30 <_fstat_r+0x1c>
 8009c2a:	682b      	ldr	r3, [r5, #0]
 8009c2c:	b103      	cbz	r3, 8009c30 <_fstat_r+0x1c>
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	bd38      	pop	{r3, r4, r5, pc}
 8009c32:	bf00      	nop
 8009c34:	20004e80 	.word	0x20004e80

08009c38 <_isatty_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d06      	ldr	r5, [pc, #24]	@ (8009c54 <_isatty_r+0x1c>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7f7 fc0f 	bl	8001466 <_isatty>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_isatty_r+0x1a>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_isatty_r+0x1a>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	20004e80 	.word	0x20004e80

08009c58 <_init>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr

08009c64 <_fini>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	bf00      	nop
 8009c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6a:	bc08      	pop	{r3}
 8009c6c:	469e      	mov	lr, r3
 8009c6e:	4770      	bx	lr
